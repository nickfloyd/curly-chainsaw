=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::GistsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GistsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::GistsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GistsApi' do
    it 'should create an instance of GistsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::GistsApi)
    end
  end

  # unit tests for gists_check_is_starred
  # Check if a gist is starred
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'gists_check_is_starred test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_create
  # Create a gist
  # Allows you to add a new gist with one or more files.  **Note:** Don&#39;t name your files \&quot;gistfile\&quot; with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
  # @param gists_create_request 
  # @param [Hash] opts the optional parameters
  # @return [GistSimple]
  describe 'gists_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_create_comment
  # Create a gist comment
  # 
  # @param gist_id The unique identifier of the gist.
  # @param gists_create_comment_request 
  # @param [Hash] opts the optional parameters
  # @return [GistComment]
  describe 'gists_create_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_delete
  # Delete a gist
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'gists_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_delete_comment
  # Delete a gist comment
  # 
  # @param gist_id The unique identifier of the gist.
  # @param comment_id The unique identifier of the comment.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'gists_delete_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_fork
  # Fork a gist
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @return [BaseGist]
  describe 'gists_fork test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_get
  # Get a gist
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @return [GistSimple]
  describe 'gists_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_get_comment
  # Get a gist comment
  # 
  # @param gist_id The unique identifier of the gist.
  # @param comment_id The unique identifier of the comment.
  # @param [Hash] opts the optional parameters
  # @return [GistComment]
  describe 'gists_get_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_get_revision
  # Get a gist revision
  # 
  # @param gist_id The unique identifier of the gist.
  # @param sha 
  # @param [Hash] opts the optional parameters
  # @return [GistSimple]
  describe 'gists_get_revision test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_list
  # List gists for the authenticated user
  # Lists the authenticated user&#39;s gists or if called anonymously, this endpoint returns all public gists:
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<BaseGist>]
  describe 'gists_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_list_comments
  # List gist comments
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<GistComment>]
  describe 'gists_list_comments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_list_commits
  # List gist commits
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<GistCommit>]
  describe 'gists_list_commits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_list_for_user
  # List gists for a user
  # Lists public gists for the specified user:
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<BaseGist>]
  describe 'gists_list_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_list_forks
  # List gist forks
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<GistSimple>]
  describe 'gists_list_forks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_list_public
  # List public gists
  # List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<BaseGist>]
  describe 'gists_list_public test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_list_starred
  # List starred gists
  # List the authenticated user&#39;s starred gists:
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<BaseGist>]
  describe 'gists_list_starred test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_star
  # Star a gist
  # Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'gists_star test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_unstar
  # Unstar a gist
  # 
  # @param gist_id The unique identifier of the gist.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'gists_unstar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_update
  # Update a gist
  # Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren&#39;t explicitly changed during an edit are unchanged.
  # @param gist_id The unique identifier of the gist.
  # @param gists_update_request 
  # @param [Hash] opts the optional parameters
  # @return [GistSimple]
  describe 'gists_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gists_update_comment
  # Update a gist comment
  # 
  # @param gist_id The unique identifier of the gist.
  # @param comment_id The unique identifier of the comment.
  # @param gists_create_comment_request 
  # @param [Hash] opts the optional parameters
  # @return [GistComment]
  describe 'gists_update_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
