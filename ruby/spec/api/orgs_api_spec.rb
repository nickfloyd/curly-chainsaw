=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::OrgsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OrgsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::OrgsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrgsApi' do
    it 'should create an instance of OrgsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::OrgsApi)
    end
  end

  # unit tests for orgs_add_security_manager_team
  # Add a security manager team
  # Adds a team as a security manager for an organization. For more information, see \&quot;[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization.\&quot;  To use this endpoint, you must be an administrator for the organization, and you must use an access token with the &#x60;write:org&#x60; scope.  GitHub Apps must have the &#x60;administration&#x60; organization read-write permission to use this endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param team_slug The slug of the team name.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_add_security_manager_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_block_user
  # Block a user from an organization
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_block_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_cancel_invitation
  # Cancel an organization invitation
  # Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
  # @param org The organization name. The name is not case sensitive.
  # @param invitation_id The unique identifier of the invitation.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_cancel_invitation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_check_blocked_user
  # Check if a user is blocked by an organization
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_check_blocked_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_check_membership_for_user
  # Check organization membership for a user
  # Check if a user is, publicly or privately, a member of the organization.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_check_membership_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_check_public_membership_for_user
  # Check public organization membership for a user
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_check_public_membership_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_convert_member_to_outside_collaborator
  # Convert an organization member to outside collaborator
  # When an organization member is converted to an outside collaborator, they&#39;ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \&quot;[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\&quot;. Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \&quot;[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\&quot;
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [OrgsConvertMemberToOutsideCollaboratorRequest] :orgs_convert_member_to_outside_collaborator_request 
  # @return [Object]
  describe 'orgs_convert_member_to_outside_collaborator test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_create_invitation
  # Create an organization invitation
  # Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [OrgsCreateInvitationRequest] :orgs_create_invitation_request 
  # @return [OrganizationInvitation]
  describe 'orgs_create_invitation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_create_webhook
  # Create an organization webhook
  # Here&#39;s how you can create a hook that posts payloads in JSON format:
  # @param org The organization name. The name is not case sensitive.
  # @param orgs_create_webhook_request 
  # @param [Hash] opts the optional parameters
  # @return [OrgHook]
  describe 'orgs_create_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_delete_webhook
  # Delete an organization webhook
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_delete_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_get
  # Get an organization
  # To see many of the organization response values, you need to be an authenticated organization owner with the &#x60;admin:org&#x60; scope. When the value of &#x60;two_factor_requirement_enabled&#x60; is &#x60;true&#x60;, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  GitHub Apps with the &#x60;Organization plan&#x60; permission can use this endpoint to retrieve information about an organization&#39;s GitHub plan. See \&quot;[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\&quot; for details. For an example response, see &#39;Response with GitHub plan information&#39; below.\&quot;
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [OrganizationFull]
  describe 'orgs_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_get_audit_log
  # Get the audit log for an organization
  # Gets the audit log for an organization. For more information, see \&quot;[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\&quot;  This endpoint is available for organizations on GitHub Enterprise Cloud. To use this endpoint, you must be an organization owner, and you must use an access token with the &#x60;admin:org&#x60; scope. GitHub Apps must have the &#x60;organization_administration&#x60; read permission to use this endpoint.  By default, the response includes up to 30 events from the past three months. Use the &#x60;phrase&#x60; parameter to filter results and retrieve older events. For example, use the &#x60;phrase&#x60; parameter with the &#x60;created&#x60; qualifier to filter events based on when the events occurred. For more information, see \&quot;[Reviewing the audit log for your organization](https://docs.github.com/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).\&quot;  Use pagination to retrieve fewer or more than 30 events. For more information, see \&quot;[Resources in the REST API](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\&quot;
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
  # @option opts [String] :include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;.
  # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
  # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
  # @option opts [String] :order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<EnterpriseAdminGetAuditLog200ResponseInner>]
  describe 'orgs_get_audit_log test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_get_membership_for_authenticated_user
  # Get an organization membership for the authenticated user
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [OrgMembership]
  describe 'orgs_get_membership_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_get_membership_for_user
  # Get organization membership for a user
  # In order to get a user&#39;s membership with an organization, the authenticated user must be an organization member. The &#x60;state&#x60; parameter in the response can be used to identify the user&#39;s membership status.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [OrgMembership]
  describe 'orgs_get_membership_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_get_webhook
  # Get an organization webhook
  # Returns a webhook configured in an organization. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\&quot;
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param [Hash] opts the optional parameters
  # @return [OrgHook]
  describe 'orgs_get_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_get_webhook_config_for_org
  # Get a webhook configuration for an organization
  # Returns the webhook configuration for an organization. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\&quot;  Access tokens must have the &#x60;admin:org_hook&#x60; scope, and GitHub Apps must have the &#x60;organization_hooks:read&#x60; permission.
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param [Hash] opts the optional parameters
  # @return [WebhookConfiguration]
  describe 'orgs_get_webhook_config_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_get_webhook_delivery
  # Get a webhook delivery for an organization webhook
  # Returns a delivery for a webhook configured in an organization.
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param delivery_id 
  # @param [Hash] opts the optional parameters
  # @return [WebhookDelivery]
  describe 'orgs_get_webhook_delivery test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list
  # List organizations
  # Lists all organizations, in the order that they were created on GitHub.  **Note:** Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :since An organization ID. Only return organizations with an ID greater than this ID.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<OrganizationSimple>]
  describe 'orgs_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_app_installations
  # List app installations for an organization
  # Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with &#x60;admin:read&#x60; scope to use this endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [OrgsListAppInstallations200Response]
  describe 'orgs_list_app_installations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_blocked_users
  # List users blocked by an organization
  # List the users blocked by an organization.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [Array<SimpleUser1>]
  describe 'orgs_list_blocked_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_custom_roles
  # List custom repository roles in an organization
  # List the custom repository roles available in this organization. In order to see custom repository roles in an organization, the authenticated user must be an organization owner.  For more information on custom repository roles, see \&quot;[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)\&quot;.
  # @param organization_id 
  # @param [Hash] opts the optional parameters
  # @return [OrgsListCustomRoles200Response]
  describe 'orgs_list_custom_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_failed_invitations
  # List failed organization invitations
  # The return hash contains &#x60;failed_at&#x60; and &#x60;failed_reason&#x60; fields which represent the time at which the invitation failed and the reason for the failure.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<OrganizationInvitation>]
  describe 'orgs_list_failed_invitations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_for_authenticated_user
  # List organizations for the authenticated user
  # List organizations for the authenticated user.  **OAuth scope requirements**  This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with &#x60;read:org&#x60; scope, you can publicize your organization membership with &#x60;user&#x60; scope, etc.). Therefore, this API requires at least &#x60;user&#x60; or &#x60;read:org&#x60; scope. OAuth requests with insufficient scope receive a &#x60;403 Forbidden&#x60; response.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<OrganizationSimple>]
  describe 'orgs_list_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_for_user
  # List organizations for a user
  # List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<OrganizationSimple>]
  describe 'orgs_list_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_invitation_teams
  # List organization invitation teams
  # List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
  # @param org The organization name. The name is not case sensitive.
  # @param invitation_id The unique identifier of the invitation.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Team>]
  describe 'orgs_list_invitation_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_members
  # List organization members
  # List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter members returned in the list. &#x60;2fa_disabled&#x60; means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
  # @option opts [String] :role Filter members returned by their role.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<SimpleUser1>]
  describe 'orgs_list_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_memberships_for_authenticated_user
  # List organization memberships for the authenticated user
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state Indicates the state of the memberships to return. Can be either &#x60;active&#x60; or &#x60;pending&#x60;. If not specified, the API returns both active and pending memberships.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<OrgMembership>]
  describe 'orgs_list_memberships_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_outside_collaborators
  # List outside collaborators for an organization
  # List all users who are outside collaborators of an organization.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter the list of outside collaborators. &#x60;2fa_disabled&#x60; means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<SimpleUser1>]
  describe 'orgs_list_outside_collaborators test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_pending_invitations
  # List pending organization invitations
  # The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, &#x60;hiring_manager&#x60;, or &#x60;reinstate&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<OrganizationInvitation>]
  describe 'orgs_list_pending_invitations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_public_members
  # List public organization members
  # Members of an organization can choose to have their membership publicized or not.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<SimpleUser1>]
  describe 'orgs_list_public_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_saml_sso_authorizations
  # List SAML SSO authorizations for an organization
  # Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).  An authenticated organization owner with the &#x60;read:org&#x60; scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://docs.github.com/en/articles/about-authentication-with-saml-single-sign-on).
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page token
  # @option opts [String] :login Limits the list of credentials authorizations for an organization to a specific login
  # @return [Array<CredentialAuthorization>]
  describe 'orgs_list_saml_sso_authorizations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_security_manager_teams
  # List security manager teams
  # Lists teams that are security managers for an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the &#x60;read:org&#x60; scope.  GitHub Apps must have the &#x60;administration&#x60; organization read permission to use this endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [Array<TeamSimple1>]
  describe 'orgs_list_security_manager_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_webhook_deliveries
  # List deliveries for an organization webhook
  # Returns a list of webhook deliveries for a webhook configured in an organization.
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [String] :cursor Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the &#x60;link&#x60; header for the next and previous page cursors.
  # @return [Array<SimpleWebhookDelivery>]
  describe 'orgs_list_webhook_deliveries test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_list_webhooks
  # List organization webhooks
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<OrgHook>]
  describe 'orgs_list_webhooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_ping_webhook
  # Ping an organization webhook
  # This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_ping_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_redeliver_webhook_delivery
  # Redeliver a delivery for an organization webhook
  # Redeliver a delivery for a webhook configured in an organization.
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param delivery_id 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'orgs_redeliver_webhook_delivery test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_remove_member
  # Remove an organization member
  # Removing a user from this list will remove them from all teams and they will no longer have any access to the organization&#39;s repositories.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_remove_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_remove_membership_for_user
  # Remove organization membership for a user
  # In order to remove a user&#39;s membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_remove_membership_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_remove_outside_collaborator
  # Remove outside collaborator from an organization
  # Removing a user from this list will remove them from all the organization&#39;s repositories.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_remove_outside_collaborator test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_remove_public_membership_for_authenticated_user
  # Remove public organization membership for the authenticated user
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_remove_public_membership_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_remove_saml_sso_authorization
  # Remove a SAML SSO authorization for an organization
  # Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).  An authenticated organization owner with the &#x60;admin:org&#x60; scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone&#39;s credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
  # @param org The organization name. The name is not case sensitive.
  # @param credential_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_remove_saml_sso_authorization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_remove_security_manager_team
  # Remove a security manager team
  # Removes the security manager role from a team for an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization.\&quot;  To use this endpoint, you must be an administrator for the organization, and you must use an access token with the &#x60;admin:org&#x60; scope.  GitHub Apps must have the &#x60;administration&#x60; organization read-write permission to use this endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param team_slug The slug of the team name.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_remove_security_manager_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_set_membership_for_user
  # Set organization membership for a user
  # Only authenticated organization owners can add a member to the organization or update the member&#39;s role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user&#39;s [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be &#x60;pending&#x60; until they accept the invitation.      *   Authenticated users can _update_ a user&#39;s membership by passing the &#x60;role&#x60; parameter. If the authenticated user changes a member&#39;s role to &#x60;admin&#x60;, the affected user will receive an email notifying them that they&#39;ve been made an organization owner. If the authenticated user changes an owner&#39;s role to &#x60;member&#x60;, no email will be sent.  **Rate limits**  To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [OrgsSetMembershipForUserRequest] :orgs_set_membership_for_user_request 
  # @return [OrgMembership]
  describe 'orgs_set_membership_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_set_public_membership_for_authenticated_user
  # Set public organization membership for the authenticated user
  # The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_set_public_membership_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_unblock_user
  # Unblock a user from an organization
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'orgs_unblock_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_update
  # Update an organization
  # **Parameter Deprecation Notice:** GitHub will replace and discontinue &#x60;members_allowed_repository_creation_type&#x60; in favor of more granular permissions. The new input parameters are &#x60;members_can_create_public_repositories&#x60;, &#x60;members_can_create_private_repositories&#x60; for all organizations and &#x60;members_can_create_internal_repositories&#x60; for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Enables an authenticated organization owner with the &#x60;admin:org&#x60; scope to update the organization&#39;s profile and member privileges.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [OrgsUpdateRequest] :orgs_update_request 
  # @return [OrganizationFull]
  describe 'orgs_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_update_membership_for_authenticated_user
  # Update an organization membership for the authenticated user
  # 
  # @param org The organization name. The name is not case sensitive.
  # @param orgs_update_membership_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [OrgMembership]
  describe 'orgs_update_membership_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_update_webhook
  # Update an organization webhook
  # Updates a webhook configured in an organization. When you update a webhook, the &#x60;secret&#x60; will be overwritten. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\&quot;
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param [Hash] opts the optional parameters
  # @option opts [OrgsUpdateWebhookRequest] :orgs_update_webhook_request 
  # @return [OrgHook]
  describe 'orgs_update_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for orgs_update_webhook_config_for_org
  # Update a webhook configuration for an organization
  # Updates the webhook configuration for an organization. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\&quot;  Access tokens must have the &#x60;admin:org_hook&#x60; scope, and GitHub Apps must have the &#x60;organization_hooks:write&#x60; permission.
  # @param org The organization name. The name is not case sensitive.
  # @param hook_id The unique identifier of the hook.
  # @param [Hash] opts the optional parameters
  # @option opts [AppsUpdateWebhookConfigForAppRequest] :apps_update_webhook_config_for_app_request 
  # @return [WebhookConfiguration]
  describe 'orgs_update_webhook_config_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
