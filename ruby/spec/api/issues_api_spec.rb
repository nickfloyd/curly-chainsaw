=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::IssuesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'IssuesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::IssuesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of IssuesApi' do
    it 'should create an instance of IssuesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::IssuesApi)
    end
  end

  # unit tests for issues_add_assignees
  # Add assignees to an issue
  # Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesAddAssigneesRequest] :issues_add_assignees_request 
  # @return [Issue]
  describe 'issues_add_assignees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_add_labels
  # Add labels to an issue
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesAddLabelsRequest] :issues_add_labels_request 
  # @return [Array<Label>]
  describe 'issues_add_labels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_check_user_can_be_assigned
  # Check if a user can be assigned
  # Checks if a user has permission to be assigned to an issue in this repository.  If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned.  Otherwise a &#x60;404&#x60; status code is returned.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param assignee 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'issues_check_user_can_be_assigned test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_create
  # Create an issue
  # Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a &#x60;410 Gone&#x60; status.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issues_create_request 
  # @param [Hash] opts the optional parameters
  # @return [Issue]
  describe 'issues_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_create_comment
  # Create an issue comment
  # This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param issues_update_comment_request 
  # @param [Hash] opts the optional parameters
  # @return [IssueComment]
  describe 'issues_create_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_create_label
  # Create a label
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issues_create_label_request 
  # @param [Hash] opts the optional parameters
  # @return [Label]
  describe 'issues_create_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_create_milestone
  # Create a milestone
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issues_create_milestone_request 
  # @param [Hash] opts the optional parameters
  # @return [Milestone1]
  describe 'issues_create_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_delete_comment
  # Delete an issue comment
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param comment_id The unique identifier of the comment.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'issues_delete_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_delete_label
  # Delete a label
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param name 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'issues_delete_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_delete_milestone
  # Delete a milestone
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param milestone_number The number that identifies the milestone.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'issues_delete_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_get
  # Get an issue
  # The API returns a [&#x60;301 Moved Permanently&#x60; status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a &#x60;404 Not Found&#x60; status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a &#x60;410 Gone&#x60; status. To receive webhook events for transferred and deleted issues, subscribe to the [&#x60;issues&#x60;](https://docs.github.com/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @return [Issue]
  describe 'issues_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_get_comment
  # Get an issue comment
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param comment_id The unique identifier of the comment.
  # @param [Hash] opts the optional parameters
  # @return [IssueComment]
  describe 'issues_get_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_get_event
  # Get an issue event
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param event_id 
  # @param [Hash] opts the optional parameters
  # @return [IssueEvent]
  describe 'issues_get_event test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_get_label
  # Get a label
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param name 
  # @param [Hash] opts the optional parameters
  # @return [Label]
  describe 'issues_get_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_get_milestone
  # Get a milestone
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param milestone_number The number that identifies the milestone.
  # @param [Hash] opts the optional parameters
  # @return [Milestone1]
  describe 'issues_get_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list
  # List issues assigned to the authenticated user
  # List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the &#x60;filter&#x60; query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation.
  # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;.
  # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
  # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;.
  # @option opts [String] :direction The direction to sort the results by.
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Boolean] :collab 
  # @option opts [Boolean] :orgs 
  # @option opts [Boolean] :owned 
  # @option opts [Boolean] :pulls 
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Issue>]
  describe 'issues_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_assignees
  # List assignees
  # Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<SimpleUser1>]
  describe 'issues_list_assignees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_comments
  # List issue comments
  # Issue Comments are ordered by ascending ID.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<IssueComment>]
  describe 'issues_list_comments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_comments_for_repo
  # List issue comments for a repository
  # By default, Issue Comments are ordered by ascending ID.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort The property to sort the results by. &#x60;created&#x60; means when the repository was starred. &#x60;updated&#x60; means when the repository was last pushed to.
  # @option opts [String] :direction Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter.
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<IssueComment>]
  describe 'issues_list_comments_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_events
  # List issue events
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<IssueEventForIssue>]
  describe 'issues_list_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_events_for_repo
  # List issue events for a repository
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<IssueEvent>]
  describe 'issues_list_events_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_events_for_timeline
  # List timeline events for an issue
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<TimelineEvent>]
  describe 'issues_list_events_for_timeline test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_for_authenticated_user
  # List user account issues assigned to the authenticated user
  # List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation.
  # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;.
  # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
  # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;.
  # @option opts [String] :direction The direction to sort the results by.
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Issue>]
  describe 'issues_list_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_for_org
  # List organization issues assigned to the authenticated user
  # List issues in an organization assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation.
  # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;.
  # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
  # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;.
  # @option opts [String] :direction The direction to sort the results by.
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Issue>]
  describe 'issues_list_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_for_repo
  # List repository issues
  # List issues in a repository.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :milestone If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned.
  # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;.
  # @option opts [String] :assignee Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user.
  # @option opts [String] :creator The user that created the issue.
  # @option opts [String] :mentioned A user that&#39;s mentioned in the issue.
  # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
  # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;.
  # @option opts [String] :direction The direction to sort the results by.
  # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Issue>]
  describe 'issues_list_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_labels_for_milestone
  # List labels for issues in a milestone
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param milestone_number The number that identifies the milestone.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Label>]
  describe 'issues_list_labels_for_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_labels_for_repo
  # List labels for a repository
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Label>]
  describe 'issues_list_labels_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_labels_on_issue
  # List labels for an issue
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Label>]
  describe 'issues_list_labels_on_issue test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_list_milestones
  # List milestones
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;.
  # @option opts [String] :sort What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;.
  # @option opts [String] :direction The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [Array<Milestone1>]
  describe 'issues_list_milestones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_lock
  # Lock an issue
  # Users with push access can lock an issue or pull request&#39;s conversation.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesLockRequest] :issues_lock_request 
  # @return [nil]
  describe 'issues_lock test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_remove_all_labels
  # Remove all labels from an issue
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'issues_remove_all_labels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_remove_assignees
  # Remove assignees from an issue
  # Removes one or more assignees from an issue.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesRemoveAssigneesRequest] :issues_remove_assignees_request 
  # @return [Issue]
  describe 'issues_remove_assignees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_remove_label
  # Remove a label from an issue
  # Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a &#x60;404 Not Found&#x60; status if the label does not exist.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param name 
  # @param [Hash] opts the optional parameters
  # @return [Array<Label>]
  describe 'issues_remove_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_set_labels
  # Set labels for an issue
  # Removes any previous labels and sets the new labels for an issue.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesSetLabelsRequest] :issues_set_labels_request 
  # @return [Array<Label>]
  describe 'issues_set_labels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_unlock
  # Unlock an issue
  # Users with push access can unlock an issue&#39;s conversation.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'issues_unlock test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_update
  # Update an issue
  # Issue owners and users with push access can edit an issue.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param issue_number The number that identifies the issue.
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesUpdateRequest] :issues_update_request 
  # @return [Issue]
  describe 'issues_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_update_comment
  # Update an issue comment
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param comment_id The unique identifier of the comment.
  # @param issues_update_comment_request 
  # @param [Hash] opts the optional parameters
  # @return [IssueComment]
  describe 'issues_update_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_update_label
  # Update a label
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param name 
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesUpdateLabelRequest] :issues_update_label_request 
  # @return [Label]
  describe 'issues_update_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issues_update_milestone
  # Update a milestone
  # 
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param milestone_number The number that identifies the milestone.
  # @param [Hash] opts the optional parameters
  # @option opts [IssuesUpdateMilestoneRequest] :issues_update_milestone_request 
  # @return [Milestone1]
  describe 'issues_update_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
