=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::InteractionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'InteractionsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::InteractionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InteractionsApi' do
    it 'should create an instance of InteractionsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::InteractionsApi)
    end
  end

  # unit tests for interactions_get_restrictions_for_authenticated_user
  # Get interaction restrictions for your public repositories
  # Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
  # @param [Hash] opts the optional parameters
  # @return [InteractionsGetRestrictionsForOrg200Response]
  describe 'interactions_get_restrictions_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_get_restrictions_for_org
  # Get interaction restrictions for an organization
  # Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [InteractionsGetRestrictionsForOrg200Response]
  describe 'interactions_get_restrictions_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_get_restrictions_for_repo
  # Get interaction restrictions for a repository
  # Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [InteractionsGetRestrictionsForOrg200Response]
  describe 'interactions_get_restrictions_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_remove_restrictions_for_authenticated_user
  # Remove interaction restrictions from your public repositories
  # Removes any interaction restrictions from your public repositories.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'interactions_remove_restrictions_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_remove_restrictions_for_org
  # Remove interaction restrictions for an organization
  # Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'interactions_remove_restrictions_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_remove_restrictions_for_repo
  # Remove interaction restrictions for a repository
  # Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'interactions_remove_restrictions_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_set_restrictions_for_authenticated_user
  # Set interaction restrictions for your public repositories
  # Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
  # @param interaction_restrictions 
  # @param [Hash] opts the optional parameters
  # @return [InteractionLimits]
  describe 'interactions_set_restrictions_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_set_restrictions_for_org
  # Set interaction restrictions for an organization
  # Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
  # @param org The organization name. The name is not case sensitive.
  # @param interaction_restrictions 
  # @param [Hash] opts the optional parameters
  # @return [InteractionLimits]
  describe 'interactions_set_restrictions_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interactions_set_restrictions_for_repo
  # Set interaction restrictions for a repository
  # Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param interaction_restrictions 
  # @param [Hash] opts the optional parameters
  # @return [InteractionLimits]
  describe 'interactions_set_restrictions_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
