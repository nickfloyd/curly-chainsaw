=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::CodespacesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CodespacesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::CodespacesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CodespacesApi' do
    it 'should create an instance of CodespacesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::CodespacesApi)
    end
  end

  # unit tests for codespaces_add_repository_for_secret_for_authenticated_user
  # Add a selected repository to a user secret
  # Adds a repository to the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on the referenced repository to use this endpoint.
  # @param secret_name The name of the secret.
  # @param repository_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'codespaces_add_repository_for_secret_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_codespace_machines_for_authenticated_user
  # List machine types for a codespace
  # List the machine types a codespace can transition to use.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [CodespacesRepoMachinesForAuthenticatedUser200Response]
  describe 'codespaces_codespace_machines_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_create_for_authenticated_user
  # Create a codespace for the authenticated user
  # Creates a new codespace, owned by the authenticated user.  This endpoint requires either a &#x60;repository_id&#x60; OR a &#x60;pull_request&#x60; but not both.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param codespaces_create_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [Codespace]
  describe 'codespaces_create_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_create_or_update_repo_secret
  # Create or update a repository secret
  # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.  #### Example of encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example of encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example of encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param secret_name The name of the secret.
  # @param codespaces_create_or_update_repo_secret_request 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'codespaces_create_or_update_repo_secret test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_create_or_update_secret_for_authenticated_user
  # Create or update a secret for the authenticated user
  # Creates or updates a secret for a user&#39;s codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must also have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission and &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
  # @param secret_name The name of the secret.
  # @param codespaces_create_or_update_secret_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'codespaces_create_or_update_secret_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_create_with_pr_for_authenticated_user
  # Create a codespace from a pull request
  # Creates a codespace owned by the authenticated user for the specified pull request.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param codespaces_create_with_pr_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [Codespace]
  describe 'codespaces_create_with_pr_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_create_with_repo_for_authenticated_user
  # Create a codespace in a repository
  # Creates a codespace owned by the authenticated user in the specified repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param codespaces_create_with_repo_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [Codespace]
  describe 'codespaces_create_with_repo_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_delete_for_authenticated_user
  # Delete a codespace for the authenticated user
  # Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'codespaces_delete_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_delete_from_organization
  # Delete a codespace from the organization
  # Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'codespaces_delete_from_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_delete_repo_secret
  # Delete a repository secret
  # Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param secret_name The name of the secret.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'codespaces_delete_repo_secret test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_delete_secret_for_authenticated_user
  # Delete a secret for the authenticated user
  # Deletes a secret from a user&#39;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
  # @param secret_name The name of the secret.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'codespaces_delete_secret_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_export_for_authenticated_user
  # Export a codespace for the authenticated user
  # Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [FetchesInformationAboutAnExportOfACodespace]
  describe 'codespaces_export_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_get_export_details_for_authenticated_user
  # Get details about a codespace export
  # Gets information about an export of a codespace.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param export_id The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported.
  # @param [Hash] opts the optional parameters
  # @return [FetchesInformationAboutAnExportOfACodespace]
  describe 'codespaces_get_export_details_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_get_for_authenticated_user
  # Get a codespace for the authenticated user
  # Gets information about a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [Codespace]
  describe 'codespaces_get_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_get_public_key_for_authenticated_user
  # Get public key for the authenticated user
  # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @return [CodespacesUserPublicKey]
  describe 'codespaces_get_public_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_get_repo_public_key
  # Get a repository public key
  # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [CodespacesPublicKey]
  describe 'codespaces_get_repo_public_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_get_repo_secret
  # Get a repository secret
  # Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param secret_name The name of the secret.
  # @param [Hash] opts the optional parameters
  # @return [CodespacesSecret]
  describe 'codespaces_get_repo_secret test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_get_secret_for_authenticated_user
  # Get a secret for the authenticated user
  # Gets a secret available to a user&#39;s codespaces without revealing its encrypted value.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
  # @param secret_name The name of the secret.
  # @param [Hash] opts the optional parameters
  # @return [CodespacesSecret1]
  describe 'codespaces_get_secret_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_list_devcontainers_in_repository_for_authenticated_user
  # List devcontainer configurations in a repository for the authenticated user
  # Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response]
  describe 'codespaces_list_devcontainers_in_repository_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_list_for_authenticated_user
  # List codespaces for the authenticated user
  # Lists the authenticated user&#39;s codespaces.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @option opts [Integer] :repository_id ID of the Repository to filter on
  # @return [CodespacesListInOrganization200Response]
  describe 'codespaces_list_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_list_in_organization
  # List codespaces for the organization
  # Lists the codespaces associated to a specified organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [CodespacesListInOrganization200Response]
  describe 'codespaces_list_in_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_list_in_repository_for_authenticated_user
  # List codespaces in a repository for the authenticated user
  # Lists the codespaces associated to a specified repository and the authenticated user.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [CodespacesListInOrganization200Response]
  describe 'codespaces_list_in_repository_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_list_repo_secrets
  # List repository secrets
  # Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [CodespacesListRepoSecrets200Response]
  describe 'codespaces_list_repo_secrets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_list_repositories_for_secret_for_authenticated_user
  # List selected repositories for a user secret
  # List the repositories that have been granted the ability to use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
  # @param secret_name The name of the secret.
  # @param [Hash] opts the optional parameters
  # @return [ActionsListSelectedReposForOrgSecret200Response]
  describe 'codespaces_list_repositories_for_secret_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_list_secrets_for_authenticated_user
  # List secrets for the authenticated user
  # Lists all secrets available for a user&#39;s Codespaces without revealing their encrypted values.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [Integer] :page Page number of the results to fetch.
  # @return [CodespacesListSecretsForAuthenticatedUser200Response]
  describe 'codespaces_list_secrets_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_pre_flight_with_repo_for_authenticated_user
  # Get default attributes for a codespace
  # Gets the default attributes for codespaces created by the user with the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
  # @option opts [String] :client_ip An alternative IP for default location auto-detection, such as when proxying a request.
  # @return [CodespacesPreFlightWithRepoForAuthenticatedUser200Response]
  describe 'codespaces_pre_flight_with_repo_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_remove_repository_for_secret_for_authenticated_user
  # Remove a selected repository from a user secret
  # Removes a repository from the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
  # @param secret_name The name of the secret.
  # @param repository_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'codespaces_remove_repository_for_secret_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_repo_machines_for_authenticated_user
  # List available machine types for a repository
  # List the machine types available for a given repository based on its configuration.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :location The location to check for available machines. Assigned by IP if not provided.
  # @option opts [String] :client_ip IP for location auto-detection when proxying a request
  # @return [CodespacesRepoMachinesForAuthenticatedUser200Response]
  describe 'codespaces_repo_machines_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_set_repositories_for_secret_for_authenticated_user
  # Set selected repositories for a user secret
  # Select the repositories that will use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
  # @param secret_name The name of the secret.
  # @param codespaces_set_repositories_for_secret_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'codespaces_set_repositories_for_secret_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_start_for_authenticated_user
  # Start a codespace for the authenticated user
  # Starts a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [Codespace]
  describe 'codespaces_start_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_stop_for_authenticated_user
  # Stop a codespace for the authenticated user
  # Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [Codespace]
  describe 'codespaces_stop_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_stop_in_organization
  # Stop a codespace for an organization user
  # Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
  # @param org The organization name. The name is not case sensitive.
  # @param username The handle for the GitHub user account.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @return [Codespace]
  describe 'codespaces_stop_in_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for codespaces_update_for_authenticated_user
  # Update a codespace for the authenticated user
  # Updates a codespace owned by the authenticated user. Currently only the codespace&#39;s machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
  # @param codespace_name The name of the codespace.
  # @param [Hash] opts the optional parameters
  # @option opts [CodespacesUpdateForAuthenticatedUserRequest] :codespaces_update_for_authenticated_user_request 
  # @return [Codespace]
  describe 'codespaces_update_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
