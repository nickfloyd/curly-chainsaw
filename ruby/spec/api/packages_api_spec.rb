=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PackagesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PackagesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PackagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PackagesApi' do
    it 'should create an instance of PackagesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PackagesApi)
    end
  end

  # unit tests for packages_delete_package_for_authenticated_user
  # Delete a package for the authenticated user
  # Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:delete&#x60; scopes. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete_package_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_delete_package_for_org
  # Delete a package for an organization
  # Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:delete&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container you want to delete.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete_package_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_delete_package_for_user
  # Delete a package for a user
  # Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:delete&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container you want to delete.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete_package_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_delete_package_version_for_authenticated_user
  # Delete a package version for the authenticated user
  # Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:delete&#x60; scopes. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete_package_version_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_delete_package_version_for_org
  # Delete package version for an organization
  # Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:delete&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container you want to delete.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param org The organization name. The name is not case sensitive.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete_package_version_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_delete_package_version_for_user
  # Delete package version for a user
  # Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:delete&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container you want to delete.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param username The handle for the GitHub user account.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete_package_version_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_all_package_versions_for_package_owned_by_authenticated_user
  # Get all package versions for a package owned by the authenticated user
  # Returns all package versions for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [String] :state The state of the package, either active or deleted.
  # @return [Array<PackageVersion>]
  describe 'packages_get_all_package_versions_for_package_owned_by_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_all_package_versions_for_package_owned_by_org
  # Get all package versions for a package owned by an organization
  # Returns all package versions for a package owned by an organization.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @option opts [String] :state The state of the package, either active or deleted.
  # @return [Array<PackageVersion>]
  describe 'packages_get_all_package_versions_for_package_owned_by_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_all_package_versions_for_package_owned_by_user
  # Get all package versions for a package owned by a user
  # Returns all package versions for a public package owned by a specified user.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [Array<PackageVersion>]
  describe 'packages_get_all_package_versions_for_package_owned_by_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_package_for_authenticated_user
  # Get a package for the authenticated user
  # Gets a specific package for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param [Hash] opts the optional parameters
  # @return [Package]
  describe 'packages_get_package_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_package_for_organization
  # Get a package for an organization
  # Gets a specific package in an organization.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @return [Package]
  describe 'packages_get_package_for_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_package_for_user
  # Get a package for a user
  # Gets a specific package metadata for a public package owned by a user.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [Package]
  describe 'packages_get_package_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_package_version_for_authenticated_user
  # Get a package version for the authenticated user
  # Gets a specific package version for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [PackageVersion]
  describe 'packages_get_package_version_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_package_version_for_organization
  # Get a package version for an organization
  # Gets a specific package version in an organization.  You must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param org The organization name. The name is not case sensitive.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [PackageVersion]
  describe 'packages_get_package_version_for_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_get_package_version_for_user
  # Get a package version for a user
  # Gets a specific package version for a public package owned by a specified user.  At this time, to use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param package_version_id Unique identifier of the package version.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [PackageVersion]
  describe 'packages_get_package_version_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_list_packages_for_authenticated_user
  # List packages for the authenticated user&#39;s namespace
  # Lists packages owned by the authenticated user within the user&#39;s namespace.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :visibility The selected visibility of the packages. Only &#x60;container&#x60; package_types currently support &#x60;internal&#x60; visibility properly. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. This parameter is optional and only filters an existing result set.
  # @return [Array<Package>]
  describe 'packages_list_packages_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_list_packages_for_organization
  # List packages for an organization
  # Lists all packages in an organization readable by the user.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :visibility The selected visibility of the packages. Only &#x60;container&#x60; package_types currently support &#x60;internal&#x60; visibility properly. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. This parameter is optional and only filters an existing result set.
  # @return [Array<Package>]
  describe 'packages_list_packages_for_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_list_packages_for_user
  # List packages for a user
  # Lists all packages in a user&#39;s namespace for which the requesting user has access.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; scope. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :visibility The selected visibility of the packages. Only &#x60;container&#x60; package_types currently support &#x60;internal&#x60; visibility properly. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. This parameter is optional and only filters an existing result set.
  # @return [Array<Package>]
  describe 'packages_list_packages_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_restore_package_for_authenticated_user
  # Restore a package for the authenticated user
  # Restores a package owned by the authenticated user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:write&#x60; scopes. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token package token
  # @return [nil]
  describe 'packages_restore_package_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_restore_package_for_org
  # Restore a package for an organization
  # Restores an entire package in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:write&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container that you want to restore.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param org The organization name. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token package token
  # @return [nil]
  describe 'packages_restore_package_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_restore_package_for_user
  # Restore a package for a user
  # Restores an entire package for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:write&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container that you want to restore.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token package token
  # @return [nil]
  describe 'packages_restore_package_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_restore_package_version_for_authenticated_user
  # Restore a package version for the authenticated user
  # Restores a package version owned by the authenticated user.  You can restore a deleted package version under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:write&#x60; scopes. If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_restore_package_version_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_restore_package_version_for_org
  # Restore package version for an organization
  # Restores a specific package version in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:write&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container that you want to restore.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param org The organization name. The name is not case sensitive.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_restore_package_version_for_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_restore_package_version_for_user
  # Restore package version for a user
  # Restores a specific package version for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;packages:read&#x60; and &#x60;packages:write&#x60; scopes. In addition: - If &#x60;package_type&#x60; is not &#x60;container&#x60;, your token must also include the &#x60;repo&#x60; scope. - If &#x60;package_type&#x60; is &#x60;container&#x60;, you must also have admin permissions to the container that you want to restore.
  # @param package_type The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
  # @param package_name The name of the package.
  # @param username The handle for the GitHub user account.
  # @param package_version_id Unique identifier of the package version.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_restore_package_version_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
