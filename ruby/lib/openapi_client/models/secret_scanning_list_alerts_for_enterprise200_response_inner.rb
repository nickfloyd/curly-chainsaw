=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class SecretScanningListAlertsForEnterprise200ResponseInner
    # The security alert number.
    attr_accessor :number

    # The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    attr_accessor :created_at

    # The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    attr_accessor :updated_at

    # The REST API URL of the alert resource.
    attr_accessor :url

    # The GitHub URL of the alert resource.
    attr_accessor :html_url

    # The REST API URL of the code locations for this alert.
    attr_accessor :locations_url

    # Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
    attr_accessor :state

    # **Required when the `state` is `resolved`.** The reason for resolving the alert.
    attr_accessor :resolution

    # The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    attr_accessor :resolved_at

    attr_accessor :resolved_by

    # The type of secret that secret scanning detected.
    attr_accessor :secret_type

    # User-friendly name for the detected secret, matching the `secret_type`. For a list of built-in patterns, see \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\"
    attr_accessor :secret_type_display_name

    # The secret that was detected.
    attr_accessor :secret

    attr_accessor :repository

    # Whether push protection was bypassed for the detected secret.
    attr_accessor :push_protection_bypassed

    attr_accessor :push_protection_bypassed_by

    # The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    attr_accessor :push_protection_bypassed_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'number' => :'number',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'url' => :'url',
        :'html_url' => :'html_url',
        :'locations_url' => :'locations_url',
        :'state' => :'state',
        :'resolution' => :'resolution',
        :'resolved_at' => :'resolved_at',
        :'resolved_by' => :'resolved_by',
        :'secret_type' => :'secret_type',
        :'secret_type_display_name' => :'secret_type_display_name',
        :'secret' => :'secret',
        :'repository' => :'repository',
        :'push_protection_bypassed' => :'push_protection_bypassed',
        :'push_protection_bypassed_by' => :'push_protection_bypassed_by',
        :'push_protection_bypassed_at' => :'push_protection_bypassed_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'number' => :'Integer',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'url' => :'String',
        :'html_url' => :'String',
        :'locations_url' => :'String',
        :'state' => :'String',
        :'resolution' => :'String',
        :'resolved_at' => :'Time',
        :'resolved_by' => :'SimpleUser',
        :'secret_type' => :'String',
        :'secret_type_display_name' => :'String',
        :'secret' => :'String',
        :'repository' => :'SimpleRepository',
        :'push_protection_bypassed' => :'Boolean',
        :'push_protection_bypassed_by' => :'SimpleUser',
        :'push_protection_bypassed_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'updated_at',
        :'resolution',
        :'resolved_at',
        :'resolved_by',
        :'push_protection_bypassed',
        :'push_protection_bypassed_by',
        :'push_protection_bypassed_at'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SecretScanningListAlertsForEnterprise200ResponseInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SecretScanningListAlertsForEnterprise200ResponseInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'locations_url')
        self.locations_url = attributes[:'locations_url']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'resolution')
        self.resolution = attributes[:'resolution']
      end

      if attributes.key?(:'resolved_at')
        self.resolved_at = attributes[:'resolved_at']
      end

      if attributes.key?(:'resolved_by')
        self.resolved_by = attributes[:'resolved_by']
      end

      if attributes.key?(:'secret_type')
        self.secret_type = attributes[:'secret_type']
      end

      if attributes.key?(:'secret_type_display_name')
        self.secret_type_display_name = attributes[:'secret_type_display_name']
      end

      if attributes.key?(:'secret')
        self.secret = attributes[:'secret']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'push_protection_bypassed')
        self.push_protection_bypassed = attributes[:'push_protection_bypassed']
      end

      if attributes.key?(:'push_protection_bypassed_by')
        self.push_protection_bypassed_by = attributes[:'push_protection_bypassed_by']
      end

      if attributes.key?(:'push_protection_bypassed_at')
        self.push_protection_bypassed_at = attributes[:'push_protection_bypassed_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('String', ["open", "resolved"])
      return false unless state_validator.valid?(@state)
      resolution_validator = EnumAttributeValidator.new('String', ["null", "false_positive", "wont_fix", "revoked", "used_in_tests"])
      return false unless resolution_validator.valid?(@resolution)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["open", "resolved"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resolution Object to be assigned
    def resolution=(resolution)
      validator = EnumAttributeValidator.new('String', ["null", "false_positive", "wont_fix", "revoked", "used_in_tests"])
      unless validator.valid?(resolution)
        fail ArgumentError, "invalid value for \"resolution\", must be one of #{validator.allowable_values}."
      end
      @resolution = resolution
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          number == o.number &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          url == o.url &&
          html_url == o.html_url &&
          locations_url == o.locations_url &&
          state == o.state &&
          resolution == o.resolution &&
          resolved_at == o.resolved_at &&
          resolved_by == o.resolved_by &&
          secret_type == o.secret_type &&
          secret_type_display_name == o.secret_type_display_name &&
          secret == o.secret &&
          repository == o.repository &&
          push_protection_bypassed == o.push_protection_bypassed &&
          push_protection_bypassed_by == o.push_protection_bypassed_by &&
          push_protection_bypassed_at == o.push_protection_bypassed_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [number, created_at, updated_at, url, html_url, locations_url, state, resolution, resolved_at, resolved_by, secret_type, secret_type_display_name, secret, repository, push_protection_bypassed, push_protection_bypassed_by, push_protection_bypassed_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
