=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class RepositoryTemplateRepositoryOwner
    attr_accessor :login

    attr_accessor :id

    attr_accessor :node_id

    attr_accessor :avatar_url

    attr_accessor :gravatar_id

    attr_accessor :url

    attr_accessor :html_url

    attr_accessor :followers_url

    attr_accessor :following_url

    attr_accessor :gists_url

    attr_accessor :starred_url

    attr_accessor :subscriptions_url

    attr_accessor :organizations_url

    attr_accessor :repos_url

    attr_accessor :events_url

    attr_accessor :received_events_url

    attr_accessor :type

    attr_accessor :site_admin

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'login' => :'login',
        :'id' => :'id',
        :'node_id' => :'node_id',
        :'avatar_url' => :'avatar_url',
        :'gravatar_id' => :'gravatar_id',
        :'url' => :'url',
        :'html_url' => :'html_url',
        :'followers_url' => :'followers_url',
        :'following_url' => :'following_url',
        :'gists_url' => :'gists_url',
        :'starred_url' => :'starred_url',
        :'subscriptions_url' => :'subscriptions_url',
        :'organizations_url' => :'organizations_url',
        :'repos_url' => :'repos_url',
        :'events_url' => :'events_url',
        :'received_events_url' => :'received_events_url',
        :'type' => :'type',
        :'site_admin' => :'site_admin'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'login' => :'String',
        :'id' => :'Integer',
        :'node_id' => :'String',
        :'avatar_url' => :'String',
        :'gravatar_id' => :'String',
        :'url' => :'String',
        :'html_url' => :'String',
        :'followers_url' => :'String',
        :'following_url' => :'String',
        :'gists_url' => :'String',
        :'starred_url' => :'String',
        :'subscriptions_url' => :'String',
        :'organizations_url' => :'String',
        :'repos_url' => :'String',
        :'events_url' => :'String',
        :'received_events_url' => :'String',
        :'type' => :'String',
        :'site_admin' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::RepositoryTemplateRepositoryOwner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::RepositoryTemplateRepositoryOwner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'login')
        self.login = attributes[:'login']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.key?(:'gravatar_id')
        self.gravatar_id = attributes[:'gravatar_id']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'followers_url')
        self.followers_url = attributes[:'followers_url']
      end

      if attributes.key?(:'following_url')
        self.following_url = attributes[:'following_url']
      end

      if attributes.key?(:'gists_url')
        self.gists_url = attributes[:'gists_url']
      end

      if attributes.key?(:'starred_url')
        self.starred_url = attributes[:'starred_url']
      end

      if attributes.key?(:'subscriptions_url')
        self.subscriptions_url = attributes[:'subscriptions_url']
      end

      if attributes.key?(:'organizations_url')
        self.organizations_url = attributes[:'organizations_url']
      end

      if attributes.key?(:'repos_url')
        self.repos_url = attributes[:'repos_url']
      end

      if attributes.key?(:'events_url')
        self.events_url = attributes[:'events_url']
      end

      if attributes.key?(:'received_events_url')
        self.received_events_url = attributes[:'received_events_url']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'site_admin')
        self.site_admin = attributes[:'site_admin']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          login == o.login &&
          id == o.id &&
          node_id == o.node_id &&
          avatar_url == o.avatar_url &&
          gravatar_id == o.gravatar_id &&
          url == o.url &&
          html_url == o.html_url &&
          followers_url == o.followers_url &&
          following_url == o.following_url &&
          gists_url == o.gists_url &&
          starred_url == o.starred_url &&
          subscriptions_url == o.subscriptions_url &&
          organizations_url == o.organizations_url &&
          repos_url == o.repos_url &&
          events_url == o.events_url &&
          received_events_url == o.received_events_url &&
          type == o.type &&
          site_admin == o.site_admin
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [login, id, node_id, avatar_url, gravatar_id, url, html_url, followers_url, following_url, gists_url, starred_url, subscriptions_url, organizations_url, repos_url, events_url, received_events_url, type, site_admin].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
