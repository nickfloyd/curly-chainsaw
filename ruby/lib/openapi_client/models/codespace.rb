=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  # A codespace.
  class Codespace
    attr_accessor :id

    # Automatically generated name of this codespace.
    attr_accessor :name

    # Display name for this codespace.
    attr_accessor :display_name

    # UUID identifying this codespace's environment.
    attr_accessor :environment_id

    attr_accessor :owner

    attr_accessor :billable_owner

    attr_accessor :repository

    attr_accessor :machine

    # Path to devcontainer.json from repo root used to create Codespace.
    attr_accessor :devcontainer_path

    # Whether the codespace was created from a prebuild.
    attr_accessor :prebuild

    attr_accessor :created_at

    attr_accessor :updated_at

    # Last known time this codespace was started.
    attr_accessor :last_used_at

    # State of this codespace.
    attr_accessor :state

    # API URL for this codespace.
    attr_accessor :url

    attr_accessor :git_status

    # The Azure region where this codespace is located.
    attr_accessor :location

    # The number of minutes of inactivity after which this codespace will be automatically stopped.
    attr_accessor :idle_timeout_minutes

    # URL to access this codespace on the web.
    attr_accessor :web_url

    # API URL to access available alternate machine types for this codespace.
    attr_accessor :machines_url

    # API URL to start this codespace.
    attr_accessor :start_url

    # API URL to stop this codespace.
    attr_accessor :stop_url

    # API URL for the Pull Request associated with this codespace, if any.
    attr_accessor :pulls_url

    attr_accessor :recent_folders

    attr_accessor :runtime_constraints

    # Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
    attr_accessor :pending_operation

    # Text to show user when codespace is disabled by a pending operation
    attr_accessor :pending_operation_disabled_reason

    # Text to show user when codespace idle timeout minutes has been overriden by an organization policy
    attr_accessor :idle_timeout_notice

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'display_name' => :'display_name',
        :'environment_id' => :'environment_id',
        :'owner' => :'owner',
        :'billable_owner' => :'billable_owner',
        :'repository' => :'repository',
        :'machine' => :'machine',
        :'devcontainer_path' => :'devcontainer_path',
        :'prebuild' => :'prebuild',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'last_used_at' => :'last_used_at',
        :'state' => :'state',
        :'url' => :'url',
        :'git_status' => :'git_status',
        :'location' => :'location',
        :'idle_timeout_minutes' => :'idle_timeout_minutes',
        :'web_url' => :'web_url',
        :'machines_url' => :'machines_url',
        :'start_url' => :'start_url',
        :'stop_url' => :'stop_url',
        :'pulls_url' => :'pulls_url',
        :'recent_folders' => :'recent_folders',
        :'runtime_constraints' => :'runtime_constraints',
        :'pending_operation' => :'pending_operation',
        :'pending_operation_disabled_reason' => :'pending_operation_disabled_reason',
        :'idle_timeout_notice' => :'idle_timeout_notice'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'display_name' => :'String',
        :'environment_id' => :'String',
        :'owner' => :'SimpleUser1',
        :'billable_owner' => :'SimpleUser1',
        :'repository' => :'MinimalRepository',
        :'machine' => :'CodespaceMachine',
        :'devcontainer_path' => :'String',
        :'prebuild' => :'Boolean',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'last_used_at' => :'Time',
        :'state' => :'String',
        :'url' => :'String',
        :'git_status' => :'CodespaceGitStatus',
        :'location' => :'String',
        :'idle_timeout_minutes' => :'Integer',
        :'web_url' => :'String',
        :'machines_url' => :'String',
        :'start_url' => :'String',
        :'stop_url' => :'String',
        :'pulls_url' => :'String',
        :'recent_folders' => :'Array<String>',
        :'runtime_constraints' => :'CodespaceRuntimeConstraints',
        :'pending_operation' => :'Boolean',
        :'pending_operation_disabled_reason' => :'String',
        :'idle_timeout_notice' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'display_name',
        :'environment_id',
        :'machine',
        :'devcontainer_path',
        :'prebuild',
        :'idle_timeout_minutes',
        :'pulls_url',
        :'pending_operation',
        :'pending_operation_disabled_reason',
        :'idle_timeout_notice'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Codespace` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Codespace`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'environment_id')
        self.environment_id = attributes[:'environment_id']
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.key?(:'billable_owner')
        self.billable_owner = attributes[:'billable_owner']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'machine')
        self.machine = attributes[:'machine']
      end

      if attributes.key?(:'devcontainer_path')
        self.devcontainer_path = attributes[:'devcontainer_path']
      end

      if attributes.key?(:'prebuild')
        self.prebuild = attributes[:'prebuild']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'last_used_at')
        self.last_used_at = attributes[:'last_used_at']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'git_status')
        self.git_status = attributes[:'git_status']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'idle_timeout_minutes')
        self.idle_timeout_minutes = attributes[:'idle_timeout_minutes']
      end

      if attributes.key?(:'web_url')
        self.web_url = attributes[:'web_url']
      end

      if attributes.key?(:'machines_url')
        self.machines_url = attributes[:'machines_url']
      end

      if attributes.key?(:'start_url')
        self.start_url = attributes[:'start_url']
      end

      if attributes.key?(:'stop_url')
        self.stop_url = attributes[:'stop_url']
      end

      if attributes.key?(:'pulls_url')
        self.pulls_url = attributes[:'pulls_url']
      end

      if attributes.key?(:'recent_folders')
        if (value = attributes[:'recent_folders']).is_a?(Array)
          self.recent_folders = value
        end
      end

      if attributes.key?(:'runtime_constraints')
        self.runtime_constraints = attributes[:'runtime_constraints']
      end

      if attributes.key?(:'pending_operation')
        self.pending_operation = attributes[:'pending_operation']
      end

      if attributes.key?(:'pending_operation_disabled_reason')
        self.pending_operation_disabled_reason = attributes[:'pending_operation_disabled_reason']
      end

      if attributes.key?(:'idle_timeout_notice')
        self.idle_timeout_notice = attributes[:'idle_timeout_notice']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @owner.nil?
        invalid_properties.push('invalid value for "owner", owner cannot be nil.')
      end

      if @billable_owner.nil?
        invalid_properties.push('invalid value for "billable_owner", billable_owner cannot be nil.')
      end

      if @repository.nil?
        invalid_properties.push('invalid value for "repository", repository cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @last_used_at.nil?
        invalid_properties.push('invalid value for "last_used_at", last_used_at cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @git_status.nil?
        invalid_properties.push('invalid value for "git_status", git_status cannot be nil.')
      end

      if @location.nil?
        invalid_properties.push('invalid value for "location", location cannot be nil.')
      end

      if @web_url.nil?
        invalid_properties.push('invalid value for "web_url", web_url cannot be nil.')
      end

      if @machines_url.nil?
        invalid_properties.push('invalid value for "machines_url", machines_url cannot be nil.')
      end

      if @start_url.nil?
        invalid_properties.push('invalid value for "start_url", start_url cannot be nil.')
      end

      if @stop_url.nil?
        invalid_properties.push('invalid value for "stop_url", stop_url cannot be nil.')
      end

      if @recent_folders.nil?
        invalid_properties.push('invalid value for "recent_folders", recent_folders cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @owner.nil?
      return false if @billable_owner.nil?
      return false if @repository.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @last_used_at.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["Unknown", "Created", "Queued", "Provisioning", "Available", "Awaiting", "Unavailable", "Deleted", "Moved", "Shutdown", "Archived", "Starting", "ShuttingDown", "Failed", "Exporting", "Updating", "Rebuilding"])
      return false unless state_validator.valid?(@state)
      return false if @url.nil?
      return false if @git_status.nil?
      return false if @location.nil?
      location_validator = EnumAttributeValidator.new('String', ["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"])
      return false unless location_validator.valid?(@location)
      return false if @web_url.nil?
      return false if @machines_url.nil?
      return false if @start_url.nil?
      return false if @stop_url.nil?
      return false if @recent_folders.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["Unknown", "Created", "Queued", "Provisioning", "Available", "Awaiting", "Unavailable", "Deleted", "Moved", "Shutdown", "Archived", "Starting", "ShuttingDown", "Failed", "Exporting", "Updating", "Rebuilding"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(location)
      validator = EnumAttributeValidator.new('String', ["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"])
      unless validator.valid?(location)
        fail ArgumentError, "invalid value for \"location\", must be one of #{validator.allowable_values}."
      end
      @location = location
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          display_name == o.display_name &&
          environment_id == o.environment_id &&
          owner == o.owner &&
          billable_owner == o.billable_owner &&
          repository == o.repository &&
          machine == o.machine &&
          devcontainer_path == o.devcontainer_path &&
          prebuild == o.prebuild &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          last_used_at == o.last_used_at &&
          state == o.state &&
          url == o.url &&
          git_status == o.git_status &&
          location == o.location &&
          idle_timeout_minutes == o.idle_timeout_minutes &&
          web_url == o.web_url &&
          machines_url == o.machines_url &&
          start_url == o.start_url &&
          stop_url == o.stop_url &&
          pulls_url == o.pulls_url &&
          recent_folders == o.recent_folders &&
          runtime_constraints == o.runtime_constraints &&
          pending_operation == o.pending_operation &&
          pending_operation_disabled_reason == o.pending_operation_disabled_reason &&
          idle_timeout_notice == o.idle_timeout_notice
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, display_name, environment_id, owner, billable_owner, repository, machine, devcontainer_path, prebuild, created_at, updated_at, last_used_at, state, url, git_status, location, idle_timeout_minutes, web_url, machines_url, start_url, stop_url, pulls_url, recent_folders, runtime_constraints, pending_operation, pending_operation_disabled_reason, idle_timeout_notice].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
