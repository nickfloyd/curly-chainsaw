=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  # Organization Full
  class OrganizationFull
    attr_accessor :login

    attr_accessor :id

    attr_accessor :node_id

    attr_accessor :url

    attr_accessor :repos_url

    attr_accessor :events_url

    attr_accessor :hooks_url

    attr_accessor :issues_url

    attr_accessor :members_url

    attr_accessor :public_members_url

    attr_accessor :avatar_url

    attr_accessor :description

    attr_accessor :name

    attr_accessor :company

    attr_accessor :blog

    attr_accessor :location

    attr_accessor :email

    attr_accessor :twitter_username

    attr_accessor :is_verified

    attr_accessor :has_organization_projects

    attr_accessor :has_repository_projects

    attr_accessor :public_repos

    attr_accessor :public_gists

    attr_accessor :followers

    attr_accessor :following

    attr_accessor :html_url

    attr_accessor :created_at

    attr_accessor :type

    attr_accessor :total_private_repos

    attr_accessor :owned_private_repos

    attr_accessor :private_gists

    attr_accessor :disk_usage

    attr_accessor :collaborators

    attr_accessor :billing_email

    attr_accessor :plan

    attr_accessor :default_repository_permission

    attr_accessor :members_can_create_repositories

    attr_accessor :two_factor_requirement_enabled

    attr_accessor :members_allowed_repository_creation_type

    attr_accessor :members_can_create_public_repositories

    attr_accessor :members_can_create_private_repositories

    attr_accessor :members_can_create_internal_repositories

    attr_accessor :members_can_create_pages

    attr_accessor :members_can_create_public_pages

    attr_accessor :members_can_create_private_pages

    attr_accessor :members_can_fork_private_repositories

    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'login' => :'login',
        :'id' => :'id',
        :'node_id' => :'node_id',
        :'url' => :'url',
        :'repos_url' => :'repos_url',
        :'events_url' => :'events_url',
        :'hooks_url' => :'hooks_url',
        :'issues_url' => :'issues_url',
        :'members_url' => :'members_url',
        :'public_members_url' => :'public_members_url',
        :'avatar_url' => :'avatar_url',
        :'description' => :'description',
        :'name' => :'name',
        :'company' => :'company',
        :'blog' => :'blog',
        :'location' => :'location',
        :'email' => :'email',
        :'twitter_username' => :'twitter_username',
        :'is_verified' => :'is_verified',
        :'has_organization_projects' => :'has_organization_projects',
        :'has_repository_projects' => :'has_repository_projects',
        :'public_repos' => :'public_repos',
        :'public_gists' => :'public_gists',
        :'followers' => :'followers',
        :'following' => :'following',
        :'html_url' => :'html_url',
        :'created_at' => :'created_at',
        :'type' => :'type',
        :'total_private_repos' => :'total_private_repos',
        :'owned_private_repos' => :'owned_private_repos',
        :'private_gists' => :'private_gists',
        :'disk_usage' => :'disk_usage',
        :'collaborators' => :'collaborators',
        :'billing_email' => :'billing_email',
        :'plan' => :'plan',
        :'default_repository_permission' => :'default_repository_permission',
        :'members_can_create_repositories' => :'members_can_create_repositories',
        :'two_factor_requirement_enabled' => :'two_factor_requirement_enabled',
        :'members_allowed_repository_creation_type' => :'members_allowed_repository_creation_type',
        :'members_can_create_public_repositories' => :'members_can_create_public_repositories',
        :'members_can_create_private_repositories' => :'members_can_create_private_repositories',
        :'members_can_create_internal_repositories' => :'members_can_create_internal_repositories',
        :'members_can_create_pages' => :'members_can_create_pages',
        :'members_can_create_public_pages' => :'members_can_create_public_pages',
        :'members_can_create_private_pages' => :'members_can_create_private_pages',
        :'members_can_fork_private_repositories' => :'members_can_fork_private_repositories',
        :'updated_at' => :'updated_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'login' => :'String',
        :'id' => :'Integer',
        :'node_id' => :'String',
        :'url' => :'String',
        :'repos_url' => :'String',
        :'events_url' => :'String',
        :'hooks_url' => :'String',
        :'issues_url' => :'String',
        :'members_url' => :'String',
        :'public_members_url' => :'String',
        :'avatar_url' => :'String',
        :'description' => :'String',
        :'name' => :'String',
        :'company' => :'String',
        :'blog' => :'String',
        :'location' => :'String',
        :'email' => :'String',
        :'twitter_username' => :'String',
        :'is_verified' => :'Boolean',
        :'has_organization_projects' => :'Boolean',
        :'has_repository_projects' => :'Boolean',
        :'public_repos' => :'Integer',
        :'public_gists' => :'Integer',
        :'followers' => :'Integer',
        :'following' => :'Integer',
        :'html_url' => :'String',
        :'created_at' => :'Time',
        :'type' => :'String',
        :'total_private_repos' => :'Integer',
        :'owned_private_repos' => :'Integer',
        :'private_gists' => :'Integer',
        :'disk_usage' => :'Integer',
        :'collaborators' => :'Integer',
        :'billing_email' => :'String',
        :'plan' => :'OrganizationFullPlan',
        :'default_repository_permission' => :'String',
        :'members_can_create_repositories' => :'Boolean',
        :'two_factor_requirement_enabled' => :'Boolean',
        :'members_allowed_repository_creation_type' => :'String',
        :'members_can_create_public_repositories' => :'Boolean',
        :'members_can_create_private_repositories' => :'Boolean',
        :'members_can_create_internal_repositories' => :'Boolean',
        :'members_can_create_pages' => :'Boolean',
        :'members_can_create_public_pages' => :'Boolean',
        :'members_can_create_private_pages' => :'Boolean',
        :'members_can_fork_private_repositories' => :'Boolean',
        :'updated_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'twitter_username',
        :'private_gists',
        :'disk_usage',
        :'collaborators',
        :'billing_email',
        :'default_repository_permission',
        :'members_can_create_repositories',
        :'two_factor_requirement_enabled',
        :'members_can_fork_private_repositories',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrganizationFull` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrganizationFull`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'login')
        self.login = attributes[:'login']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'repos_url')
        self.repos_url = attributes[:'repos_url']
      end

      if attributes.key?(:'events_url')
        self.events_url = attributes[:'events_url']
      end

      if attributes.key?(:'hooks_url')
        self.hooks_url = attributes[:'hooks_url']
      end

      if attributes.key?(:'issues_url')
        self.issues_url = attributes[:'issues_url']
      end

      if attributes.key?(:'members_url')
        self.members_url = attributes[:'members_url']
      end

      if attributes.key?(:'public_members_url')
        self.public_members_url = attributes[:'public_members_url']
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'blog')
        self.blog = attributes[:'blog']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'twitter_username')
        self.twitter_username = attributes[:'twitter_username']
      end

      if attributes.key?(:'is_verified')
        self.is_verified = attributes[:'is_verified']
      end

      if attributes.key?(:'has_organization_projects')
        self.has_organization_projects = attributes[:'has_organization_projects']
      end

      if attributes.key?(:'has_repository_projects')
        self.has_repository_projects = attributes[:'has_repository_projects']
      end

      if attributes.key?(:'public_repos')
        self.public_repos = attributes[:'public_repos']
      end

      if attributes.key?(:'public_gists')
        self.public_gists = attributes[:'public_gists']
      end

      if attributes.key?(:'followers')
        self.followers = attributes[:'followers']
      end

      if attributes.key?(:'following')
        self.following = attributes[:'following']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'total_private_repos')
        self.total_private_repos = attributes[:'total_private_repos']
      end

      if attributes.key?(:'owned_private_repos')
        self.owned_private_repos = attributes[:'owned_private_repos']
      end

      if attributes.key?(:'private_gists')
        self.private_gists = attributes[:'private_gists']
      end

      if attributes.key?(:'disk_usage')
        self.disk_usage = attributes[:'disk_usage']
      end

      if attributes.key?(:'collaborators')
        self.collaborators = attributes[:'collaborators']
      end

      if attributes.key?(:'billing_email')
        self.billing_email = attributes[:'billing_email']
      end

      if attributes.key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.key?(:'default_repository_permission')
        self.default_repository_permission = attributes[:'default_repository_permission']
      end

      if attributes.key?(:'members_can_create_repositories')
        self.members_can_create_repositories = attributes[:'members_can_create_repositories']
      end

      if attributes.key?(:'two_factor_requirement_enabled')
        self.two_factor_requirement_enabled = attributes[:'two_factor_requirement_enabled']
      end

      if attributes.key?(:'members_allowed_repository_creation_type')
        self.members_allowed_repository_creation_type = attributes[:'members_allowed_repository_creation_type']
      end

      if attributes.key?(:'members_can_create_public_repositories')
        self.members_can_create_public_repositories = attributes[:'members_can_create_public_repositories']
      end

      if attributes.key?(:'members_can_create_private_repositories')
        self.members_can_create_private_repositories = attributes[:'members_can_create_private_repositories']
      end

      if attributes.key?(:'members_can_create_internal_repositories')
        self.members_can_create_internal_repositories = attributes[:'members_can_create_internal_repositories']
      end

      if attributes.key?(:'members_can_create_pages')
        self.members_can_create_pages = attributes[:'members_can_create_pages']
      end

      if attributes.key?(:'members_can_create_public_pages')
        self.members_can_create_public_pages = attributes[:'members_can_create_public_pages']
      end

      if attributes.key?(:'members_can_create_private_pages')
        self.members_can_create_private_pages = attributes[:'members_can_create_private_pages']
      end

      if attributes.key?(:'members_can_fork_private_repositories')
        self.members_can_fork_private_repositories = attributes[:'members_can_fork_private_repositories']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @login.nil?
        invalid_properties.push('invalid value for "login", login cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @node_id.nil?
        invalid_properties.push('invalid value for "node_id", node_id cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @repos_url.nil?
        invalid_properties.push('invalid value for "repos_url", repos_url cannot be nil.')
      end

      if @events_url.nil?
        invalid_properties.push('invalid value for "events_url", events_url cannot be nil.')
      end

      if @hooks_url.nil?
        invalid_properties.push('invalid value for "hooks_url", hooks_url cannot be nil.')
      end

      if @issues_url.nil?
        invalid_properties.push('invalid value for "issues_url", issues_url cannot be nil.')
      end

      if @members_url.nil?
        invalid_properties.push('invalid value for "members_url", members_url cannot be nil.')
      end

      if @public_members_url.nil?
        invalid_properties.push('invalid value for "public_members_url", public_members_url cannot be nil.')
      end

      if @avatar_url.nil?
        invalid_properties.push('invalid value for "avatar_url", avatar_url cannot be nil.')
      end

      if @has_organization_projects.nil?
        invalid_properties.push('invalid value for "has_organization_projects", has_organization_projects cannot be nil.')
      end

      if @has_repository_projects.nil?
        invalid_properties.push('invalid value for "has_repository_projects", has_repository_projects cannot be nil.')
      end

      if @public_repos.nil?
        invalid_properties.push('invalid value for "public_repos", public_repos cannot be nil.')
      end

      if @public_gists.nil?
        invalid_properties.push('invalid value for "public_gists", public_gists cannot be nil.')
      end

      if @followers.nil?
        invalid_properties.push('invalid value for "followers", followers cannot be nil.')
      end

      if @following.nil?
        invalid_properties.push('invalid value for "following", following cannot be nil.')
      end

      if @html_url.nil?
        invalid_properties.push('invalid value for "html_url", html_url cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @login.nil?
      return false if @id.nil?
      return false if @node_id.nil?
      return false if @url.nil?
      return false if @repos_url.nil?
      return false if @events_url.nil?
      return false if @hooks_url.nil?
      return false if @issues_url.nil?
      return false if @members_url.nil?
      return false if @public_members_url.nil?
      return false if @avatar_url.nil?
      return false if @has_organization_projects.nil?
      return false if @has_repository_projects.nil?
      return false if @public_repos.nil?
      return false if @public_gists.nil?
      return false if @followers.nil?
      return false if @following.nil?
      return false if @html_url.nil?
      return false if @created_at.nil?
      return false if @type.nil?
      return false if @updated_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          login == o.login &&
          id == o.id &&
          node_id == o.node_id &&
          url == o.url &&
          repos_url == o.repos_url &&
          events_url == o.events_url &&
          hooks_url == o.hooks_url &&
          issues_url == o.issues_url &&
          members_url == o.members_url &&
          public_members_url == o.public_members_url &&
          avatar_url == o.avatar_url &&
          description == o.description &&
          name == o.name &&
          company == o.company &&
          blog == o.blog &&
          location == o.location &&
          email == o.email &&
          twitter_username == o.twitter_username &&
          is_verified == o.is_verified &&
          has_organization_projects == o.has_organization_projects &&
          has_repository_projects == o.has_repository_projects &&
          public_repos == o.public_repos &&
          public_gists == o.public_gists &&
          followers == o.followers &&
          following == o.following &&
          html_url == o.html_url &&
          created_at == o.created_at &&
          type == o.type &&
          total_private_repos == o.total_private_repos &&
          owned_private_repos == o.owned_private_repos &&
          private_gists == o.private_gists &&
          disk_usage == o.disk_usage &&
          collaborators == o.collaborators &&
          billing_email == o.billing_email &&
          plan == o.plan &&
          default_repository_permission == o.default_repository_permission &&
          members_can_create_repositories == o.members_can_create_repositories &&
          two_factor_requirement_enabled == o.two_factor_requirement_enabled &&
          members_allowed_repository_creation_type == o.members_allowed_repository_creation_type &&
          members_can_create_public_repositories == o.members_can_create_public_repositories &&
          members_can_create_private_repositories == o.members_can_create_private_repositories &&
          members_can_create_internal_repositories == o.members_can_create_internal_repositories &&
          members_can_create_pages == o.members_can_create_pages &&
          members_can_create_public_pages == o.members_can_create_public_pages &&
          members_can_create_private_pages == o.members_can_create_private_pages &&
          members_can_fork_private_repositories == o.members_can_fork_private_repositories &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [login, id, node_id, url, repos_url, events_url, hooks_url, issues_url, members_url, public_members_url, avatar_url, description, name, company, blog, location, email, twitter_username, is_verified, has_organization_projects, has_repository_projects, public_repos, public_gists, followers, following, html_url, created_at, type, total_private_repos, owned_private_repos, private_gists, disk_usage, collaborators, billing_email, plan, default_repository_permission, members_can_create_repositories, two_factor_requirement_enabled, members_allowed_repository_creation_type, members_can_create_public_repositories, members_can_create_private_repositories, members_can_create_internal_repositories, members_can_create_pages, members_can_create_public_pages, members_can_create_private_pages, members_can_fork_private_repositories, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
