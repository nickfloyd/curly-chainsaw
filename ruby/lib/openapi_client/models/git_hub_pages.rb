=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  # The configuration for GitHub Pages for a repository.
  class GitHubPages
    # The API address for accessing this Page resource.
    attr_accessor :url

    # The status of the most recent build of the Page.
    attr_accessor :status

    # The Pages site's custom domain
    attr_accessor :cname

    # The state if the domain is verified
    attr_accessor :protected_domain_state

    # The timestamp when a pending domain becomes unverified.
    attr_accessor :pending_domain_unverified_at

    # Whether the Page has a custom 404 page.
    attr_accessor :custom_404

    # The web address the Page can be accessed from.
    attr_accessor :html_url

    # The process in which the Page will be built.
    attr_accessor :build_type

    attr_accessor :source

    # Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
    attr_accessor :public

    attr_accessor :https_certificate

    # Whether https is enabled on the domain
    attr_accessor :https_enforced

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'url',
        :'status' => :'status',
        :'cname' => :'cname',
        :'protected_domain_state' => :'protected_domain_state',
        :'pending_domain_unverified_at' => :'pending_domain_unverified_at',
        :'custom_404' => :'custom_404',
        :'html_url' => :'html_url',
        :'build_type' => :'build_type',
        :'source' => :'source',
        :'public' => :'public',
        :'https_certificate' => :'https_certificate',
        :'https_enforced' => :'https_enforced'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'url' => :'String',
        :'status' => :'String',
        :'cname' => :'String',
        :'protected_domain_state' => :'String',
        :'pending_domain_unverified_at' => :'Time',
        :'custom_404' => :'Boolean',
        :'html_url' => :'String',
        :'build_type' => :'String',
        :'source' => :'PagesSourceHash',
        :'public' => :'Boolean',
        :'https_certificate' => :'PagesHttpsCertificate',
        :'https_enforced' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'status',
        :'cname',
        :'protected_domain_state',
        :'pending_domain_unverified_at',
        :'build_type',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GitHubPages` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GitHubPages`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'cname')
        self.cname = attributes[:'cname']
      end

      if attributes.key?(:'protected_domain_state')
        self.protected_domain_state = attributes[:'protected_domain_state']
      end

      if attributes.key?(:'pending_domain_unverified_at')
        self.pending_domain_unverified_at = attributes[:'pending_domain_unverified_at']
      end

      if attributes.key?(:'custom_404')
        self.custom_404 = attributes[:'custom_404']
      else
        self.custom_404 = false
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'build_type')
        self.build_type = attributes[:'build_type']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'public')
        self.public = attributes[:'public']
      end

      if attributes.key?(:'https_certificate')
        self.https_certificate = attributes[:'https_certificate']
      end

      if attributes.key?(:'https_enforced')
        self.https_enforced = attributes[:'https_enforced']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @custom_404.nil?
        invalid_properties.push('invalid value for "custom_404", custom_404 cannot be nil.')
      end

      if @public.nil?
        invalid_properties.push('invalid value for "public", public cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @url.nil?
      status_validator = EnumAttributeValidator.new('String', ["built", "building", "errored"])
      return false unless status_validator.valid?(@status)
      protected_domain_state_validator = EnumAttributeValidator.new('String', ["pending", "verified", "unverified"])
      return false unless protected_domain_state_validator.valid?(@protected_domain_state)
      return false if @custom_404.nil?
      build_type_validator = EnumAttributeValidator.new('String', ["legacy", "workflow"])
      return false unless build_type_validator.valid?(@build_type)
      return false if @public.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["built", "building", "errored"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protected_domain_state Object to be assigned
    def protected_domain_state=(protected_domain_state)
      validator = EnumAttributeValidator.new('String', ["pending", "verified", "unverified"])
      unless validator.valid?(protected_domain_state)
        fail ArgumentError, "invalid value for \"protected_domain_state\", must be one of #{validator.allowable_values}."
      end
      @protected_domain_state = protected_domain_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] build_type Object to be assigned
    def build_type=(build_type)
      validator = EnumAttributeValidator.new('String', ["legacy", "workflow"])
      unless validator.valid?(build_type)
        fail ArgumentError, "invalid value for \"build_type\", must be one of #{validator.allowable_values}."
      end
      @build_type = build_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          status == o.status &&
          cname == o.cname &&
          protected_domain_state == o.protected_domain_state &&
          pending_domain_unverified_at == o.pending_domain_unverified_at &&
          custom_404 == o.custom_404 &&
          html_url == o.html_url &&
          build_type == o.build_type &&
          source == o.source &&
          public == o.public &&
          https_certificate == o.https_certificate &&
          https_enforced == o.https_enforced
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, status, cname, protected_domain_state, pending_domain_unverified_at, custom_404, html_url, build_type, source, public, https_certificate, https_enforced].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
