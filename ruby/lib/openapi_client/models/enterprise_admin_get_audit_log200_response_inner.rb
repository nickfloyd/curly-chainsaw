=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class EnterpriseAdminGetAuditLog200ResponseInner
    # The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
    attr_accessor :timestamp

    # The name of the action that was performed, for example `user.login` or `repo.create`.
    attr_accessor :action

    attr_accessor :active

    attr_accessor :active_was

    # The actor who performed the action.
    attr_accessor :actor

    # The id of the actor who performed the action.
    attr_accessor :actor_id

    attr_accessor :actor_location

    attr_accessor :data

    attr_accessor :org_id

    # The username of the account being blocked.
    attr_accessor :blocked_user

    attr_accessor :business

    attr_accessor :config

    attr_accessor :config_was

    attr_accessor :content_type

    # The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
    attr_accessor :created_at

    attr_accessor :deploy_key_fingerprint

    # A unique identifier for an audit event.
    attr_accessor :_document_id

    attr_accessor :emoji

    attr_accessor :events

    attr_accessor :events_were

    attr_accessor :explanation

    attr_accessor :fingerprint

    attr_accessor :hook_id

    attr_accessor :limited_availability

    attr_accessor :message

    attr_accessor :name

    attr_accessor :old_user

    attr_accessor :openssh_public_key

    attr_accessor :org

    attr_accessor :previous_visibility

    attr_accessor :read_only

    # The name of the repository.
    attr_accessor :repo

    # The name of the repository.
    attr_accessor :repository

    attr_accessor :repository_public

    attr_accessor :target_login

    attr_accessor :team

    # The type of protocol (for example, HTTP or SSH) used to transfer Git data.
    attr_accessor :transport_protocol

    # A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
    attr_accessor :transport_protocol_name

    # The user that was affected by the action performed (if available).
    attr_accessor :user

    # The repository visibility, for example `public` or `private`.
    attr_accessor :visibility

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timestamp' => :'@timestamp',
        :'action' => :'action',
        :'active' => :'active',
        :'active_was' => :'active_was',
        :'actor' => :'actor',
        :'actor_id' => :'actor_id',
        :'actor_location' => :'actor_location',
        :'data' => :'data',
        :'org_id' => :'org_id',
        :'blocked_user' => :'blocked_user',
        :'business' => :'business',
        :'config' => :'config',
        :'config_was' => :'config_was',
        :'content_type' => :'content_type',
        :'created_at' => :'created_at',
        :'deploy_key_fingerprint' => :'deploy_key_fingerprint',
        :'_document_id' => :'_document_id',
        :'emoji' => :'emoji',
        :'events' => :'events',
        :'events_were' => :'events_were',
        :'explanation' => :'explanation',
        :'fingerprint' => :'fingerprint',
        :'hook_id' => :'hook_id',
        :'limited_availability' => :'limited_availability',
        :'message' => :'message',
        :'name' => :'name',
        :'old_user' => :'old_user',
        :'openssh_public_key' => :'openssh_public_key',
        :'org' => :'org',
        :'previous_visibility' => :'previous_visibility',
        :'read_only' => :'read_only',
        :'repo' => :'repo',
        :'repository' => :'repository',
        :'repository_public' => :'repository_public',
        :'target_login' => :'target_login',
        :'team' => :'team',
        :'transport_protocol' => :'transport_protocol',
        :'transport_protocol_name' => :'transport_protocol_name',
        :'user' => :'user',
        :'visibility' => :'visibility'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'timestamp' => :'Integer',
        :'action' => :'String',
        :'active' => :'Boolean',
        :'active_was' => :'Boolean',
        :'actor' => :'String',
        :'actor_id' => :'Integer',
        :'actor_location' => :'EnterpriseAdminGetAuditLog200ResponseInnerActorLocation',
        :'data' => :'Hash<String, Object>',
        :'org_id' => :'Integer',
        :'blocked_user' => :'String',
        :'business' => :'String',
        :'config' => :'Array<Object>',
        :'config_was' => :'Array<Object>',
        :'content_type' => :'String',
        :'created_at' => :'Integer',
        :'deploy_key_fingerprint' => :'String',
        :'_document_id' => :'String',
        :'emoji' => :'String',
        :'events' => :'Array<Object>',
        :'events_were' => :'Array<Object>',
        :'explanation' => :'String',
        :'fingerprint' => :'String',
        :'hook_id' => :'Integer',
        :'limited_availability' => :'Boolean',
        :'message' => :'String',
        :'name' => :'String',
        :'old_user' => :'String',
        :'openssh_public_key' => :'String',
        :'org' => :'String',
        :'previous_visibility' => :'String',
        :'read_only' => :'Boolean',
        :'repo' => :'String',
        :'repository' => :'String',
        :'repository_public' => :'Boolean',
        :'target_login' => :'String',
        :'team' => :'String',
        :'transport_protocol' => :'Integer',
        :'transport_protocol_name' => :'String',
        :'user' => :'String',
        :'visibility' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::EnterpriseAdminGetAuditLog200ResponseInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::EnterpriseAdminGetAuditLog200ResponseInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'active_was')
        self.active_was = attributes[:'active_was']
      end

      if attributes.key?(:'actor')
        self.actor = attributes[:'actor']
      end

      if attributes.key?(:'actor_id')
        self.actor_id = attributes[:'actor_id']
      end

      if attributes.key?(:'actor_location')
        self.actor_location = attributes[:'actor_location']
      end

      if attributes.key?(:'data')
        if (value = attributes[:'data']).is_a?(Hash)
          self.data = value
        end
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'blocked_user')
        self.blocked_user = attributes[:'blocked_user']
      end

      if attributes.key?(:'business')
        self.business = attributes[:'business']
      end

      if attributes.key?(:'config')
        if (value = attributes[:'config']).is_a?(Array)
          self.config = value
        end
      end

      if attributes.key?(:'config_was')
        if (value = attributes[:'config_was']).is_a?(Array)
          self.config_was = value
        end
      end

      if attributes.key?(:'content_type')
        self.content_type = attributes[:'content_type']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'deploy_key_fingerprint')
        self.deploy_key_fingerprint = attributes[:'deploy_key_fingerprint']
      end

      if attributes.key?(:'_document_id')
        self._document_id = attributes[:'_document_id']
      end

      if attributes.key?(:'emoji')
        self.emoji = attributes[:'emoji']
      end

      if attributes.key?(:'events')
        if (value = attributes[:'events']).is_a?(Array)
          self.events = value
        end
      end

      if attributes.key?(:'events_were')
        if (value = attributes[:'events_were']).is_a?(Array)
          self.events_were = value
        end
      end

      if attributes.key?(:'explanation')
        self.explanation = attributes[:'explanation']
      end

      if attributes.key?(:'fingerprint')
        self.fingerprint = attributes[:'fingerprint']
      end

      if attributes.key?(:'hook_id')
        self.hook_id = attributes[:'hook_id']
      end

      if attributes.key?(:'limited_availability')
        self.limited_availability = attributes[:'limited_availability']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'old_user')
        self.old_user = attributes[:'old_user']
      end

      if attributes.key?(:'openssh_public_key')
        self.openssh_public_key = attributes[:'openssh_public_key']
      end

      if attributes.key?(:'org')
        self.org = attributes[:'org']
      end

      if attributes.key?(:'previous_visibility')
        self.previous_visibility = attributes[:'previous_visibility']
      end

      if attributes.key?(:'read_only')
        self.read_only = attributes[:'read_only']
      end

      if attributes.key?(:'repo')
        self.repo = attributes[:'repo']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'repository_public')
        self.repository_public = attributes[:'repository_public']
      end

      if attributes.key?(:'target_login')
        self.target_login = attributes[:'target_login']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'transport_protocol')
        self.transport_protocol = attributes[:'transport_protocol']
      end

      if attributes.key?(:'transport_protocol_name')
        self.transport_protocol_name = attributes[:'transport_protocol_name']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timestamp == o.timestamp &&
          action == o.action &&
          active == o.active &&
          active_was == o.active_was &&
          actor == o.actor &&
          actor_id == o.actor_id &&
          actor_location == o.actor_location &&
          data == o.data &&
          org_id == o.org_id &&
          blocked_user == o.blocked_user &&
          business == o.business &&
          config == o.config &&
          config_was == o.config_was &&
          content_type == o.content_type &&
          created_at == o.created_at &&
          deploy_key_fingerprint == o.deploy_key_fingerprint &&
          _document_id == o._document_id &&
          emoji == o.emoji &&
          events == o.events &&
          events_were == o.events_were &&
          explanation == o.explanation &&
          fingerprint == o.fingerprint &&
          hook_id == o.hook_id &&
          limited_availability == o.limited_availability &&
          message == o.message &&
          name == o.name &&
          old_user == o.old_user &&
          openssh_public_key == o.openssh_public_key &&
          org == o.org &&
          previous_visibility == o.previous_visibility &&
          read_only == o.read_only &&
          repo == o.repo &&
          repository == o.repository &&
          repository_public == o.repository_public &&
          target_login == o.target_login &&
          team == o.team &&
          transport_protocol == o.transport_protocol &&
          transport_protocol_name == o.transport_protocol_name &&
          user == o.user &&
          visibility == o.visibility
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [timestamp, action, active, active_was, actor, actor_id, actor_location, data, org_id, blocked_user, business, config, config_was, content_type, created_at, deploy_key_fingerprint, _document_id, emoji, events, events_were, explanation, fingerprint, hook_id, limited_availability, message, name, old_user, openssh_public_key, org, previous_visibility, read_only, repo, repository, repository_public, target_login, team, transport_protocol, transport_protocol_name, user, visibility].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
