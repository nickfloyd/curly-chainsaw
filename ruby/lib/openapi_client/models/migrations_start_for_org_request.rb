=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class MigrationsStartForOrgRequest
    # A list of arrays indicating which repositories should be migrated.
    attr_accessor :repositories

    # Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
    attr_accessor :lock_repositories

    # Indicates whether metadata should be excluded and only git source should be included for the migration.
    attr_accessor :exclude_metadata

    # Indicates whether the repository git data should be excluded from the migration.
    attr_accessor :exclude_git_data

    # Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
    attr_accessor :exclude_attachments

    # Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
    attr_accessor :exclude_releases

    # Indicates whether projects owned by the organization or users should be excluded. from the migration.
    attr_accessor :exclude_owner_projects

    # Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
    attr_accessor :org_metadata_only

    # Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\"repositories\"`.
    attr_accessor :exclude

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'repositories' => :'repositories',
        :'lock_repositories' => :'lock_repositories',
        :'exclude_metadata' => :'exclude_metadata',
        :'exclude_git_data' => :'exclude_git_data',
        :'exclude_attachments' => :'exclude_attachments',
        :'exclude_releases' => :'exclude_releases',
        :'exclude_owner_projects' => :'exclude_owner_projects',
        :'org_metadata_only' => :'org_metadata_only',
        :'exclude' => :'exclude'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'repositories' => :'Array<String>',
        :'lock_repositories' => :'Boolean',
        :'exclude_metadata' => :'Boolean',
        :'exclude_git_data' => :'Boolean',
        :'exclude_attachments' => :'Boolean',
        :'exclude_releases' => :'Boolean',
        :'exclude_owner_projects' => :'Boolean',
        :'org_metadata_only' => :'Boolean',
        :'exclude' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::MigrationsStartForOrgRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::MigrationsStartForOrgRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'repositories')
        if (value = attributes[:'repositories']).is_a?(Array)
          self.repositories = value
        end
      end

      if attributes.key?(:'lock_repositories')
        self.lock_repositories = attributes[:'lock_repositories']
      else
        self.lock_repositories = false
      end

      if attributes.key?(:'exclude_metadata')
        self.exclude_metadata = attributes[:'exclude_metadata']
      else
        self.exclude_metadata = false
      end

      if attributes.key?(:'exclude_git_data')
        self.exclude_git_data = attributes[:'exclude_git_data']
      else
        self.exclude_git_data = false
      end

      if attributes.key?(:'exclude_attachments')
        self.exclude_attachments = attributes[:'exclude_attachments']
      else
        self.exclude_attachments = false
      end

      if attributes.key?(:'exclude_releases')
        self.exclude_releases = attributes[:'exclude_releases']
      else
        self.exclude_releases = false
      end

      if attributes.key?(:'exclude_owner_projects')
        self.exclude_owner_projects = attributes[:'exclude_owner_projects']
      else
        self.exclude_owner_projects = false
      end

      if attributes.key?(:'org_metadata_only')
        self.org_metadata_only = attributes[:'org_metadata_only']
      else
        self.org_metadata_only = false
      end

      if attributes.key?(:'exclude')
        if (value = attributes[:'exclude']).is_a?(Array)
          self.exclude = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @repositories.nil?
        invalid_properties.push('invalid value for "repositories", repositories cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @repositories.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          repositories == o.repositories &&
          lock_repositories == o.lock_repositories &&
          exclude_metadata == o.exclude_metadata &&
          exclude_git_data == o.exclude_git_data &&
          exclude_attachments == o.exclude_attachments &&
          exclude_releases == o.exclude_releases &&
          exclude_owner_projects == o.exclude_owner_projects &&
          org_metadata_only == o.org_metadata_only &&
          exclude == o.exclude
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [repositories, lock_repositories, exclude_metadata, exclude_git_data, exclude_attachments, exclude_releases, exclude_owner_projects, org_metadata_only, exclude].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
