=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  # Simple Repository
  class SimpleRepository
    # A unique identifier of the repository.
    attr_accessor :id

    # The GraphQL identifier of the repository.
    attr_accessor :node_id

    # The name of the repository.
    attr_accessor :name

    # The full, globally unique, name of the repository.
    attr_accessor :full_name

    attr_accessor :owner

    # Whether the repository is private.
    attr_accessor :private

    # The URL to view the repository on GitHub.com.
    attr_accessor :html_url

    # The repository description.
    attr_accessor :description

    # Whether the repository is a fork.
    attr_accessor :fork

    # The URL to get more information about the repository from the GitHub API.
    attr_accessor :url

    # A template for the API URL to download the repository as an archive.
    attr_accessor :archive_url

    # A template for the API URL to list the available assignees for issues in the repository.
    attr_accessor :assignees_url

    # A template for the API URL to create or retrieve a raw Git blob in the repository.
    attr_accessor :blobs_url

    # A template for the API URL to get information about branches in the repository.
    attr_accessor :branches_url

    # A template for the API URL to get information about collaborators of the repository.
    attr_accessor :collaborators_url

    # A template for the API URL to get information about comments on the repository.
    attr_accessor :comments_url

    # A template for the API URL to get information about commits on the repository.
    attr_accessor :commits_url

    # A template for the API URL to compare two commits or refs.
    attr_accessor :compare_url

    # A template for the API URL to get the contents of the repository.
    attr_accessor :contents_url

    # A template for the API URL to list the contributors to the repository.
    attr_accessor :contributors_url

    # The API URL to list the deployments of the repository.
    attr_accessor :deployments_url

    # The API URL to list the downloads on the repository.
    attr_accessor :downloads_url

    # The API URL to list the events of the repository.
    attr_accessor :events_url

    # The API URL to list the forks of the repository.
    attr_accessor :forks_url

    # A template for the API URL to get information about Git commits of the repository.
    attr_accessor :git_commits_url

    # A template for the API URL to get information about Git refs of the repository.
    attr_accessor :git_refs_url

    # A template for the API URL to get information about Git tags of the repository.
    attr_accessor :git_tags_url

    # A template for the API URL to get information about issue comments on the repository.
    attr_accessor :issue_comment_url

    # A template for the API URL to get information about issue events on the repository.
    attr_accessor :issue_events_url

    # A template for the API URL to get information about issues on the repository.
    attr_accessor :issues_url

    # A template for the API URL to get information about deploy keys on the repository.
    attr_accessor :keys_url

    # A template for the API URL to get information about labels of the repository.
    attr_accessor :labels_url

    # The API URL to get information about the languages of the repository.
    attr_accessor :languages_url

    # The API URL to merge branches in the repository.
    attr_accessor :merges_url

    # A template for the API URL to get information about milestones of the repository.
    attr_accessor :milestones_url

    # A template for the API URL to get information about notifications on the repository.
    attr_accessor :notifications_url

    # A template for the API URL to get information about pull requests on the repository.
    attr_accessor :pulls_url

    # A template for the API URL to get information about releases on the repository.
    attr_accessor :releases_url

    # The API URL to list the stargazers on the repository.
    attr_accessor :stargazers_url

    # A template for the API URL to get information about statuses of a commit.
    attr_accessor :statuses_url

    # The API URL to list the subscribers on the repository.
    attr_accessor :subscribers_url

    # The API URL to subscribe to notifications for this repository.
    attr_accessor :subscription_url

    # The API URL to get information about tags on the repository.
    attr_accessor :tags_url

    # The API URL to list the teams on the repository.
    attr_accessor :teams_url

    # A template for the API URL to create or retrieve a raw Git tree of the repository.
    attr_accessor :trees_url

    # The API URL to list the hooks on the repository.
    attr_accessor :hooks_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'node_id' => :'node_id',
        :'name' => :'name',
        :'full_name' => :'full_name',
        :'owner' => :'owner',
        :'private' => :'private',
        :'html_url' => :'html_url',
        :'description' => :'description',
        :'fork' => :'fork',
        :'url' => :'url',
        :'archive_url' => :'archive_url',
        :'assignees_url' => :'assignees_url',
        :'blobs_url' => :'blobs_url',
        :'branches_url' => :'branches_url',
        :'collaborators_url' => :'collaborators_url',
        :'comments_url' => :'comments_url',
        :'commits_url' => :'commits_url',
        :'compare_url' => :'compare_url',
        :'contents_url' => :'contents_url',
        :'contributors_url' => :'contributors_url',
        :'deployments_url' => :'deployments_url',
        :'downloads_url' => :'downloads_url',
        :'events_url' => :'events_url',
        :'forks_url' => :'forks_url',
        :'git_commits_url' => :'git_commits_url',
        :'git_refs_url' => :'git_refs_url',
        :'git_tags_url' => :'git_tags_url',
        :'issue_comment_url' => :'issue_comment_url',
        :'issue_events_url' => :'issue_events_url',
        :'issues_url' => :'issues_url',
        :'keys_url' => :'keys_url',
        :'labels_url' => :'labels_url',
        :'languages_url' => :'languages_url',
        :'merges_url' => :'merges_url',
        :'milestones_url' => :'milestones_url',
        :'notifications_url' => :'notifications_url',
        :'pulls_url' => :'pulls_url',
        :'releases_url' => :'releases_url',
        :'stargazers_url' => :'stargazers_url',
        :'statuses_url' => :'statuses_url',
        :'subscribers_url' => :'subscribers_url',
        :'subscription_url' => :'subscription_url',
        :'tags_url' => :'tags_url',
        :'teams_url' => :'teams_url',
        :'trees_url' => :'trees_url',
        :'hooks_url' => :'hooks_url'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'node_id' => :'String',
        :'name' => :'String',
        :'full_name' => :'String',
        :'owner' => :'SimpleUser1',
        :'private' => :'Boolean',
        :'html_url' => :'String',
        :'description' => :'String',
        :'fork' => :'Boolean',
        :'url' => :'String',
        :'archive_url' => :'String',
        :'assignees_url' => :'String',
        :'blobs_url' => :'String',
        :'branches_url' => :'String',
        :'collaborators_url' => :'String',
        :'comments_url' => :'String',
        :'commits_url' => :'String',
        :'compare_url' => :'String',
        :'contents_url' => :'String',
        :'contributors_url' => :'String',
        :'deployments_url' => :'String',
        :'downloads_url' => :'String',
        :'events_url' => :'String',
        :'forks_url' => :'String',
        :'git_commits_url' => :'String',
        :'git_refs_url' => :'String',
        :'git_tags_url' => :'String',
        :'issue_comment_url' => :'String',
        :'issue_events_url' => :'String',
        :'issues_url' => :'String',
        :'keys_url' => :'String',
        :'labels_url' => :'String',
        :'languages_url' => :'String',
        :'merges_url' => :'String',
        :'milestones_url' => :'String',
        :'notifications_url' => :'String',
        :'pulls_url' => :'String',
        :'releases_url' => :'String',
        :'stargazers_url' => :'String',
        :'statuses_url' => :'String',
        :'subscribers_url' => :'String',
        :'subscription_url' => :'String',
        :'tags_url' => :'String',
        :'teams_url' => :'String',
        :'trees_url' => :'String',
        :'hooks_url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SimpleRepository` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SimpleRepository`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'fork')
        self.fork = attributes[:'fork']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'archive_url')
        self.archive_url = attributes[:'archive_url']
      end

      if attributes.key?(:'assignees_url')
        self.assignees_url = attributes[:'assignees_url']
      end

      if attributes.key?(:'blobs_url')
        self.blobs_url = attributes[:'blobs_url']
      end

      if attributes.key?(:'branches_url')
        self.branches_url = attributes[:'branches_url']
      end

      if attributes.key?(:'collaborators_url')
        self.collaborators_url = attributes[:'collaborators_url']
      end

      if attributes.key?(:'comments_url')
        self.comments_url = attributes[:'comments_url']
      end

      if attributes.key?(:'commits_url')
        self.commits_url = attributes[:'commits_url']
      end

      if attributes.key?(:'compare_url')
        self.compare_url = attributes[:'compare_url']
      end

      if attributes.key?(:'contents_url')
        self.contents_url = attributes[:'contents_url']
      end

      if attributes.key?(:'contributors_url')
        self.contributors_url = attributes[:'contributors_url']
      end

      if attributes.key?(:'deployments_url')
        self.deployments_url = attributes[:'deployments_url']
      end

      if attributes.key?(:'downloads_url')
        self.downloads_url = attributes[:'downloads_url']
      end

      if attributes.key?(:'events_url')
        self.events_url = attributes[:'events_url']
      end

      if attributes.key?(:'forks_url')
        self.forks_url = attributes[:'forks_url']
      end

      if attributes.key?(:'git_commits_url')
        self.git_commits_url = attributes[:'git_commits_url']
      end

      if attributes.key?(:'git_refs_url')
        self.git_refs_url = attributes[:'git_refs_url']
      end

      if attributes.key?(:'git_tags_url')
        self.git_tags_url = attributes[:'git_tags_url']
      end

      if attributes.key?(:'issue_comment_url')
        self.issue_comment_url = attributes[:'issue_comment_url']
      end

      if attributes.key?(:'issue_events_url')
        self.issue_events_url = attributes[:'issue_events_url']
      end

      if attributes.key?(:'issues_url')
        self.issues_url = attributes[:'issues_url']
      end

      if attributes.key?(:'keys_url')
        self.keys_url = attributes[:'keys_url']
      end

      if attributes.key?(:'labels_url')
        self.labels_url = attributes[:'labels_url']
      end

      if attributes.key?(:'languages_url')
        self.languages_url = attributes[:'languages_url']
      end

      if attributes.key?(:'merges_url')
        self.merges_url = attributes[:'merges_url']
      end

      if attributes.key?(:'milestones_url')
        self.milestones_url = attributes[:'milestones_url']
      end

      if attributes.key?(:'notifications_url')
        self.notifications_url = attributes[:'notifications_url']
      end

      if attributes.key?(:'pulls_url')
        self.pulls_url = attributes[:'pulls_url']
      end

      if attributes.key?(:'releases_url')
        self.releases_url = attributes[:'releases_url']
      end

      if attributes.key?(:'stargazers_url')
        self.stargazers_url = attributes[:'stargazers_url']
      end

      if attributes.key?(:'statuses_url')
        self.statuses_url = attributes[:'statuses_url']
      end

      if attributes.key?(:'subscribers_url')
        self.subscribers_url = attributes[:'subscribers_url']
      end

      if attributes.key?(:'subscription_url')
        self.subscription_url = attributes[:'subscription_url']
      end

      if attributes.key?(:'tags_url')
        self.tags_url = attributes[:'tags_url']
      end

      if attributes.key?(:'teams_url')
        self.teams_url = attributes[:'teams_url']
      end

      if attributes.key?(:'trees_url')
        self.trees_url = attributes[:'trees_url']
      end

      if attributes.key?(:'hooks_url')
        self.hooks_url = attributes[:'hooks_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @node_id.nil?
        invalid_properties.push('invalid value for "node_id", node_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @full_name.nil?
        invalid_properties.push('invalid value for "full_name", full_name cannot be nil.')
      end

      if @owner.nil?
        invalid_properties.push('invalid value for "owner", owner cannot be nil.')
      end

      if @private.nil?
        invalid_properties.push('invalid value for "private", private cannot be nil.')
      end

      if @html_url.nil?
        invalid_properties.push('invalid value for "html_url", html_url cannot be nil.')
      end

      if @fork.nil?
        invalid_properties.push('invalid value for "fork", fork cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @archive_url.nil?
        invalid_properties.push('invalid value for "archive_url", archive_url cannot be nil.')
      end

      if @assignees_url.nil?
        invalid_properties.push('invalid value for "assignees_url", assignees_url cannot be nil.')
      end

      if @blobs_url.nil?
        invalid_properties.push('invalid value for "blobs_url", blobs_url cannot be nil.')
      end

      if @branches_url.nil?
        invalid_properties.push('invalid value for "branches_url", branches_url cannot be nil.')
      end

      if @collaborators_url.nil?
        invalid_properties.push('invalid value for "collaborators_url", collaborators_url cannot be nil.')
      end

      if @comments_url.nil?
        invalid_properties.push('invalid value for "comments_url", comments_url cannot be nil.')
      end

      if @commits_url.nil?
        invalid_properties.push('invalid value for "commits_url", commits_url cannot be nil.')
      end

      if @compare_url.nil?
        invalid_properties.push('invalid value for "compare_url", compare_url cannot be nil.')
      end

      if @contents_url.nil?
        invalid_properties.push('invalid value for "contents_url", contents_url cannot be nil.')
      end

      if @contributors_url.nil?
        invalid_properties.push('invalid value for "contributors_url", contributors_url cannot be nil.')
      end

      if @deployments_url.nil?
        invalid_properties.push('invalid value for "deployments_url", deployments_url cannot be nil.')
      end

      if @downloads_url.nil?
        invalid_properties.push('invalid value for "downloads_url", downloads_url cannot be nil.')
      end

      if @events_url.nil?
        invalid_properties.push('invalid value for "events_url", events_url cannot be nil.')
      end

      if @forks_url.nil?
        invalid_properties.push('invalid value for "forks_url", forks_url cannot be nil.')
      end

      if @git_commits_url.nil?
        invalid_properties.push('invalid value for "git_commits_url", git_commits_url cannot be nil.')
      end

      if @git_refs_url.nil?
        invalid_properties.push('invalid value for "git_refs_url", git_refs_url cannot be nil.')
      end

      if @git_tags_url.nil?
        invalid_properties.push('invalid value for "git_tags_url", git_tags_url cannot be nil.')
      end

      if @issue_comment_url.nil?
        invalid_properties.push('invalid value for "issue_comment_url", issue_comment_url cannot be nil.')
      end

      if @issue_events_url.nil?
        invalid_properties.push('invalid value for "issue_events_url", issue_events_url cannot be nil.')
      end

      if @issues_url.nil?
        invalid_properties.push('invalid value for "issues_url", issues_url cannot be nil.')
      end

      if @keys_url.nil?
        invalid_properties.push('invalid value for "keys_url", keys_url cannot be nil.')
      end

      if @labels_url.nil?
        invalid_properties.push('invalid value for "labels_url", labels_url cannot be nil.')
      end

      if @languages_url.nil?
        invalid_properties.push('invalid value for "languages_url", languages_url cannot be nil.')
      end

      if @merges_url.nil?
        invalid_properties.push('invalid value for "merges_url", merges_url cannot be nil.')
      end

      if @milestones_url.nil?
        invalid_properties.push('invalid value for "milestones_url", milestones_url cannot be nil.')
      end

      if @notifications_url.nil?
        invalid_properties.push('invalid value for "notifications_url", notifications_url cannot be nil.')
      end

      if @pulls_url.nil?
        invalid_properties.push('invalid value for "pulls_url", pulls_url cannot be nil.')
      end

      if @releases_url.nil?
        invalid_properties.push('invalid value for "releases_url", releases_url cannot be nil.')
      end

      if @stargazers_url.nil?
        invalid_properties.push('invalid value for "stargazers_url", stargazers_url cannot be nil.')
      end

      if @statuses_url.nil?
        invalid_properties.push('invalid value for "statuses_url", statuses_url cannot be nil.')
      end

      if @subscribers_url.nil?
        invalid_properties.push('invalid value for "subscribers_url", subscribers_url cannot be nil.')
      end

      if @subscription_url.nil?
        invalid_properties.push('invalid value for "subscription_url", subscription_url cannot be nil.')
      end

      if @tags_url.nil?
        invalid_properties.push('invalid value for "tags_url", tags_url cannot be nil.')
      end

      if @teams_url.nil?
        invalid_properties.push('invalid value for "teams_url", teams_url cannot be nil.')
      end

      if @trees_url.nil?
        invalid_properties.push('invalid value for "trees_url", trees_url cannot be nil.')
      end

      if @hooks_url.nil?
        invalid_properties.push('invalid value for "hooks_url", hooks_url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @node_id.nil?
      return false if @name.nil?
      return false if @full_name.nil?
      return false if @owner.nil?
      return false if @private.nil?
      return false if @html_url.nil?
      return false if @fork.nil?
      return false if @url.nil?
      return false if @archive_url.nil?
      return false if @assignees_url.nil?
      return false if @blobs_url.nil?
      return false if @branches_url.nil?
      return false if @collaborators_url.nil?
      return false if @comments_url.nil?
      return false if @commits_url.nil?
      return false if @compare_url.nil?
      return false if @contents_url.nil?
      return false if @contributors_url.nil?
      return false if @deployments_url.nil?
      return false if @downloads_url.nil?
      return false if @events_url.nil?
      return false if @forks_url.nil?
      return false if @git_commits_url.nil?
      return false if @git_refs_url.nil?
      return false if @git_tags_url.nil?
      return false if @issue_comment_url.nil?
      return false if @issue_events_url.nil?
      return false if @issues_url.nil?
      return false if @keys_url.nil?
      return false if @labels_url.nil?
      return false if @languages_url.nil?
      return false if @merges_url.nil?
      return false if @milestones_url.nil?
      return false if @notifications_url.nil?
      return false if @pulls_url.nil?
      return false if @releases_url.nil?
      return false if @stargazers_url.nil?
      return false if @statuses_url.nil?
      return false if @subscribers_url.nil?
      return false if @subscription_url.nil?
      return false if @tags_url.nil?
      return false if @teams_url.nil?
      return false if @trees_url.nil?
      return false if @hooks_url.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          node_id == o.node_id &&
          name == o.name &&
          full_name == o.full_name &&
          owner == o.owner &&
          private == o.private &&
          html_url == o.html_url &&
          description == o.description &&
          fork == o.fork &&
          url == o.url &&
          archive_url == o.archive_url &&
          assignees_url == o.assignees_url &&
          blobs_url == o.blobs_url &&
          branches_url == o.branches_url &&
          collaborators_url == o.collaborators_url &&
          comments_url == o.comments_url &&
          commits_url == o.commits_url &&
          compare_url == o.compare_url &&
          contents_url == o.contents_url &&
          contributors_url == o.contributors_url &&
          deployments_url == o.deployments_url &&
          downloads_url == o.downloads_url &&
          events_url == o.events_url &&
          forks_url == o.forks_url &&
          git_commits_url == o.git_commits_url &&
          git_refs_url == o.git_refs_url &&
          git_tags_url == o.git_tags_url &&
          issue_comment_url == o.issue_comment_url &&
          issue_events_url == o.issue_events_url &&
          issues_url == o.issues_url &&
          keys_url == o.keys_url &&
          labels_url == o.labels_url &&
          languages_url == o.languages_url &&
          merges_url == o.merges_url &&
          milestones_url == o.milestones_url &&
          notifications_url == o.notifications_url &&
          pulls_url == o.pulls_url &&
          releases_url == o.releases_url &&
          stargazers_url == o.stargazers_url &&
          statuses_url == o.statuses_url &&
          subscribers_url == o.subscribers_url &&
          subscription_url == o.subscription_url &&
          tags_url == o.tags_url &&
          teams_url == o.teams_url &&
          trees_url == o.trees_url &&
          hooks_url == o.hooks_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, node_id, name, full_name, owner, private, html_url, description, fork, url, archive_url, assignees_url, blobs_url, branches_url, collaborators_url, comments_url, commits_url, compare_url, contents_url, contributors_url, deployments_url, downloads_url, events_url, forks_url, git_commits_url, git_refs_url, git_tags_url, issue_comment_url, issue_events_url, issues_url, keys_url, labels_url, languages_url, merges_url, milestones_url, notifications_url, pulls_url, releases_url, stargazers_url, statuses_url, subscribers_url, subscription_url, tags_url, teams_url, trees_url, hooks_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
