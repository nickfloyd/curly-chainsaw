=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class PagesHealthCheckStatusDomain
    attr_accessor :host

    attr_accessor :uri

    attr_accessor :nameservers

    attr_accessor :dns_resolves

    attr_accessor :is_proxied

    attr_accessor :is_cloudflare_ip

    attr_accessor :is_fastly_ip

    attr_accessor :is_old_ip_address

    attr_accessor :is_a_record

    attr_accessor :has_cname_record

    attr_accessor :has_mx_records_present

    attr_accessor :is_valid_domain

    attr_accessor :is_apex_domain

    attr_accessor :should_be_a_record

    attr_accessor :is_cname_to_github_user_domain

    attr_accessor :is_cname_to_pages_dot_github_dot_com

    attr_accessor :is_cname_to_fastly

    attr_accessor :is_pointed_to_github_pages_ip

    attr_accessor :is_non_github_pages_ip_present

    attr_accessor :is_pages_domain

    attr_accessor :is_served_by_pages

    attr_accessor :is_valid

    attr_accessor :reason

    attr_accessor :responds_to_https

    attr_accessor :enforces_https

    attr_accessor :https_error

    attr_accessor :is_https_eligible

    attr_accessor :caa_error

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'host' => :'host',
        :'uri' => :'uri',
        :'nameservers' => :'nameservers',
        :'dns_resolves' => :'dns_resolves',
        :'is_proxied' => :'is_proxied',
        :'is_cloudflare_ip' => :'is_cloudflare_ip',
        :'is_fastly_ip' => :'is_fastly_ip',
        :'is_old_ip_address' => :'is_old_ip_address',
        :'is_a_record' => :'is_a_record',
        :'has_cname_record' => :'has_cname_record',
        :'has_mx_records_present' => :'has_mx_records_present',
        :'is_valid_domain' => :'is_valid_domain',
        :'is_apex_domain' => :'is_apex_domain',
        :'should_be_a_record' => :'should_be_a_record',
        :'is_cname_to_github_user_domain' => :'is_cname_to_github_user_domain',
        :'is_cname_to_pages_dot_github_dot_com' => :'is_cname_to_pages_dot_github_dot_com',
        :'is_cname_to_fastly' => :'is_cname_to_fastly',
        :'is_pointed_to_github_pages_ip' => :'is_pointed_to_github_pages_ip',
        :'is_non_github_pages_ip_present' => :'is_non_github_pages_ip_present',
        :'is_pages_domain' => :'is_pages_domain',
        :'is_served_by_pages' => :'is_served_by_pages',
        :'is_valid' => :'is_valid',
        :'reason' => :'reason',
        :'responds_to_https' => :'responds_to_https',
        :'enforces_https' => :'enforces_https',
        :'https_error' => :'https_error',
        :'is_https_eligible' => :'is_https_eligible',
        :'caa_error' => :'caa_error'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'host' => :'String',
        :'uri' => :'String',
        :'nameservers' => :'String',
        :'dns_resolves' => :'Boolean',
        :'is_proxied' => :'Boolean',
        :'is_cloudflare_ip' => :'Boolean',
        :'is_fastly_ip' => :'Boolean',
        :'is_old_ip_address' => :'Boolean',
        :'is_a_record' => :'Boolean',
        :'has_cname_record' => :'Boolean',
        :'has_mx_records_present' => :'Boolean',
        :'is_valid_domain' => :'Boolean',
        :'is_apex_domain' => :'Boolean',
        :'should_be_a_record' => :'Boolean',
        :'is_cname_to_github_user_domain' => :'Boolean',
        :'is_cname_to_pages_dot_github_dot_com' => :'Boolean',
        :'is_cname_to_fastly' => :'Boolean',
        :'is_pointed_to_github_pages_ip' => :'Boolean',
        :'is_non_github_pages_ip_present' => :'Boolean',
        :'is_pages_domain' => :'Boolean',
        :'is_served_by_pages' => :'Boolean',
        :'is_valid' => :'Boolean',
        :'reason' => :'String',
        :'responds_to_https' => :'Boolean',
        :'enforces_https' => :'Boolean',
        :'https_error' => :'String',
        :'is_https_eligible' => :'Boolean',
        :'caa_error' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'is_proxied',
        :'is_cloudflare_ip',
        :'is_fastly_ip',
        :'is_old_ip_address',
        :'is_a_record',
        :'has_cname_record',
        :'has_mx_records_present',
        :'should_be_a_record',
        :'is_cname_to_github_user_domain',
        :'is_cname_to_pages_dot_github_dot_com',
        :'is_cname_to_fastly',
        :'is_pointed_to_github_pages_ip',
        :'is_non_github_pages_ip_present',
        :'is_served_by_pages',
        :'reason',
        :'https_error',
        :'is_https_eligible',
        :'caa_error'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PagesHealthCheckStatusDomain` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PagesHealthCheckStatusDomain`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.key?(:'uri')
        self.uri = attributes[:'uri']
      end

      if attributes.key?(:'nameservers')
        self.nameservers = attributes[:'nameservers']
      end

      if attributes.key?(:'dns_resolves')
        self.dns_resolves = attributes[:'dns_resolves']
      end

      if attributes.key?(:'is_proxied')
        self.is_proxied = attributes[:'is_proxied']
      end

      if attributes.key?(:'is_cloudflare_ip')
        self.is_cloudflare_ip = attributes[:'is_cloudflare_ip']
      end

      if attributes.key?(:'is_fastly_ip')
        self.is_fastly_ip = attributes[:'is_fastly_ip']
      end

      if attributes.key?(:'is_old_ip_address')
        self.is_old_ip_address = attributes[:'is_old_ip_address']
      end

      if attributes.key?(:'is_a_record')
        self.is_a_record = attributes[:'is_a_record']
      end

      if attributes.key?(:'has_cname_record')
        self.has_cname_record = attributes[:'has_cname_record']
      end

      if attributes.key?(:'has_mx_records_present')
        self.has_mx_records_present = attributes[:'has_mx_records_present']
      end

      if attributes.key?(:'is_valid_domain')
        self.is_valid_domain = attributes[:'is_valid_domain']
      end

      if attributes.key?(:'is_apex_domain')
        self.is_apex_domain = attributes[:'is_apex_domain']
      end

      if attributes.key?(:'should_be_a_record')
        self.should_be_a_record = attributes[:'should_be_a_record']
      end

      if attributes.key?(:'is_cname_to_github_user_domain')
        self.is_cname_to_github_user_domain = attributes[:'is_cname_to_github_user_domain']
      end

      if attributes.key?(:'is_cname_to_pages_dot_github_dot_com')
        self.is_cname_to_pages_dot_github_dot_com = attributes[:'is_cname_to_pages_dot_github_dot_com']
      end

      if attributes.key?(:'is_cname_to_fastly')
        self.is_cname_to_fastly = attributes[:'is_cname_to_fastly']
      end

      if attributes.key?(:'is_pointed_to_github_pages_ip')
        self.is_pointed_to_github_pages_ip = attributes[:'is_pointed_to_github_pages_ip']
      end

      if attributes.key?(:'is_non_github_pages_ip_present')
        self.is_non_github_pages_ip_present = attributes[:'is_non_github_pages_ip_present']
      end

      if attributes.key?(:'is_pages_domain')
        self.is_pages_domain = attributes[:'is_pages_domain']
      end

      if attributes.key?(:'is_served_by_pages')
        self.is_served_by_pages = attributes[:'is_served_by_pages']
      end

      if attributes.key?(:'is_valid')
        self.is_valid = attributes[:'is_valid']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.key?(:'responds_to_https')
        self.responds_to_https = attributes[:'responds_to_https']
      end

      if attributes.key?(:'enforces_https')
        self.enforces_https = attributes[:'enforces_https']
      end

      if attributes.key?(:'https_error')
        self.https_error = attributes[:'https_error']
      end

      if attributes.key?(:'is_https_eligible')
        self.is_https_eligible = attributes[:'is_https_eligible']
      end

      if attributes.key?(:'caa_error')
        self.caa_error = attributes[:'caa_error']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          host == o.host &&
          uri == o.uri &&
          nameservers == o.nameservers &&
          dns_resolves == o.dns_resolves &&
          is_proxied == o.is_proxied &&
          is_cloudflare_ip == o.is_cloudflare_ip &&
          is_fastly_ip == o.is_fastly_ip &&
          is_old_ip_address == o.is_old_ip_address &&
          is_a_record == o.is_a_record &&
          has_cname_record == o.has_cname_record &&
          has_mx_records_present == o.has_mx_records_present &&
          is_valid_domain == o.is_valid_domain &&
          is_apex_domain == o.is_apex_domain &&
          should_be_a_record == o.should_be_a_record &&
          is_cname_to_github_user_domain == o.is_cname_to_github_user_domain &&
          is_cname_to_pages_dot_github_dot_com == o.is_cname_to_pages_dot_github_dot_com &&
          is_cname_to_fastly == o.is_cname_to_fastly &&
          is_pointed_to_github_pages_ip == o.is_pointed_to_github_pages_ip &&
          is_non_github_pages_ip_present == o.is_non_github_pages_ip_present &&
          is_pages_domain == o.is_pages_domain &&
          is_served_by_pages == o.is_served_by_pages &&
          is_valid == o.is_valid &&
          reason == o.reason &&
          responds_to_https == o.responds_to_https &&
          enforces_https == o.enforces_https &&
          https_error == o.https_error &&
          is_https_eligible == o.is_https_eligible &&
          caa_error == o.caa_error
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [host, uri, nameservers, dns_resolves, is_proxied, is_cloudflare_ip, is_fastly_ip, is_old_ip_address, is_a_record, has_cname_record, has_mx_records_present, is_valid_domain, is_apex_domain, should_be_a_record, is_cname_to_github_user_domain, is_cname_to_pages_dot_github_dot_com, is_cname_to_fastly, is_pointed_to_github_pages_ip, is_non_github_pages_ip_present, is_pages_domain, is_served_by_pages, is_valid, reason, responds_to_https, enforces_https, https_error, is_https_eligible, caa_error].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
