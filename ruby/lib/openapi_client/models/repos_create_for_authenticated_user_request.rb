=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class ReposCreateForAuthenticatedUserRequest
    # The name of the repository.
    attr_accessor :name

    # A short description of the repository.
    attr_accessor :description

    # A URL with more information about the repository.
    attr_accessor :homepage

    # Whether the repository is private.
    attr_accessor :private

    # Whether issues are enabled.
    attr_accessor :has_issues

    # Whether projects are enabled.
    attr_accessor :has_projects

    # Whether the wiki is enabled.
    attr_accessor :has_wiki

    # The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
    attr_accessor :team_id

    # Whether the repository is initialized with a minimal README.
    attr_accessor :auto_init

    # The desired language or platform to apply to the .gitignore.
    attr_accessor :gitignore_template

    # The license keyword of the open source license for this repository.
    attr_accessor :license_template

    # Whether to allow squash merges for pull requests.
    attr_accessor :allow_squash_merge

    # Whether to allow merge commits for pull requests.
    attr_accessor :allow_merge_commit

    # Whether to allow rebase merges for pull requests.
    attr_accessor :allow_rebase_merge

    # Whether to allow Auto-merge to be used on pull requests.
    attr_accessor :allow_auto_merge

    # Whether to delete head branches when pull requests are merged
    attr_accessor :delete_branch_on_merge

    # Whether downloads are enabled.
    attr_accessor :has_downloads

    # Whether this repository acts as a template that can be used to generate new repositories.
    attr_accessor :is_template

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'description' => :'description',
        :'homepage' => :'homepage',
        :'private' => :'private',
        :'has_issues' => :'has_issues',
        :'has_projects' => :'has_projects',
        :'has_wiki' => :'has_wiki',
        :'team_id' => :'team_id',
        :'auto_init' => :'auto_init',
        :'gitignore_template' => :'gitignore_template',
        :'license_template' => :'license_template',
        :'allow_squash_merge' => :'allow_squash_merge',
        :'allow_merge_commit' => :'allow_merge_commit',
        :'allow_rebase_merge' => :'allow_rebase_merge',
        :'allow_auto_merge' => :'allow_auto_merge',
        :'delete_branch_on_merge' => :'delete_branch_on_merge',
        :'has_downloads' => :'has_downloads',
        :'is_template' => :'is_template'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'description' => :'String',
        :'homepage' => :'String',
        :'private' => :'Boolean',
        :'has_issues' => :'Boolean',
        :'has_projects' => :'Boolean',
        :'has_wiki' => :'Boolean',
        :'team_id' => :'Integer',
        :'auto_init' => :'Boolean',
        :'gitignore_template' => :'String',
        :'license_template' => :'String',
        :'allow_squash_merge' => :'Boolean',
        :'allow_merge_commit' => :'Boolean',
        :'allow_rebase_merge' => :'Boolean',
        :'allow_auto_merge' => :'Boolean',
        :'delete_branch_on_merge' => :'Boolean',
        :'has_downloads' => :'Boolean',
        :'is_template' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ReposCreateForAuthenticatedUserRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ReposCreateForAuthenticatedUserRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'homepage')
        self.homepage = attributes[:'homepage']
      end

      if attributes.key?(:'private')
        self.private = attributes[:'private']
      else
        self.private = false
      end

      if attributes.key?(:'has_issues')
        self.has_issues = attributes[:'has_issues']
      else
        self.has_issues = true
      end

      if attributes.key?(:'has_projects')
        self.has_projects = attributes[:'has_projects']
      else
        self.has_projects = true
      end

      if attributes.key?(:'has_wiki')
        self.has_wiki = attributes[:'has_wiki']
      else
        self.has_wiki = true
      end

      if attributes.key?(:'team_id')
        self.team_id = attributes[:'team_id']
      end

      if attributes.key?(:'auto_init')
        self.auto_init = attributes[:'auto_init']
      else
        self.auto_init = false
      end

      if attributes.key?(:'gitignore_template')
        self.gitignore_template = attributes[:'gitignore_template']
      end

      if attributes.key?(:'license_template')
        self.license_template = attributes[:'license_template']
      end

      if attributes.key?(:'allow_squash_merge')
        self.allow_squash_merge = attributes[:'allow_squash_merge']
      else
        self.allow_squash_merge = true
      end

      if attributes.key?(:'allow_merge_commit')
        self.allow_merge_commit = attributes[:'allow_merge_commit']
      else
        self.allow_merge_commit = true
      end

      if attributes.key?(:'allow_rebase_merge')
        self.allow_rebase_merge = attributes[:'allow_rebase_merge']
      else
        self.allow_rebase_merge = true
      end

      if attributes.key?(:'allow_auto_merge')
        self.allow_auto_merge = attributes[:'allow_auto_merge']
      else
        self.allow_auto_merge = false
      end

      if attributes.key?(:'delete_branch_on_merge')
        self.delete_branch_on_merge = attributes[:'delete_branch_on_merge']
      else
        self.delete_branch_on_merge = false
      end

      if attributes.key?(:'has_downloads')
        self.has_downloads = attributes[:'has_downloads']
      else
        self.has_downloads = true
      end

      if attributes.key?(:'is_template')
        self.is_template = attributes[:'is_template']
      else
        self.is_template = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          description == o.description &&
          homepage == o.homepage &&
          private == o.private &&
          has_issues == o.has_issues &&
          has_projects == o.has_projects &&
          has_wiki == o.has_wiki &&
          team_id == o.team_id &&
          auto_init == o.auto_init &&
          gitignore_template == o.gitignore_template &&
          license_template == o.license_template &&
          allow_squash_merge == o.allow_squash_merge &&
          allow_merge_commit == o.allow_merge_commit &&
          allow_rebase_merge == o.allow_rebase_merge &&
          allow_auto_merge == o.allow_auto_merge &&
          delete_branch_on_merge == o.delete_branch_on_merge &&
          has_downloads == o.has_downloads &&
          is_template == o.is_template
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, description, homepage, private, has_issues, has_projects, has_wiki, team_id, auto_init, gitignore_template, license_template, allow_squash_merge, allow_merge_commit, allow_rebase_merge, allow_auto_merge, delete_branch_on_merge, has_downloads, is_template].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
