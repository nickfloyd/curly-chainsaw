=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class GPGKeySubkeysInner
    attr_accessor :id

    attr_accessor :primary_key_id

    attr_accessor :key_id

    attr_accessor :public_key

    attr_accessor :emails

    attr_accessor :subkeys

    attr_accessor :can_sign

    attr_accessor :can_encrypt_comms

    attr_accessor :can_encrypt_storage

    attr_accessor :can_certify

    attr_accessor :created_at

    attr_accessor :expires_at

    attr_accessor :raw_key

    attr_accessor :revoked

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'primary_key_id' => :'primary_key_id',
        :'key_id' => :'key_id',
        :'public_key' => :'public_key',
        :'emails' => :'emails',
        :'subkeys' => :'subkeys',
        :'can_sign' => :'can_sign',
        :'can_encrypt_comms' => :'can_encrypt_comms',
        :'can_encrypt_storage' => :'can_encrypt_storage',
        :'can_certify' => :'can_certify',
        :'created_at' => :'created_at',
        :'expires_at' => :'expires_at',
        :'raw_key' => :'raw_key',
        :'revoked' => :'revoked'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'primary_key_id' => :'Integer',
        :'key_id' => :'String',
        :'public_key' => :'String',
        :'emails' => :'Array<Object>',
        :'subkeys' => :'Array<Object>',
        :'can_sign' => :'Boolean',
        :'can_encrypt_comms' => :'Boolean',
        :'can_encrypt_storage' => :'Boolean',
        :'can_certify' => :'Boolean',
        :'created_at' => :'String',
        :'expires_at' => :'String',
        :'raw_key' => :'String',
        :'revoked' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'expires_at',
        :'raw_key',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GPGKeySubkeysInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GPGKeySubkeysInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'primary_key_id')
        self.primary_key_id = attributes[:'primary_key_id']
      end

      if attributes.key?(:'key_id')
        self.key_id = attributes[:'key_id']
      end

      if attributes.key?(:'public_key')
        self.public_key = attributes[:'public_key']
      end

      if attributes.key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.key?(:'subkeys')
        if (value = attributes[:'subkeys']).is_a?(Array)
          self.subkeys = value
        end
      end

      if attributes.key?(:'can_sign')
        self.can_sign = attributes[:'can_sign']
      end

      if attributes.key?(:'can_encrypt_comms')
        self.can_encrypt_comms = attributes[:'can_encrypt_comms']
      end

      if attributes.key?(:'can_encrypt_storage')
        self.can_encrypt_storage = attributes[:'can_encrypt_storage']
      end

      if attributes.key?(:'can_certify')
        self.can_certify = attributes[:'can_certify']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'expires_at')
        self.expires_at = attributes[:'expires_at']
      end

      if attributes.key?(:'raw_key')
        self.raw_key = attributes[:'raw_key']
      end

      if attributes.key?(:'revoked')
        self.revoked = attributes[:'revoked']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          primary_key_id == o.primary_key_id &&
          key_id == o.key_id &&
          public_key == o.public_key &&
          emails == o.emails &&
          subkeys == o.subkeys &&
          can_sign == o.can_sign &&
          can_encrypt_comms == o.can_encrypt_comms &&
          can_encrypt_storage == o.can_encrypt_storage &&
          can_certify == o.can_certify &&
          created_at == o.created_at &&
          expires_at == o.expires_at &&
          raw_key == o.raw_key &&
          revoked == o.revoked
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, primary_key_id, key_id, public_key, emails, subkeys, can_sign, can_encrypt_comms, can_encrypt_storage, can_certify, created_at, expires_at, raw_key, revoked].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
