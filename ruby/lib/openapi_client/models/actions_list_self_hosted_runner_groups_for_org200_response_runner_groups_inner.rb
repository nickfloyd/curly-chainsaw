=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner
    attr_accessor :id

    attr_accessor :name

    attr_accessor :visibility

    attr_accessor :default

    # Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
    attr_accessor :selected_repositories_url

    attr_accessor :runners_url

    attr_accessor :inherited

    attr_accessor :inherited_allows_public_repositories

    attr_accessor :allows_public_repositories

    # If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
    attr_accessor :workflow_restrictions_read_only

    # If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
    attr_accessor :restricted_to_workflows

    # List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
    attr_accessor :selected_workflows

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'visibility' => :'visibility',
        :'default' => :'default',
        :'selected_repositories_url' => :'selected_repositories_url',
        :'runners_url' => :'runners_url',
        :'inherited' => :'inherited',
        :'inherited_allows_public_repositories' => :'inherited_allows_public_repositories',
        :'allows_public_repositories' => :'allows_public_repositories',
        :'workflow_restrictions_read_only' => :'workflow_restrictions_read_only',
        :'restricted_to_workflows' => :'restricted_to_workflows',
        :'selected_workflows' => :'selected_workflows'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Float',
        :'name' => :'String',
        :'visibility' => :'String',
        :'default' => :'Boolean',
        :'selected_repositories_url' => :'String',
        :'runners_url' => :'String',
        :'inherited' => :'Boolean',
        :'inherited_allows_public_repositories' => :'Boolean',
        :'allows_public_repositories' => :'Boolean',
        :'workflow_restrictions_read_only' => :'Boolean',
        :'restricted_to_workflows' => :'Boolean',
        :'selected_workflows' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      end

      if attributes.key?(:'default')
        self.default = attributes[:'default']
      end

      if attributes.key?(:'selected_repositories_url')
        self.selected_repositories_url = attributes[:'selected_repositories_url']
      end

      if attributes.key?(:'runners_url')
        self.runners_url = attributes[:'runners_url']
      end

      if attributes.key?(:'inherited')
        self.inherited = attributes[:'inherited']
      end

      if attributes.key?(:'inherited_allows_public_repositories')
        self.inherited_allows_public_repositories = attributes[:'inherited_allows_public_repositories']
      end

      if attributes.key?(:'allows_public_repositories')
        self.allows_public_repositories = attributes[:'allows_public_repositories']
      end

      if attributes.key?(:'workflow_restrictions_read_only')
        self.workflow_restrictions_read_only = attributes[:'workflow_restrictions_read_only']
      else
        self.workflow_restrictions_read_only = false
      end

      if attributes.key?(:'restricted_to_workflows')
        self.restricted_to_workflows = attributes[:'restricted_to_workflows']
      else
        self.restricted_to_workflows = false
      end

      if attributes.key?(:'selected_workflows')
        if (value = attributes[:'selected_workflows']).is_a?(Array)
          self.selected_workflows = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @visibility.nil?
        invalid_properties.push('invalid value for "visibility", visibility cannot be nil.')
      end

      if @default.nil?
        invalid_properties.push('invalid value for "default", default cannot be nil.')
      end

      if @runners_url.nil?
        invalid_properties.push('invalid value for "runners_url", runners_url cannot be nil.')
      end

      if @inherited.nil?
        invalid_properties.push('invalid value for "inherited", inherited cannot be nil.')
      end

      if @allows_public_repositories.nil?
        invalid_properties.push('invalid value for "allows_public_repositories", allows_public_repositories cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @visibility.nil?
      return false if @default.nil?
      return false if @runners_url.nil?
      return false if @inherited.nil?
      return false if @allows_public_repositories.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          visibility == o.visibility &&
          default == o.default &&
          selected_repositories_url == o.selected_repositories_url &&
          runners_url == o.runners_url &&
          inherited == o.inherited &&
          inherited_allows_public_repositories == o.inherited_allows_public_repositories &&
          allows_public_repositories == o.allows_public_repositories &&
          workflow_restrictions_read_only == o.workflow_restrictions_read_only &&
          restricted_to_workflows == o.restricted_to_workflows &&
          selected_workflows == o.selected_workflows
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, visibility, default, selected_repositories_url, runners_url, inherited, inherited_allows_public_repositories, allows_public_repositories, workflow_restrictions_read_only, restricted_to_workflows, selected_workflows].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
