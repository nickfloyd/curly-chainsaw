=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  # A repository import from an external source.
  class Import
    attr_accessor :vcs

    attr_accessor :use_lfs

    # The URL of the originating repository.
    attr_accessor :vcs_url

    attr_accessor :svc_root

    attr_accessor :tfvc_project

    attr_accessor :status

    attr_accessor :status_text

    attr_accessor :failed_step

    attr_accessor :error_message

    attr_accessor :import_percent

    attr_accessor :commit_count

    attr_accessor :push_percent

    attr_accessor :has_large_files

    attr_accessor :large_files_size

    attr_accessor :large_files_count

    attr_accessor :project_choices

    attr_accessor :message

    attr_accessor :authors_count

    attr_accessor :url

    attr_accessor :html_url

    attr_accessor :authors_url

    attr_accessor :repository_url

    attr_accessor :svn_root

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'vcs' => :'vcs',
        :'use_lfs' => :'use_lfs',
        :'vcs_url' => :'vcs_url',
        :'svc_root' => :'svc_root',
        :'tfvc_project' => :'tfvc_project',
        :'status' => :'status',
        :'status_text' => :'status_text',
        :'failed_step' => :'failed_step',
        :'error_message' => :'error_message',
        :'import_percent' => :'import_percent',
        :'commit_count' => :'commit_count',
        :'push_percent' => :'push_percent',
        :'has_large_files' => :'has_large_files',
        :'large_files_size' => :'large_files_size',
        :'large_files_count' => :'large_files_count',
        :'project_choices' => :'project_choices',
        :'message' => :'message',
        :'authors_count' => :'authors_count',
        :'url' => :'url',
        :'html_url' => :'html_url',
        :'authors_url' => :'authors_url',
        :'repository_url' => :'repository_url',
        :'svn_root' => :'svn_root'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'vcs' => :'String',
        :'use_lfs' => :'Boolean',
        :'vcs_url' => :'String',
        :'svc_root' => :'String',
        :'tfvc_project' => :'String',
        :'status' => :'String',
        :'status_text' => :'String',
        :'failed_step' => :'String',
        :'error_message' => :'String',
        :'import_percent' => :'Integer',
        :'commit_count' => :'Integer',
        :'push_percent' => :'Integer',
        :'has_large_files' => :'Boolean',
        :'large_files_size' => :'Integer',
        :'large_files_count' => :'Integer',
        :'project_choices' => :'Array<ImportProjectChoicesInner>',
        :'message' => :'String',
        :'authors_count' => :'Integer',
        :'url' => :'String',
        :'html_url' => :'String',
        :'authors_url' => :'String',
        :'repository_url' => :'String',
        :'svn_root' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'vcs',
        :'status_text',
        :'failed_step',
        :'error_message',
        :'import_percent',
        :'commit_count',
        :'push_percent',
        :'authors_count',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Import` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Import`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'vcs')
        self.vcs = attributes[:'vcs']
      end

      if attributes.key?(:'use_lfs')
        self.use_lfs = attributes[:'use_lfs']
      end

      if attributes.key?(:'vcs_url')
        self.vcs_url = attributes[:'vcs_url']
      end

      if attributes.key?(:'svc_root')
        self.svc_root = attributes[:'svc_root']
      end

      if attributes.key?(:'tfvc_project')
        self.tfvc_project = attributes[:'tfvc_project']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_text')
        self.status_text = attributes[:'status_text']
      end

      if attributes.key?(:'failed_step')
        self.failed_step = attributes[:'failed_step']
      end

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.key?(:'import_percent')
        self.import_percent = attributes[:'import_percent']
      end

      if attributes.key?(:'commit_count')
        self.commit_count = attributes[:'commit_count']
      end

      if attributes.key?(:'push_percent')
        self.push_percent = attributes[:'push_percent']
      end

      if attributes.key?(:'has_large_files')
        self.has_large_files = attributes[:'has_large_files']
      end

      if attributes.key?(:'large_files_size')
        self.large_files_size = attributes[:'large_files_size']
      end

      if attributes.key?(:'large_files_count')
        self.large_files_count = attributes[:'large_files_count']
      end

      if attributes.key?(:'project_choices')
        if (value = attributes[:'project_choices']).is_a?(Array)
          self.project_choices = value
        end
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'authors_count')
        self.authors_count = attributes[:'authors_count']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'authors_url')
        self.authors_url = attributes[:'authors_url']
      end

      if attributes.key?(:'repository_url')
        self.repository_url = attributes[:'repository_url']
      end

      if attributes.key?(:'svn_root')
        self.svn_root = attributes[:'svn_root']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @vcs_url.nil?
        invalid_properties.push('invalid value for "vcs_url", vcs_url cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @html_url.nil?
        invalid_properties.push('invalid value for "html_url", html_url cannot be nil.')
      end

      if @authors_url.nil?
        invalid_properties.push('invalid value for "authors_url", authors_url cannot be nil.')
      end

      if @repository_url.nil?
        invalid_properties.push('invalid value for "repository_url", repository_url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @vcs_url.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["auth", "error", "none", "detecting", "choose", "auth_failed", "importing", "mapping", "waiting_to_push", "pushing", "complete", "setup", "unknown", "detection_found_multiple", "detection_found_nothing", "detection_needs_auth"])
      return false unless status_validator.valid?(@status)
      return false if @url.nil?
      return false if @html_url.nil?
      return false if @authors_url.nil?
      return false if @repository_url.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["auth", "error", "none", "detecting", "choose", "auth_failed", "importing", "mapping", "waiting_to_push", "pushing", "complete", "setup", "unknown", "detection_found_multiple", "detection_found_nothing", "detection_needs_auth"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          vcs == o.vcs &&
          use_lfs == o.use_lfs &&
          vcs_url == o.vcs_url &&
          svc_root == o.svc_root &&
          tfvc_project == o.tfvc_project &&
          status == o.status &&
          status_text == o.status_text &&
          failed_step == o.failed_step &&
          error_message == o.error_message &&
          import_percent == o.import_percent &&
          commit_count == o.commit_count &&
          push_percent == o.push_percent &&
          has_large_files == o.has_large_files &&
          large_files_size == o.large_files_size &&
          large_files_count == o.large_files_count &&
          project_choices == o.project_choices &&
          message == o.message &&
          authors_count == o.authors_count &&
          url == o.url &&
          html_url == o.html_url &&
          authors_url == o.authors_url &&
          repository_url == o.repository_url &&
          svn_root == o.svn_root
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [vcs, use_lfs, vcs_url, svc_root, tfvc_project, status, status_text, failed_step, error_message, import_percent, commit_count, push_percent, has_large_files, large_files_size, large_files_count, project_choices, message, authors_count, url, html_url, authors_url, repository_url, svn_root].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
