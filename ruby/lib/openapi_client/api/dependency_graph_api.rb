=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class DependencyGraphApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a snapshot of dependencies for a repository
    # Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param snapshot [Snapshot] 
    # @param [Hash] opts the optional parameters
    # @return [DependencyGraphCreateRepositorySnapshot201Response]
    def dependency_graph_create_repository_snapshot(owner, repo, snapshot, opts = {})
      data, _status_code, _headers = dependency_graph_create_repository_snapshot_with_http_info(owner, repo, snapshot, opts)
      data
    end

    # Create a snapshot of dependencies for a repository
    # Create a new snapshot of a repository&#39;s dependencies. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint for a repository that the requesting user has access to.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param snapshot [Snapshot] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependencyGraphCreateRepositorySnapshot201Response, Integer, Hash)>] DependencyGraphCreateRepositorySnapshot201Response data, response status code and response headers
    def dependency_graph_create_repository_snapshot_with_http_info(owner, repo, snapshot, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependencyGraphApi.dependency_graph_create_repository_snapshot ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependencyGraphApi.dependency_graph_create_repository_snapshot"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependencyGraphApi.dependency_graph_create_repository_snapshot"
      end
      # verify the required parameter 'snapshot' is set
      if @api_client.config.client_side_validation && snapshot.nil?
        fail ArgumentError, "Missing the required parameter 'snapshot' when calling DependencyGraphApi.dependency_graph_create_repository_snapshot"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependency-graph/snapshots'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(snapshot)

      # return_type
      return_type = opts[:debug_return_type] || 'DependencyGraphCreateRepositorySnapshot201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependencyGraphApi.dependency_graph_create_repository_snapshot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependencyGraphApi#dependency_graph_create_repository_snapshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a diff of the dependencies between commits
    # Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param basehead [String] The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format &#x60;{base}...{head}&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The full path, relative to the repository root, of the dependency manifest file.
    # @return [Array<DependencyGraphDiffInner>]
    def dependency_graph_diff_range(owner, repo, basehead, opts = {})
      data, _status_code, _headers = dependency_graph_diff_range_with_http_info(owner, repo, basehead, opts)
      data
    end

    # Get a diff of the dependencies between commits
    # Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param basehead [String] The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format &#x60;{base}...{head}&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The full path, relative to the repository root, of the dependency manifest file.
    # @return [Array<(Array<DependencyGraphDiffInner>, Integer, Hash)>] Array<DependencyGraphDiffInner> data, response status code and response headers
    def dependency_graph_diff_range_with_http_info(owner, repo, basehead, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependencyGraphApi.dependency_graph_diff_range ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependencyGraphApi.dependency_graph_diff_range"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependencyGraphApi.dependency_graph_diff_range"
      end
      # verify the required parameter 'basehead' is set
      if @api_client.config.client_side_validation && basehead.nil?
        fail ArgumentError, "Missing the required parameter 'basehead' when calling DependencyGraphApi.dependency_graph_diff_range"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependency-graph/compare/{basehead}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'basehead' + '}', CGI.escape(basehead.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DependencyGraphDiffInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependencyGraphApi.dependency_graph_diff_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependencyGraphApi#dependency_graph_diff_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
