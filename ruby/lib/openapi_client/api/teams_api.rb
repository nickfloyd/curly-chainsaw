=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class TeamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add team member (Legacy)
    # The \"Add team member\" endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_add_member_legacy(team_id, username, opts = {})
      teams_add_member_legacy_with_http_info(team_id, username, opts)
      nil
    end

    # Add team member (Legacy)
    # The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_add_member_legacy_with_http_info(team_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_add_member_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_add_member_legacy"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_add_member_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/members/{username}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_add_member_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_add_member_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update team membership for a user
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateMembershipForUserInOrgRequest] :teams_add_or_update_membership_for_user_in_org_request 
    # @return [TeamMembership]
    def teams_add_or_update_membership_for_user_in_org(org, team_slug, username, opts = {})
      data, _status_code, _headers = teams_add_or_update_membership_for_user_in_org_with_http_info(org, team_slug, username, opts)
      data
    end

    # Add or update team membership for a user
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  An organization owner can add someone who is not part of the team&#39;s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \&quot;pending\&quot; state until the person accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateMembershipForUserInOrgRequest] :teams_add_or_update_membership_for_user_in_org_request 
    # @return [Array<(TeamMembership, Integer, Hash)>] TeamMembership data, response status code and response headers
    def teams_add_or_update_membership_for_user_in_org_with_http_info(org, team_slug, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_add_or_update_membership_for_user_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_add_or_update_membership_for_user_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_add_or_update_membership_for_user_in_org"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_add_or_update_membership_for_user_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/memberships/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_add_or_update_membership_for_user_in_org_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TeamMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_add_or_update_membership_for_user_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_add_or_update_membership_for_user_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update team membership for a user (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateMembershipForUserInOrgRequest] :teams_add_or_update_membership_for_user_in_org_request 
    # @return [TeamMembership]
    def teams_add_or_update_membership_for_user_legacy(team_id, username, opts = {})
      data, _status_code, _headers = teams_add_or_update_membership_for_user_legacy_with_http_info(team_id, username, opts)
      data
    end

    # Add or update team membership for a user (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateMembershipForUserInOrgRequest] :teams_add_or_update_membership_for_user_in_org_request 
    # @return [Array<(TeamMembership, Integer, Hash)>] TeamMembership data, response status code and response headers
    def teams_add_or_update_membership_for_user_legacy_with_http_info(team_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_add_or_update_membership_for_user_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_add_or_update_membership_for_user_legacy"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_add_or_update_membership_for_user_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/memberships/{username}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_add_or_update_membership_for_user_in_org_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TeamMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_add_or_update_membership_for_user_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_add_or_update_membership_for_user_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update team project permissions
    # Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateProjectPermissionsInOrgRequest] :teams_add_or_update_project_permissions_in_org_request 
    # @return [nil]
    def teams_add_or_update_project_permissions_in_org(org, team_slug, project_id, opts = {})
      teams_add_or_update_project_permissions_in_org_with_http_info(org, team_slug, project_id, opts)
      nil
    end

    # Add or update team project permissions
    # Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateProjectPermissionsInOrgRequest] :teams_add_or_update_project_permissions_in_org_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_add_or_update_project_permissions_in_org_with_http_info(org, team_slug, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_add_or_update_project_permissions_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_add_or_update_project_permissions_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_add_or_update_project_permissions_in_org"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TeamsApi.teams_add_or_update_project_permissions_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_add_or_update_project_permissions_in_org_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_add_or_update_project_permissions_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_add_or_update_project_permissions_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update team project permissions (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    # @param team_id [Integer] The unique identifier of the team.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateProjectPermissionsLegacyRequest] :teams_add_or_update_project_permissions_legacy_request 
    # @return [nil]
    def teams_add_or_update_project_permissions_legacy(team_id, project_id, opts = {})
      teams_add_or_update_project_permissions_legacy_with_http_info(team_id, project_id, opts)
      nil
    end

    # Add or update team project permissions (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
    # @param team_id [Integer] The unique identifier of the team.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateProjectPermissionsLegacyRequest] :teams_add_or_update_project_permissions_legacy_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_add_or_update_project_permissions_legacy_with_http_info(team_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_add_or_update_project_permissions_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_add_or_update_project_permissions_legacy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TeamsApi.teams_add_or_update_project_permissions_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/projects/{project_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_add_or_update_project_permissions_legacy_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_add_or_update_project_permissions_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_add_or_update_project_permissions_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update team repository permissions
    # To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.  For more information about the permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateRepoPermissionsInOrgRequest] :teams_add_or_update_repo_permissions_in_org_request 
    # @return [nil]
    def teams_add_or_update_repo_permissions_in_org(org, team_slug, owner, repo, opts = {})
      teams_add_or_update_repo_permissions_in_org_with_http_info(org, team_slug, owner, repo, opts)
      nil
    end

    # Add or update team repository permissions
    # To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.  For more information about the permission levels, see \&quot;[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateRepoPermissionsInOrgRequest] :teams_add_or_update_repo_permissions_in_org_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_add_or_update_repo_permissions_in_org_with_http_info(org, team_slug, owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_add_or_update_repo_permissions_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_add_or_update_repo_permissions_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_add_or_update_repo_permissions_in_org"
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling TeamsApi.teams_add_or_update_repo_permissions_in_org"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling TeamsApi.teams_add_or_update_repo_permissions_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_add_or_update_repo_permissions_in_org_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_add_or_update_repo_permissions_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_add_or_update_repo_permissions_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update team repository permissions (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)\" endpoint.  To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"
    # @param team_id [Integer] The unique identifier of the team.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateRepoPermissionsLegacyRequest] :teams_add_or_update_repo_permissions_legacy_request 
    # @return [nil]
    def teams_add_or_update_repo_permissions_legacy(team_id, owner, repo, opts = {})
      teams_add_or_update_repo_permissions_legacy_with_http_info(team_id, owner, repo, opts)
      nil
    end

    # Add or update team repository permissions (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)\&quot; endpoint.  To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
    # @param team_id [Integer] The unique identifier of the team.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsAddOrUpdateRepoPermissionsLegacyRequest] :teams_add_or_update_repo_permissions_legacy_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_add_or_update_repo_permissions_legacy_with_http_info(team_id, owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_add_or_update_repo_permissions_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_add_or_update_repo_permissions_legacy"
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling TeamsApi.teams_add_or_update_repo_permissions_legacy"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling TeamsApi.teams_add_or_update_repo_permissions_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/repos/{owner}/{repo}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_add_or_update_repo_permissions_legacy_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_add_or_update_repo_permissions_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_add_or_update_repo_permissions_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check team permissions for a project
    # Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [TeamProject]
    def teams_check_permissions_for_project_in_org(org, team_slug, project_id, opts = {})
      data, _status_code, _headers = teams_check_permissions_for_project_in_org_with_http_info(org, team_slug, project_id, opts)
      data
    end

    # Check team permissions for a project
    # Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamProject, Integer, Hash)>] TeamProject data, response status code and response headers
    def teams_check_permissions_for_project_in_org_with_http_info(org, team_slug, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_check_permissions_for_project_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_check_permissions_for_project_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_check_permissions_for_project_in_org"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TeamsApi.teams_check_permissions_for_project_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamProject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_check_permissions_for_project_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_check_permissions_for_project_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check team permissions for a project (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [TeamProject]
    def teams_check_permissions_for_project_legacy(team_id, project_id, opts = {})
      data, _status_code, _headers = teams_check_permissions_for_project_legacy_with_http_info(team_id, project_id, opts)
      data
    end

    # Check team permissions for a project (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamProject, Integer, Hash)>] TeamProject data, response status code and response headers
    def teams_check_permissions_for_project_legacy_with_http_info(team_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_check_permissions_for_project_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_check_permissions_for_project_legacy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TeamsApi.teams_check_permissions_for_project_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/projects/{project_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamProject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_check_permissions_for_project_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_check_permissions_for_project_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check team permissions for a repository
    # Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.  If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [TeamRepository]
    def teams_check_permissions_for_repo_in_org(org, team_slug, owner, repo, opts = {})
      data, _status_code, _headers = teams_check_permissions_for_repo_in_org_with_http_info(org, team_slug, owner, repo, opts)
      data
    end

    # Check team permissions for a repository
    # Checks whether a team has &#x60;admin&#x60;, &#x60;push&#x60;, &#x60;maintain&#x60;, &#x60;triage&#x60;, or &#x60;pull&#x60; permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the &#x60;application/vnd.github.v3.repository+json&#x60; accept header.  If a team doesn&#39;t have permission for the repository, you will receive a &#x60;404 Not Found&#x60; response status.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamRepository, Integer, Hash)>] TeamRepository data, response status code and response headers
    def teams_check_permissions_for_repo_in_org_with_http_info(org, team_slug, owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_check_permissions_for_repo_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_check_permissions_for_repo_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_check_permissions_for_repo_in_org"
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling TeamsApi.teams_check_permissions_for_repo_in_org"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling TeamsApi.teams_check_permissions_for_repo_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamRepository'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_check_permissions_for_repo_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_check_permissions_for_repo_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check team permissions for a repository (Legacy)
    # **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
    # @param team_id [Integer] The unique identifier of the team.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [TeamRepository]
    def teams_check_permissions_for_repo_legacy(team_id, owner, repo, opts = {})
      data, _status_code, _headers = teams_check_permissions_for_repo_legacy_with_http_info(team_id, owner, repo, opts)
      data
    end

    # Check team permissions for a repository (Legacy)
    # **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
    # @param team_id [Integer] The unique identifier of the team.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamRepository, Integer, Hash)>] TeamRepository data, response status code and response headers
    def teams_check_permissions_for_repo_legacy_with_http_info(team_id, owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_check_permissions_for_repo_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_check_permissions_for_repo_legacy"
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling TeamsApi.teams_check_permissions_for_repo_legacy"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling TeamsApi.teams_check_permissions_for_repo_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/repos/{owner}/{repo}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamRepository'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_check_permissions_for_repo_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_check_permissions_for_repo_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a team
    # To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".
    # @param org [String] The organization name. The name is not case sensitive.
    # @param teams_create_request [TeamsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FullTeam]
    def teams_create(org, teams_create_request, opts = {})
      data, _status_code, _headers = teams_create_with_http_info(org, teams_create_request, opts)
      data
    end

    # Create a team
    # To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param teams_create_request [TeamsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullTeam, Integer, Hash)>] FullTeam data, response status code and response headers
    def teams_create_with_http_info(org, teams_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_create ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_create"
      end
      # verify the required parameter 'teams_create_request' is set
      if @api_client.config.client_side_validation && teams_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_request' when calling TeamsApi.teams_create"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FullTeam'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a discussion comment
    # Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussionComment]
    def teams_create_discussion_comment_in_org(org, team_slug, discussion_number, teams_create_discussion_comment_in_org_request, opts = {})
      data, _status_code, _headers = teams_create_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, teams_create_discussion_comment_in_org_request, opts)
      data
    end

    # Create a discussion comment
    # Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussionComment, Integer, Hash)>] TeamDiscussionComment data, response status code and response headers
    def teams_create_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, teams_create_discussion_comment_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_create_discussion_comment_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_create_discussion_comment_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_create_discussion_comment_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_create_discussion_comment_in_org"
      end
      # verify the required parameter 'teams_create_discussion_comment_in_org_request' is set
      if @api_client.config.client_side_validation && teams_create_discussion_comment_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_discussion_comment_in_org_request' when calling TeamsApi.teams_create_discussion_comment_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_discussion_comment_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussionComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_create_discussion_comment_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_create_discussion_comment_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussionComment]
    def teams_create_discussion_comment_legacy(team_id, discussion_number, teams_create_discussion_comment_in_org_request, opts = {})
      data, _status_code, _headers = teams_create_discussion_comment_legacy_with_http_info(team_id, discussion_number, teams_create_discussion_comment_in_org_request, opts)
      data
    end

    # Create a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussionComment, Integer, Hash)>] TeamDiscussionComment data, response status code and response headers
    def teams_create_discussion_comment_legacy_with_http_info(team_id, discussion_number, teams_create_discussion_comment_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_create_discussion_comment_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_create_discussion_comment_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_create_discussion_comment_legacy"
      end
      # verify the required parameter 'teams_create_discussion_comment_in_org_request' is set
      if @api_client.config.client_side_validation && teams_create_discussion_comment_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_discussion_comment_in_org_request' when calling TeamsApi.teams_create_discussion_comment_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/comments'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_discussion_comment_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussionComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_create_discussion_comment_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_create_discussion_comment_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a discussion
    # Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param teams_create_discussion_in_org_request [TeamsCreateDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussion]
    def teams_create_discussion_in_org(org, team_slug, teams_create_discussion_in_org_request, opts = {})
      data, _status_code, _headers = teams_create_discussion_in_org_with_http_info(org, team_slug, teams_create_discussion_in_org_request, opts)
      data
    end

    # Create a discussion
    # Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param teams_create_discussion_in_org_request [TeamsCreateDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussion, Integer, Hash)>] TeamDiscussion data, response status code and response headers
    def teams_create_discussion_in_org_with_http_info(org, team_slug, teams_create_discussion_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_create_discussion_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_create_discussion_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_create_discussion_in_org"
      end
      # verify the required parameter 'teams_create_discussion_in_org_request' is set
      if @api_client.config.client_side_validation && teams_create_discussion_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_discussion_in_org_request' when calling TeamsApi.teams_create_discussion_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_discussion_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_create_discussion_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_create_discussion_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param team_id [Integer] The unique identifier of the team.
    # @param teams_create_discussion_in_org_request [TeamsCreateDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussion]
    def teams_create_discussion_legacy(team_id, teams_create_discussion_in_org_request, opts = {})
      data, _status_code, _headers = teams_create_discussion_legacy_with_http_info(team_id, teams_create_discussion_in_org_request, opts)
      data
    end

    # Create a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create a discussion&#x60;](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param team_id [Integer] The unique identifier of the team.
    # @param teams_create_discussion_in_org_request [TeamsCreateDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussion, Integer, Hash)>] TeamDiscussion data, response status code and response headers
    def teams_create_discussion_legacy_with_http_info(team_id, teams_create_discussion_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_create_discussion_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_create_discussion_legacy"
      end
      # verify the required parameter 'teams_create_discussion_in_org_request' is set
      if @api_client.config.client_side_validation && teams_create_discussion_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_discussion_in_org_request' when calling TeamsApi.teams_create_discussion_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_discussion_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_create_discussion_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_create_discussion_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update IdP group connections
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param teams_create_or_update_idp_group_connections_in_org_request [TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GroupMapping]
    def teams_create_or_update_idp_group_connections_in_org(org, team_slug, teams_create_or_update_idp_group_connections_in_org_request, opts = {})
      data, _status_code, _headers = teams_create_or_update_idp_group_connections_in_org_with_http_info(org, team_slug, teams_create_or_update_idp_group_connections_in_org_request, opts)
      data
    end

    # Create or update IdP group connections
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty &#x60;groups&#x60; array will remove all connections for a team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param teams_create_or_update_idp_group_connections_in_org_request [TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMapping, Integer, Hash)>] GroupMapping data, response status code and response headers
    def teams_create_or_update_idp_group_connections_in_org_with_http_info(org, team_slug, teams_create_or_update_idp_group_connections_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_create_or_update_idp_group_connections_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_create_or_update_idp_group_connections_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_create_or_update_idp_group_connections_in_org"
      end
      # verify the required parameter 'teams_create_or_update_idp_group_connections_in_org_request' is set
      if @api_client.config.client_side_validation && teams_create_or_update_idp_group_connections_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_or_update_idp_group_connections_in_org_request' when calling TeamsApi.teams_create_or_update_idp_group_connections_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_or_update_idp_group_connections_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupMapping'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_create_or_update_idp_group_connections_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_create_or_update_idp_group_connections_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update IdP group connections (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param teams_create_or_update_idp_group_connections_legacy_request [TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GroupMapping]
    def teams_create_or_update_idp_group_connections_legacy(team_id, teams_create_or_update_idp_group_connections_legacy_request, opts = {})
      data, _status_code, _headers = teams_create_or_update_idp_group_connections_legacy_with_http_info(team_id, teams_create_or_update_idp_group_connections_legacy_request, opts)
      data
    end

    # Create or update IdP group connections (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create or update IdP group connections&#x60;](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty &#x60;groups&#x60; array will remove all connections for a team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param teams_create_or_update_idp_group_connections_legacy_request [TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMapping, Integer, Hash)>] GroupMapping data, response status code and response headers
    def teams_create_or_update_idp_group_connections_legacy_with_http_info(team_id, teams_create_or_update_idp_group_connections_legacy_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_create_or_update_idp_group_connections_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_create_or_update_idp_group_connections_legacy"
      end
      # verify the required parameter 'teams_create_or_update_idp_group_connections_legacy_request' is set
      if @api_client.config.client_side_validation && teams_create_or_update_idp_group_connections_legacy_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_or_update_idp_group_connections_legacy_request' when calling TeamsApi.teams_create_or_update_idp_group_connections_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/team-sync/group-mappings'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_or_update_idp_group_connections_legacy_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupMapping'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_create_or_update_idp_group_connections_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_create_or_update_idp_group_connections_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a discussion comment
    # Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_delete_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, opts = {})
      teams_delete_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, opts)
      nil
    end

    # Delete a discussion comment
    # Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_delete_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_delete_discussion_comment_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_delete_discussion_comment_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_delete_discussion_comment_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_delete_discussion_comment_in_org"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling TeamsApi.teams_delete_discussion_comment_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_delete_discussion_comment_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_delete_discussion_comment_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_delete_discussion_comment_legacy(team_id, discussion_number, comment_number, opts = {})
      teams_delete_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, opts)
      nil
    end

    # Delete a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_delete_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_delete_discussion_comment_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_delete_discussion_comment_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_delete_discussion_comment_legacy"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling TeamsApi.teams_delete_discussion_comment_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_delete_discussion_comment_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_delete_discussion_comment_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a discussion
    # Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_delete_discussion_in_org(org, team_slug, discussion_number, opts = {})
      teams_delete_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts)
      nil
    end

    # Delete a discussion
    # Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_delete_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_delete_discussion_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_delete_discussion_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_delete_discussion_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_delete_discussion_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_delete_discussion_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_delete_discussion_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_delete_discussion_legacy(team_id, discussion_number, opts = {})
      teams_delete_discussion_legacy_with_http_info(team_id, discussion_number, opts)
      nil
    end

    # Delete a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Delete a discussion&#x60;](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_delete_discussion_legacy_with_http_info(team_id, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_delete_discussion_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_delete_discussion_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_delete_discussion_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_delete_discussion_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_delete_discussion_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a team
    # To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_delete_in_org(org, team_slug, opts = {})
      teams_delete_in_org_with_http_info(org, team_slug, opts)
      nil
    end

    # Delete a team
    # To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_delete_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_delete_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_delete_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_delete_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_delete_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_delete_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_delete_legacy(team_id, opts = {})
      teams_delete_legacy_with_http_info(team_id, opts)
      nil
    end

    # Delete a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_delete_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_delete_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_delete_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_delete_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_delete_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an external group
    # Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param group_id [Integer] The unique identifier of the group.
    # @param [Hash] opts the optional parameters
    # @return [ExternalGroup]
    def teams_external_idp_group_info_for_org(org, group_id, opts = {})
      data, _status_code, _headers = teams_external_idp_group_info_for_org_with_http_info(org, group_id, opts)
      data
    end

    # Get an external group
    # Displays information about the specific group&#39;s usage.  Provides a list of the group&#39;s external members as well as a list of teams that this group is connected to.  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products)\&quot; in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param group_id [Integer] The unique identifier of the group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalGroup, Integer, Hash)>] ExternalGroup data, response status code and response headers
    def teams_external_idp_group_info_for_org_with_http_info(org, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_external_idp_group_info_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_external_idp_group_info_for_org"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling TeamsApi.teams_external_idp_group_info_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/external-group/{group_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_external_idp_group_info_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_external_idp_group_info_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a team by name
    # Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [FullTeam]
    def teams_get_by_name(org, team_slug, opts = {})
      data, _status_code, _headers = teams_get_by_name_with_http_info(org, team_slug, opts)
      data
    end

    # Get a team by name
    # Gets a team using the team&#39;s &#x60;slug&#x60;. GitHub generates the &#x60;slug&#x60; from the team &#x60;name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullTeam, Integer, Hash)>] FullTeam data, response status code and response headers
    def teams_get_by_name_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_by_name ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_get_by_name"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_get_by_name"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FullTeam'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_by_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a discussion comment
    # Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussionComment]
    def teams_get_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, opts = {})
      data, _status_code, _headers = teams_get_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, opts)
      data
    end

    # Get a discussion comment
    # Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussionComment, Integer, Hash)>] TeamDiscussionComment data, response status code and response headers
    def teams_get_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_discussion_comment_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_get_discussion_comment_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_get_discussion_comment_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_get_discussion_comment_in_org"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling TeamsApi.teams_get_discussion_comment_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussionComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_discussion_comment_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_discussion_comment_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussionComment]
    def teams_get_discussion_comment_legacy(team_id, discussion_number, comment_number, opts = {})
      data, _status_code, _headers = teams_get_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, opts)
      data
    end

    # Get a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussionComment, Integer, Hash)>] TeamDiscussionComment data, response status code and response headers
    def teams_get_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_discussion_comment_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_get_discussion_comment_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_get_discussion_comment_legacy"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling TeamsApi.teams_get_discussion_comment_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussionComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_discussion_comment_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_discussion_comment_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a discussion
    # Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussion]
    def teams_get_discussion_in_org(org, team_slug, discussion_number, opts = {})
      data, _status_code, _headers = teams_get_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts)
      data
    end

    # Get a discussion
    # Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussion, Integer, Hash)>] TeamDiscussion data, response status code and response headers
    def teams_get_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_discussion_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_get_discussion_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_get_discussion_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_get_discussion_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_discussion_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_discussion_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussion]
    def teams_get_discussion_legacy(team_id, discussion_number, opts = {})
      data, _status_code, _headers = teams_get_discussion_legacy_with_http_info(team_id, discussion_number, opts)
      data
    end

    # Get a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussion, Integer, Hash)>] TeamDiscussion data, response status code and response headers
    def teams_get_discussion_legacy_with_http_info(team_id, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_discussion_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_get_discussion_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_get_discussion_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_discussion_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_discussion_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @return [FullTeam]
    def teams_get_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_get_legacy_with_http_info(team_id, opts)
      data
    end

    # Get a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullTeam, Integer, Hash)>] FullTeam data, response status code and response headers
    def teams_get_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_get_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FullTeam'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get team member (Legacy)
    # The \"Get team member\" endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_get_member_legacy(team_id, username, opts = {})
      teams_get_member_legacy_with_http_info(team_id, username, opts)
      nil
    end

    # Get team member (Legacy)
    # The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_get_member_legacy_with_http_info(team_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_member_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_get_member_legacy"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_get_member_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/members/{username}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_member_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_member_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get team membership for a user
    # Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.  **Note:** The response contains the `state` of the membership and the member's `role`.  The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [TeamMembership]
    def teams_get_membership_for_user_in_org(org, team_slug, username, opts = {})
      data, _status_code, _headers = teams_get_membership_for_user_in_org_with_http_info(org, team_slug, username, opts)
      data
    end

    # Get team membership for a user
    # Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamMembership, Integer, Hash)>] TeamMembership data, response status code and response headers
    def teams_get_membership_for_user_in_org_with_http_info(org, team_slug, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_membership_for_user_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_get_membership_for_user_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_get_membership_for_user_in_org"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_get_membership_for_user_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/memberships/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_membership_for_user_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_membership_for_user_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get team membership for a user (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the `state` of the membership and the member's `role`.  The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [TeamMembership]
    def teams_get_membership_for_user_legacy(team_id, username, opts = {})
      data, _status_code, _headers = teams_get_membership_for_user_legacy_with_http_info(team_id, username, opts)
      data
    end

    # Get team membership for a user (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamMembership, Integer, Hash)>] TeamMembership data, response status code and response headers
    def teams_get_membership_for_user_legacy_with_http_info(team_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_get_membership_for_user_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_get_membership_for_user_legacy"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_get_membership_for_user_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/memberships/{username}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_get_membership_for_user_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_get_membership_for_user_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the connection between an external group and a team
    # Creates a connection between a team and an external group.  Only one external group can be linked to a team.  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param teams_link_external_idp_group_to_team_for_org_request [TeamsLinkExternalIdpGroupToTeamForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ExternalGroup]
    def teams_link_external_idp_group_to_team_for_org(org, team_slug, teams_link_external_idp_group_to_team_for_org_request, opts = {})
      data, _status_code, _headers = teams_link_external_idp_group_to_team_for_org_with_http_info(org, team_slug, teams_link_external_idp_group_to_team_for_org_request, opts)
      data
    end

    # Update the connection between an external group and a team
    # Creates a connection between a team and an external group.  Only one external group can be linked to a team.  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products)\&quot; in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param teams_link_external_idp_group_to_team_for_org_request [TeamsLinkExternalIdpGroupToTeamForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalGroup, Integer, Hash)>] ExternalGroup data, response status code and response headers
    def teams_link_external_idp_group_to_team_for_org_with_http_info(org, team_slug, teams_link_external_idp_group_to_team_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_link_external_idp_group_to_team_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_link_external_idp_group_to_team_for_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_link_external_idp_group_to_team_for_org"
      end
      # verify the required parameter 'teams_link_external_idp_group_to_team_for_org_request' is set
      if @api_client.config.client_side_validation && teams_link_external_idp_group_to_team_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_link_external_idp_group_to_team_for_org_request' when calling TeamsApi.teams_link_external_idp_group_to_team_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/external-groups'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_link_external_idp_group_to_team_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_link_external_idp_group_to_team_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_link_external_idp_group_to_team_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teams
    # Lists all teams in an organization that are visible to the authenticated user.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Team>]
    def teams_list(org, opts = {})
      data, _status_code, _headers = teams_list_with_http_info(org, opts)
      data
    end

    # List teams
    # Lists all teams in an organization that are visible to the authenticated user.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def teams_list_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List child teams
    # Lists the child teams of the team specified by `{team_slug}`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Team>]
    def teams_list_child_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_child_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # List child teams
    # Lists the child teams of the team specified by &#x60;{team_slug}&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/teams&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def teams_list_child_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_child_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_child_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_child_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/teams'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_child_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_child_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List child teams (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Team>]
    def teams_list_child_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_list_child_legacy_with_http_info(team_id, opts)
      data
    end

    # List child teams (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List child teams&#x60;](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def teams_list_child_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_child_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_child_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/teams'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_child_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_child_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List discussion comments
    # List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<TeamDiscussionComment>]
    def teams_list_discussion_comments_in_org(org, team_slug, discussion_number, opts = {})
      data, _status_code, _headers = teams_list_discussion_comments_in_org_with_http_info(org, team_slug, discussion_number, opts)
      data
    end

    # List discussion comments
    # List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<TeamDiscussionComment>, Integer, Hash)>] Array<TeamDiscussionComment> data, response status code and response headers
    def teams_list_discussion_comments_in_org_with_http_info(org, team_slug, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_discussion_comments_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_discussion_comments_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_discussion_comments_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_list_discussion_comments_in_org"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamDiscussionComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_discussion_comments_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_discussion_comments_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List discussion comments (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<TeamDiscussionComment>]
    def teams_list_discussion_comments_legacy(team_id, discussion_number, opts = {})
      data, _status_code, _headers = teams_list_discussion_comments_legacy_with_http_info(team_id, discussion_number, opts)
      data
    end

    # List discussion comments (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<TeamDiscussionComment>, Integer, Hash)>] Array<TeamDiscussionComment> data, response status code and response headers
    def teams_list_discussion_comments_legacy_with_http_info(team_id, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_discussion_comments_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_discussion_comments_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_list_discussion_comments_legacy"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/comments'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamDiscussionComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_discussion_comments_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_discussion_comments_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List discussions
    # List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :pinned Pinned discussions only filter
    # @return [Array<TeamDiscussion>]
    def teams_list_discussions_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_discussions_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # List discussions
    # List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :pinned Pinned discussions only filter
    # @return [Array<(Array<TeamDiscussion>, Integer, Hash)>] Array<TeamDiscussion> data, response status code and response headers
    def teams_list_discussions_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_discussions_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_discussions_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_discussions_in_org"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pinned'] = opts[:'pinned'] if !opts[:'pinned'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamDiscussion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_discussions_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_discussions_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List discussions (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<TeamDiscussion>]
    def teams_list_discussions_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_list_discussions_legacy_with_http_info(team_id, opts)
      data
    end

    # List discussions (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List discussions&#x60;](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<TeamDiscussion>, Integer, Hash)>] Array<TeamDiscussion> data, response status code and response headers
    def teams_list_discussions_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_discussions_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_discussions_legacy"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamDiscussion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_discussions_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_discussions_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List external groups in an organization
    # Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page token
    # @option opts [String] :display_name Limits the list to groups containing the text in the group name
    # @return [ExternalGroups]
    def teams_list_external_idp_groups_for_org(org, opts = {})
      data, _status_code, _headers = teams_list_external_idp_groups_for_org_with_http_info(org, opts)
      data
    end

    # List external groups in an organization
    # Lists external groups available in an organization. You can query the groups using the &#x60;display_name&#x60; parameter, only groups with a &#x60;group_name&#x60; containing the text provided in the &#x60;display_name&#x60; parameter will be returned.  You can also limit your page results using the &#x60;per_page&#x60; parameter. GitHub generates a url-encoded &#x60;page&#x60; token using a cursor value for where the next page begins. For more information on cursor pagination, see \&quot;[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\&quot;  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products)\&quot; in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page token
    # @option opts [String] :display_name Limits the list to groups containing the text in the group name
    # @return [Array<(ExternalGroups, Integer, Hash)>] ExternalGroups data, response status code and response headers
    def teams_list_external_idp_groups_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_external_idp_groups_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_external_idp_groups_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/external-groups'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalGroups'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_external_idp_groups_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_external_idp_groups_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teams for the authenticated user
    # List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<FullTeam>]
    def teams_list_for_authenticated_user(opts = {})
      data, _status_code, _headers = teams_list_for_authenticated_user_with_http_info(opts)
      data
    end

    # List teams for the authenticated user
    # List all of the teams across all of the organizations to which the authenticated user belongs. This method requires &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<FullTeam>, Integer, Hash)>] Array<FullTeam> data, response status code and response headers
    def teams_list_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/teams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FullTeam>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IdP groups for a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups connected to a team on GitHub.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @return [GroupMapping]
    def teams_list_idp_groups_for_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_list_idp_groups_for_legacy_with_http_info(team_id, opts)
      data
    end

    # List IdP groups for a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List IdP groups for a team&#x60;](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups connected to a team on GitHub.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMapping, Integer, Hash)>] GroupMapping data, response status code and response headers
    def teams_list_idp_groups_for_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_idp_groups_for_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_idp_groups_for_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/team-sync/group-mappings'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupMapping'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_idp_groups_for_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_idp_groups_for_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IdP groups for an organization
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [String] :page Page token
    # @return [GroupMapping]
    def teams_list_idp_groups_for_org(org, opts = {})
      data, _status_code, _headers = teams_list_idp_groups_for_org_with_http_info(org, opts)
      data
    end

    # List IdP groups for an organization
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups available in an organization. You can limit your page results using the &#x60;per_page&#x60; parameter. GitHub generates a url-encoded &#x60;page&#x60; token using a cursor value for where the next page begins. For more information on cursor pagination, see \&quot;[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\&quot;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [String] :page Page token
    # @return [Array<(GroupMapping, Integer, Hash)>] GroupMapping data, response status code and response headers
    def teams_list_idp_groups_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_idp_groups_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_idp_groups_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/team-sync/groups'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupMapping'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_idp_groups_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_idp_groups_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IdP groups for a team
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups connected to a team on GitHub.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [GroupMapping]
    def teams_list_idp_groups_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_idp_groups_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # List IdP groups for a team
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups connected to a team on GitHub.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMapping, Integer, Hash)>] GroupMapping data, response status code and response headers
    def teams_list_idp_groups_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_idp_groups_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_idp_groups_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_idp_groups_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupMapping'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_idp_groups_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_idp_groups_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a connection between an external group and a team
    # Lists a connection between a team and an external group.  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [ExternalGroups]
    def teams_list_linked_external_idp_groups_to_team_for_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_linked_external_idp_groups_to_team_for_org_with_http_info(org, team_slug, opts)
      data
    end

    # List a connection between an external group and a team
    # Lists a connection between a team and an external group.  You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products)\&quot; in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalGroups, Integer, Hash)>] ExternalGroups data, response status code and response headers
    def teams_list_linked_external_idp_groups_to_team_for_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_linked_external_idp_groups_to_team_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_linked_external_idp_groups_to_team_for_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_linked_external_idp_groups_to_team_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/external-groups'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalGroups'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_linked_external_idp_groups_to_team_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_linked_external_idp_groups_to_team_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team members
    # Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role Filters members returned by their role in the team. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<SimpleUser1>]
    def teams_list_members_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_members_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # List team members
    # Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role Filters members returned by their role in the team. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<SimpleUser1>, Integer, Hash)>] Array<SimpleUser1> data, response status code and response headers
    def teams_list_members_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_members_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_members_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_members_in_org"
      end
      allowable_values = ["member", "maintainer", "all"]
      if @api_client.config.client_side_validation && opts[:'role'] && !allowable_values.include?(opts[:'role'])
        fail ArgumentError, "invalid value for \"role\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/members'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser1>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_members_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_members_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team members (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role Filters members returned by their role in the team. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<SimpleUser1>]
    def teams_list_members_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_list_members_legacy_with_http_info(team_id, opts)
      data
    end

    # List team members (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team members&#x60;](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role Filters members returned by their role in the team. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<SimpleUser1>, Integer, Hash)>] Array<SimpleUser1> data, response status code and response headers
    def teams_list_members_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_members_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_members_legacy"
      end
      allowable_values = ["member", "maintainer", "all"]
      if @api_client.config.client_side_validation && opts[:'role'] && !allowable_values.include?(opts[:'role'])
        fail ArgumentError, "invalid value for \"role\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/teams/{team_id}/members'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser1>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_members_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_members_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pending team invitations
    # The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<OrganizationInvitation>]
    def teams_list_pending_invitations_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_pending_invitations_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # List pending team invitations
    # The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, &#x60;hiring_manager&#x60;, or &#x60;reinstate&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/invitations&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<OrganizationInvitation>, Integer, Hash)>] Array<OrganizationInvitation> data, response status code and response headers
    def teams_list_pending_invitations_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_pending_invitations_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_pending_invitations_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_pending_invitations_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/invitations'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationInvitation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_pending_invitations_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_pending_invitations_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pending team invitations (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.  The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<OrganizationInvitation>]
    def teams_list_pending_invitations_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_list_pending_invitations_legacy_with_http_info(team_id, opts)
      data
    end

    # List pending team invitations (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List pending team invitations&#x60;](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.  The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, &#x60;hiring_manager&#x60;, or &#x60;reinstate&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<OrganizationInvitation>, Integer, Hash)>] Array<OrganizationInvitation> data, response status code and response headers
    def teams_list_pending_invitations_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_pending_invitations_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_pending_invitations_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/invitations'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationInvitation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_pending_invitations_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_pending_invitations_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team projects
    # Lists the organization projects for a team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<TeamProject>]
    def teams_list_projects_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_projects_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # List team projects
    # Lists the organization projects for a team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<TeamProject>, Integer, Hash)>] Array<TeamProject> data, response status code and response headers
    def teams_list_projects_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_projects_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_projects_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_projects_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/projects'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamProject>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_projects_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_projects_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team projects (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<TeamProject>]
    def teams_list_projects_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_list_projects_legacy_with_http_info(team_id, opts)
      data
    end

    # List team projects (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team projects&#x60;](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<TeamProject>, Integer, Hash)>] Array<TeamProject> data, response status code and response headers
    def teams_list_projects_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_projects_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_projects_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/projects'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamProject>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_projects_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_projects_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team repositories
    # Lists a team's repositories visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<MinimalRepository>]
    def teams_list_repos_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_list_repos_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # List team repositories
    # Lists a team&#39;s repositories visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<MinimalRepository>, Integer, Hash)>] Array<MinimalRepository> data, response status code and response headers
    def teams_list_repos_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_repos_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_list_repos_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_list_repos_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/repos'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MinimalRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_repos_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_repos_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team repositories (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<MinimalRepository>]
    def teams_list_repos_legacy(team_id, opts = {})
      data, _status_code, _headers = teams_list_repos_legacy_with_http_info(team_id, opts)
      data
    end

    # List team repositories (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
    # @param team_id [Integer] The unique identifier of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<MinimalRepository>, Integer, Hash)>] Array<MinimalRepository> data, response status code and response headers
    def teams_list_repos_legacy_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_list_repos_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_list_repos_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/repos'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MinimalRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_list_repos_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_list_repos_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove team member (Legacy)
    # The \"Remove team member\" endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_remove_member_legacy(team_id, username, opts = {})
      teams_remove_member_legacy_with_http_info(team_id, username, opts)
      nil
    end

    # Remove team member (Legacy)
    # The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_remove_member_legacy_with_http_info(team_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_remove_member_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_remove_member_legacy"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_remove_member_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/members/{username}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_remove_member_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_remove_member_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove team membership for a user
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_remove_membership_for_user_in_org(org, team_slug, username, opts = {})
      teams_remove_membership_for_user_in_org_with_http_info(org, team_slug, username, opts)
      nil
    end

    # Remove team membership for a user
    # Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_remove_membership_for_user_in_org_with_http_info(org, team_slug, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_remove_membership_for_user_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_remove_membership_for_user_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_remove_membership_for_user_in_org"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_remove_membership_for_user_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/memberships/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_remove_membership_for_user_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_remove_membership_for_user_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove team membership for a user (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_remove_membership_for_user_legacy(team_id, username, opts = {})
      teams_remove_membership_for_user_legacy_with_http_info(team_id, username, opts)
      nil
    end

    # Remove team membership for a user (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
    # @param team_id [Integer] The unique identifier of the team.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_remove_membership_for_user_legacy_with_http_info(team_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_remove_membership_for_user_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_remove_membership_for_user_legacy"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling TeamsApi.teams_remove_membership_for_user_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/memberships/{username}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_remove_membership_for_user_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_remove_membership_for_user_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a project from a team
    # Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_remove_project_in_org(org, team_slug, project_id, opts = {})
      teams_remove_project_in_org_with_http_info(org, team_slug, project_id, opts)
      nil
    end

    # Remove a project from a team
    # Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_remove_project_in_org_with_http_info(org, team_slug, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_remove_project_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_remove_project_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_remove_project_in_org"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TeamsApi.teams_remove_project_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_remove_project_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_remove_project_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a project from a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
    # @param team_id [Integer] The unique identifier of the team.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_remove_project_legacy(team_id, project_id, opts = {})
      teams_remove_project_legacy_with_http_info(team_id, project_id, opts)
      nil
    end

    # Remove a project from a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
    # @param team_id [Integer] The unique identifier of the team.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_remove_project_legacy_with_http_info(team_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_remove_project_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_remove_project_legacy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TeamsApi.teams_remove_project_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/projects/{project_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_remove_project_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_remove_project_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a repository from a team
    # If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_remove_repo_in_org(org, team_slug, owner, repo, opts = {})
      teams_remove_repo_in_org_with_http_info(org, team_slug, owner, repo, opts)
      nil
    end

    # Remove a repository from a team
    # If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_remove_repo_in_org_with_http_info(org, team_slug, owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_remove_repo_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_remove_repo_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_remove_repo_in_org"
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling TeamsApi.teams_remove_repo_in_org"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling TeamsApi.teams_remove_repo_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_remove_repo_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_remove_repo_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a repository from a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_remove_repo_legacy(team_id, owner, repo, opts = {})
      teams_remove_repo_legacy_with_http_info(team_id, owner, repo, opts)
      nil
    end

    # Remove a repository from a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
    # @param team_id [Integer] The unique identifier of the team.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_remove_repo_legacy_with_http_info(team_id, owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_remove_repo_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_remove_repo_legacy"
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling TeamsApi.teams_remove_repo_legacy"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling TeamsApi.teams_remove_repo_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/repos/{owner}/{repo}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_remove_repo_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_remove_repo_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove the connection between an external group and a team
    # Deletes a connection between a team and an external group.  You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def teams_unlink_external_idp_group_from_team_for_org(org, team_slug, opts = {})
      teams_unlink_external_idp_group_from_team_for_org_with_http_info(org, team_slug, opts)
      nil
    end

    # Remove the connection between an external group and a team
    # Deletes a connection between a team and an external group.  You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def teams_unlink_external_idp_group_from_team_for_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_unlink_external_idp_group_from_team_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_unlink_external_idp_group_from_team_for_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_unlink_external_idp_group_from_team_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/external-groups'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_unlink_external_idp_group_from_team_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_unlink_external_idp_group_from_team_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a discussion comment
    # Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussionComment]
    def teams_update_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, teams_create_discussion_comment_in_org_request, opts = {})
      data, _status_code, _headers = teams_update_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, teams_create_discussion_comment_in_org_request, opts)
      data
    end

    # Update a discussion comment
    # Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussionComment, Integer, Hash)>] TeamDiscussionComment data, response status code and response headers
    def teams_update_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, teams_create_discussion_comment_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_update_discussion_comment_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_update_discussion_comment_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_update_discussion_comment_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_update_discussion_comment_in_org"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling TeamsApi.teams_update_discussion_comment_in_org"
      end
      # verify the required parameter 'teams_create_discussion_comment_in_org_request' is set
      if @api_client.config.client_side_validation && teams_create_discussion_comment_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_discussion_comment_in_org_request' when calling TeamsApi.teams_update_discussion_comment_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_discussion_comment_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussionComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_update_discussion_comment_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_update_discussion_comment_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TeamDiscussionComment]
    def teams_update_discussion_comment_legacy(team_id, discussion_number, comment_number, teams_create_discussion_comment_in_org_request, opts = {})
      data, _status_code, _headers = teams_update_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, teams_create_discussion_comment_in_org_request, opts)
      data
    end

    # Update a discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param teams_create_discussion_comment_in_org_request [TeamsCreateDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamDiscussionComment, Integer, Hash)>] TeamDiscussionComment data, response status code and response headers
    def teams_update_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, teams_create_discussion_comment_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_update_discussion_comment_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_update_discussion_comment_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_update_discussion_comment_legacy"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling TeamsApi.teams_update_discussion_comment_legacy"
      end
      # verify the required parameter 'teams_create_discussion_comment_in_org_request' is set
      if @api_client.config.client_side_validation && teams_create_discussion_comment_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_create_discussion_comment_in_org_request' when calling TeamsApi.teams_update_discussion_comment_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_create_discussion_comment_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussionComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_update_discussion_comment_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_update_discussion_comment_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a discussion
    # Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsUpdateDiscussionInOrgRequest] :teams_update_discussion_in_org_request 
    # @return [TeamDiscussion]
    def teams_update_discussion_in_org(org, team_slug, discussion_number, opts = {})
      data, _status_code, _headers = teams_update_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts)
      data
    end

    # Update a discussion
    # Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsUpdateDiscussionInOrgRequest] :teams_update_discussion_in_org_request 
    # @return [Array<(TeamDiscussion, Integer, Hash)>] TeamDiscussion data, response status code and response headers
    def teams_update_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_update_discussion_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_update_discussion_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_update_discussion_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_update_discussion_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_update_discussion_in_org_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_update_discussion_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_update_discussion_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsUpdateDiscussionInOrgRequest] :teams_update_discussion_in_org_request 
    # @return [TeamDiscussion]
    def teams_update_discussion_legacy(team_id, discussion_number, opts = {})
      data, _status_code, _headers = teams_update_discussion_legacy_with_http_info(team_id, discussion_number, opts)
      data
    end

    # Update a discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsUpdateDiscussionInOrgRequest] :teams_update_discussion_in_org_request 
    # @return [Array<(TeamDiscussion, Integer, Hash)>] TeamDiscussion data, response status code and response headers
    def teams_update_discussion_legacy_with_http_info(team_id, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_update_discussion_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_update_discussion_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling TeamsApi.teams_update_discussion_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_update_discussion_in_org_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TeamDiscussion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_update_discussion_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_update_discussion_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a team
    # To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsUpdateInOrgRequest] :teams_update_in_org_request 
    # @return [FullTeam]
    def teams_update_in_org(org, team_slug, opts = {})
      data, _status_code, _headers = teams_update_in_org_with_http_info(org, team_slug, opts)
      data
    end

    # Update a team
    # To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamsUpdateInOrgRequest] :teams_update_in_org_request 
    # @return [Array<(FullTeam, Integer, Hash)>] FullTeam data, response status code and response headers
    def teams_update_in_org_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_update_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling TeamsApi.teams_update_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling TeamsApi.teams_update_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teams_update_in_org_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'FullTeam'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_update_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_update_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
    # @param team_id [Integer] The unique identifier of the team.
    # @param teams_update_legacy_request [TeamsUpdateLegacyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FullTeam]
    def teams_update_legacy(team_id, teams_update_legacy_request, opts = {})
      data, _status_code, _headers = teams_update_legacy_with_http_info(team_id, teams_update_legacy_request, opts)
      data
    end

    # Update a team (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
    # @param team_id [Integer] The unique identifier of the team.
    # @param teams_update_legacy_request [TeamsUpdateLegacyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullTeam, Integer, Hash)>] FullTeam data, response status code and response headers
    def teams_update_legacy_with_http_info(team_id, teams_update_legacy_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.teams_update_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.teams_update_legacy"
      end
      # verify the required parameter 'teams_update_legacy_request' is set
      if @api_client.config.client_side_validation && teams_update_legacy_request.nil?
        fail ArgumentError, "Missing the required parameter 'teams_update_legacy_request' when calling TeamsApi.teams_update_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(teams_update_legacy_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FullTeam'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TeamsApi.teams_update_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#teams_update_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
