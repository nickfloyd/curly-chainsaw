=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class MetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get GitHub meta information
    # Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\"  **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
    # @param [Hash] opts the optional parameters
    # @return [ApiOverview]
    def meta_get(opts = {})
      data, _status_code, _headers = meta_get_with_http_info(opts)
      data
    end

    # Get GitHub meta information
    # Returns meta information about GitHub, including a list of GitHub&#39;s IP addresses. For more information, see \&quot;[About GitHub&#39;s IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\&quot;  **Note:** The IP addresses shown in the documentation&#39;s response are only example values. You must always query the API directly to get the latest list of IP addresses.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiOverview, Integer, Hash)>] ApiOverview data, response status code and response headers
    def meta_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaApi.meta_get ...'
      end
      # resource path
      local_var_path = '/meta'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiOverview'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MetaApi.meta_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaApi#meta_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Octocat
    # Get the octocat as ASCII art
    # @param [Hash] opts the optional parameters
    # @option opts [String] :s The words to show in Octocat&#39;s speech bubble
    # @return [String]
    def meta_get_octocat(opts = {})
      data, _status_code, _headers = meta_get_octocat_with_http_info(opts)
      data
    end

    # Get Octocat
    # Get the octocat as ASCII art
    # @param [Hash] opts the optional parameters
    # @option opts [String] :s The words to show in Octocat&#39;s speech bubble
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def meta_get_octocat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaApi.meta_get_octocat ...'
      end
      # resource path
      local_var_path = '/octocat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'s'] = opts[:'s'] if !opts[:'s'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octocat-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MetaApi.meta_get_octocat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaApi#meta_get_octocat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Zen of GitHub
    # Get a random sentence from the Zen of GitHub
    # @param [Hash] opts the optional parameters
    # @return [String]
    def meta_get_zen(opts = {})
      data, _status_code, _headers = meta_get_zen_with_http_info(opts)
      data
    end

    # Get the Zen of GitHub
    # Get a random sentence from the Zen of GitHub
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def meta_get_zen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaApi.meta_get_zen ...'
      end
      # resource path
      local_var_path = '/zen'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MetaApi.meta_get_zen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaApi#meta_get_zen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GitHub API Root
    # Get Hypermedia links to resources accessible in GitHub's REST API
    # @param [Hash] opts the optional parameters
    # @return [MetaRoot200Response]
    def meta_root(opts = {})
      data, _status_code, _headers = meta_root_with_http_info(opts)
      data
    end

    # GitHub API Root
    # Get Hypermedia links to resources accessible in GitHub&#39;s REST API
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetaRoot200Response, Integer, Hash)>] MetaRoot200Response data, response status code and response headers
    def meta_root_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaApi.meta_root ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaRoot200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MetaApi.meta_root",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaApi#meta_root\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
