=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class CodesOfConductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all codes of conduct
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<CodeOfConduct>]
    def codes_of_conduct_get_all_codes_of_conduct(opts = {})
      data, _status_code, _headers = codes_of_conduct_get_all_codes_of_conduct_with_http_info(opts)
      data
    end

    # Get all codes of conduct
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CodeOfConduct>, Integer, Hash)>] Array<CodeOfConduct> data, response status code and response headers
    def codes_of_conduct_get_all_codes_of_conduct_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodesOfConductApi.codes_of_conduct_get_all_codes_of_conduct ...'
      end
      # resource path
      local_var_path = '/codes_of_conduct'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeOfConduct>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodesOfConductApi.codes_of_conduct_get_all_codes_of_conduct",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodesOfConductApi#codes_of_conduct_get_all_codes_of_conduct\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a code of conduct
    # 
    # @param key [String] 
    # @param [Hash] opts the optional parameters
    # @return [CodeOfConduct]
    def codes_of_conduct_get_conduct_code(key, opts = {})
      data, _status_code, _headers = codes_of_conduct_get_conduct_code_with_http_info(key, opts)
      data
    end

    # Get a code of conduct
    # 
    # @param key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeOfConduct, Integer, Hash)>] CodeOfConduct data, response status code and response headers
    def codes_of_conduct_get_conduct_code_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodesOfConductApi.codes_of_conduct_get_conduct_code ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling CodesOfConductApi.codes_of_conduct_get_conduct_code"
      end
      # resource path
      local_var_path = '/codes_of_conduct/{key}'.sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeOfConduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodesOfConductApi.codes_of_conduct_get_conduct_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodesOfConductApi#codes_of_conduct_get_conduct_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
