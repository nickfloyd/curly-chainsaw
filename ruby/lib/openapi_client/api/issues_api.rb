=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class IssuesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add assignees to an issue
    # Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesAddAssigneesRequest] :issues_add_assignees_request 
    # @return [Issue]
    def issues_add_assignees(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_add_assignees_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # Add assignees to an issue
    # Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesAddAssigneesRequest] :issues_add_assignees_request 
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issues_add_assignees_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_add_assignees ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_add_assignees"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_add_assignees"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_add_assignees"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/assignees'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_add_assignees_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_add_assignees",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_add_assignees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add labels to an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesAddLabelsRequest] :issues_add_labels_request 
    # @return [Array<Label>]
    def issues_add_labels(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_add_labels_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # Add labels to an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesAddLabelsRequest] :issues_add_labels_request 
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issues_add_labels_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_add_labels ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_add_labels"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_add_labels"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_add_labels"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_add_labels_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_add_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_add_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if a user can be assigned
    # Checks if a user has permission to be assigned to an issue in this repository.  If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.  Otherwise a `404` status code is returned.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param assignee [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issues_check_user_can_be_assigned(owner, repo, assignee, opts = {})
      issues_check_user_can_be_assigned_with_http_info(owner, repo, assignee, opts)
      nil
    end

    # Check if a user can be assigned
    # Checks if a user has permission to be assigned to an issue in this repository.  If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned.  Otherwise a &#x60;404&#x60; status code is returned.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param assignee [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issues_check_user_can_be_assigned_with_http_info(owner, repo, assignee, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_check_user_can_be_assigned ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_check_user_can_be_assigned"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_check_user_can_be_assigned"
      end
      # verify the required parameter 'assignee' is set
      if @api_client.config.client_side_validation && assignee.nil?
        fail ArgumentError, "Missing the required parameter 'assignee' when calling IssuesApi.issues_check_user_can_be_assigned"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/assignees/{assignee}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'assignee' + '}', CGI.escape(assignee.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_check_user_can_be_assigned",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_check_user_can_be_assigned\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an issue
    # Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issues_create_request [IssuesCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Issue]
    def issues_create(owner, repo, issues_create_request, opts = {})
      data, _status_code, _headers = issues_create_with_http_info(owner, repo, issues_create_request, opts)
      data
    end

    # Create an issue
    # Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a &#x60;410 Gone&#x60; status.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issues_create_request [IssuesCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issues_create_with_http_info(owner, repo, issues_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_create ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_create"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_create"
      end
      # verify the required parameter 'issues_create_request' is set
      if @api_client.config.client_side_validation && issues_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'issues_create_request' when calling IssuesApi.issues_create"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issues_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an issue comment
    # This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param issues_update_comment_request [IssuesUpdateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [IssueComment]
    def issues_create_comment(owner, repo, issue_number, issues_update_comment_request, opts = {})
      data, _status_code, _headers = issues_create_comment_with_http_info(owner, repo, issue_number, issues_update_comment_request, opts)
      data
    end

    # Create an issue comment
    # This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param issues_update_comment_request [IssuesUpdateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueComment, Integer, Hash)>] IssueComment data, response status code and response headers
    def issues_create_comment_with_http_info(owner, repo, issue_number, issues_update_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_create_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_create_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_create_comment"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_create_comment"
      end
      # verify the required parameter 'issues_update_comment_request' is set
      if @api_client.config.client_side_validation && issues_update_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'issues_update_comment_request' when calling IssuesApi.issues_create_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issues_update_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IssueComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_create_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_create_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issues_create_label_request [IssuesCreateLabelRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def issues_create_label(owner, repo, issues_create_label_request, opts = {})
      data, _status_code, _headers = issues_create_label_with_http_info(owner, repo, issues_create_label_request, opts)
      data
    end

    # Create a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issues_create_label_request [IssuesCreateLabelRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def issues_create_label_with_http_info(owner, repo, issues_create_label_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_create_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_create_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_create_label"
      end
      # verify the required parameter 'issues_create_label_request' is set
      if @api_client.config.client_side_validation && issues_create_label_request.nil?
        fail ArgumentError, "Missing the required parameter 'issues_create_label_request' when calling IssuesApi.issues_create_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issues_create_label_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_create_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_create_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issues_create_milestone_request [IssuesCreateMilestoneRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Milestone1]
    def issues_create_milestone(owner, repo, issues_create_milestone_request, opts = {})
      data, _status_code, _headers = issues_create_milestone_with_http_info(owner, repo, issues_create_milestone_request, opts)
      data
    end

    # Create a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issues_create_milestone_request [IssuesCreateMilestoneRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Milestone1, Integer, Hash)>] Milestone1 data, response status code and response headers
    def issues_create_milestone_with_http_info(owner, repo, issues_create_milestone_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_create_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_create_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_create_milestone"
      end
      # verify the required parameter 'issues_create_milestone_request' is set
      if @api_client.config.client_side_validation && issues_create_milestone_request.nil?
        fail ArgumentError, "Missing the required parameter 'issues_create_milestone_request' when calling IssuesApi.issues_create_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issues_create_milestone_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone1'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_create_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_create_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an issue comment
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issues_delete_comment(owner, repo, comment_id, opts = {})
      issues_delete_comment_with_http_info(owner, repo, comment_id, opts)
      nil
    end

    # Delete an issue comment
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issues_delete_comment_with_http_info(owner, repo, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_delete_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_delete_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_delete_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling IssuesApi.issues_delete_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{comment_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_delete_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issues_delete_label(owner, repo, name, opts = {})
      issues_delete_label_with_http_info(owner, repo, name, opts)
      nil
    end

    # Delete a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issues_delete_label_with_http_info(owner, repo, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_delete_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_delete_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_delete_label"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling IssuesApi.issues_delete_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_delete_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_delete_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issues_delete_milestone(owner, repo, milestone_number, opts = {})
      issues_delete_milestone_with_http_info(owner, repo, milestone_number, opts)
      nil
    end

    # Delete a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issues_delete_milestone_with_http_info(owner, repo, milestone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_delete_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_delete_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_delete_milestone"
      end
      # verify the required parameter 'milestone_number' is set
      if @api_client.config.client_side_validation && milestone_number.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_number' when calling IssuesApi.issues_delete_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones/{milestone_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'milestone_number' + '}', CGI.escape(milestone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_delete_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_delete_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an issue
    # The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @return [Issue]
    def issues_get(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_get_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # Get an issue
    # The API returns a [&#x60;301 Moved Permanently&#x60; status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a &#x60;404 Not Found&#x60; status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a &#x60;410 Gone&#x60; status. To receive webhook events for transferred and deleted issues, subscribe to the [&#x60;issues&#x60;](https://docs.github.com/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issues_get_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_get ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_get"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_get"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_get"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an issue comment
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [IssueComment]
    def issues_get_comment(owner, repo, comment_id, opts = {})
      data, _status_code, _headers = issues_get_comment_with_http_info(owner, repo, comment_id, opts)
      data
    end

    # Get an issue comment
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueComment, Integer, Hash)>] IssueComment data, response status code and response headers
    def issues_get_comment_with_http_info(owner, repo, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_get_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_get_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_get_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling IssuesApi.issues_get_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{comment_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_get_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an issue event
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param event_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [IssueEvent]
    def issues_get_event(owner, repo, event_id, opts = {})
      data, _status_code, _headers = issues_get_event_with_http_info(owner, repo, event_id, opts)
      data
    end

    # Get an issue event
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param event_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueEvent, Integer, Hash)>] IssueEvent data, response status code and response headers
    def issues_get_event_with_http_info(owner, repo, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_get_event ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_get_event"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_get_event"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling IssuesApi.issues_get_event"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/events/{event_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'event_id' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueEvent'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_get_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def issues_get_label(owner, repo, name, opts = {})
      data, _status_code, _headers = issues_get_label_with_http_info(owner, repo, name, opts)
      data
    end

    # Get a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def issues_get_label_with_http_info(owner, repo, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_get_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_get_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_get_label"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling IssuesApi.issues_get_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_get_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_get_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @return [Milestone1]
    def issues_get_milestone(owner, repo, milestone_number, opts = {})
      data, _status_code, _headers = issues_get_milestone_with_http_info(owner, repo, milestone_number, opts)
      data
    end

    # Get a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Milestone1, Integer, Hash)>] Milestone1 data, response status code and response headers
    def issues_get_milestone_with_http_info(owner, repo, milestone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_get_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_get_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_get_milestone"
      end
      # verify the required parameter 'milestone_number' is set
      if @api_client.config.client_side_validation && milestone_number.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_number' when calling IssuesApi.issues_get_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones/{milestone_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'milestone_number' + '}', CGI.escape(milestone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone1'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_get_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_get_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List issues assigned to the authenticated user
    # List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation. (default to 'assigned')
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Boolean] :collab 
    # @option opts [Boolean] :orgs 
    # @option opts [Boolean] :owned 
    # @option opts [Boolean] :pulls 
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Issue>]
    def issues_list(opts = {})
      data, _status_code, _headers = issues_list_with_http_info(opts)
      data
    end

    # List issues assigned to the authenticated user
    # List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the &#x60;filter&#x60; query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation. (default to 'assigned')
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Boolean] :collab 
    # @option opts [Boolean] :orgs 
    # @option opts [Boolean] :owned 
    # @option opts [Boolean] :pulls 
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Issue>, Integer, Hash)>] Array<Issue> data, response status code and response headers
    def issues_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list ...'
      end
      allowable_values = ["assigned", "created", "mentioned", "subscribed", "repos", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated", "comments"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/issues'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'labels'] = opts[:'labels'] if !opts[:'labels'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'collab'] = opts[:'collab'] if !opts[:'collab'].nil?
      query_params[:'orgs'] = opts[:'orgs'] if !opts[:'orgs'].nil?
      query_params[:'owned'] = opts[:'owned'] if !opts[:'owned'].nil?
      query_params[:'pulls'] = opts[:'pulls'] if !opts[:'pulls'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Issue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List assignees
    # Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<SimpleUser1>]
    def issues_list_assignees(owner, repo, opts = {})
      data, _status_code, _headers = issues_list_assignees_with_http_info(owner, repo, opts)
      data
    end

    # List assignees
    # Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<SimpleUser1>, Integer, Hash)>] Array<SimpleUser1> data, response status code and response headers
    def issues_list_assignees_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_assignees ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_assignees"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_assignees"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/assignees'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser1>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_assignees",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_assignees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List issue comments
    # Issue Comments are ordered by ascending ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<IssueComment>]
    def issues_list_comments(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_list_comments_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # List issue comments
    # Issue Comments are ordered by ascending ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<IssueComment>, Integer, Hash)>] Array<IssueComment> data, response status code and response headers
    def issues_list_comments_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_comments ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_comments"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_comments"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_list_comments"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<IssueComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List issue comments for a repository
    # By default, Issue Comments are ordered by ascending ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The property to sort the results by. &#x60;created&#x60; means when the repository was starred. &#x60;updated&#x60; means when the repository was last pushed to. (default to 'created')
    # @option opts [String] :direction Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter.
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<IssueComment>]
    def issues_list_comments_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = issues_list_comments_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List issue comments for a repository
    # By default, Issue Comments are ordered by ascending ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The property to sort the results by. &#x60;created&#x60; means when the repository was starred. &#x60;updated&#x60; means when the repository was last pushed to. (default to 'created')
    # @option opts [String] :direction Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter.
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<IssueComment>, Integer, Hash)>] Array<IssueComment> data, response status code and response headers
    def issues_list_comments_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_comments_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_comments_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_comments_for_repo"
      end
      allowable_values = ["created", "updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<IssueComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_comments_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_comments_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List issue events
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<IssueEventForIssue>]
    def issues_list_events(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_list_events_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # List issue events
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<IssueEventForIssue>, Integer, Hash)>] Array<IssueEventForIssue> data, response status code and response headers
    def issues_list_events_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_events ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_events"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_events"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_list_events"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/events'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<IssueEventForIssue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List issue events for a repository
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<IssueEvent>]
    def issues_list_events_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = issues_list_events_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List issue events for a repository
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<IssueEvent>, Integer, Hash)>] Array<IssueEvent> data, response status code and response headers
    def issues_list_events_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_events_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_events_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_events_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/events'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<IssueEvent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_events_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_events_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List timeline events for an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<TimelineEvent>]
    def issues_list_events_for_timeline(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_list_events_for_timeline_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # List timeline events for an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<TimelineEvent>, Integer, Hash)>] Array<TimelineEvent> data, response status code and response headers
    def issues_list_events_for_timeline_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_events_for_timeline ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_events_for_timeline"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_events_for_timeline"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_list_events_for_timeline"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/timeline'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TimelineEvent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_events_for_timeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_events_for_timeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user account issues assigned to the authenticated user
    # List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation. (default to 'assigned')
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Issue>]
    def issues_list_for_authenticated_user(opts = {})
      data, _status_code, _headers = issues_list_for_authenticated_user_with_http_info(opts)
      data
    end

    # List user account issues assigned to the authenticated user
    # List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation. (default to 'assigned')
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Issue>, Integer, Hash)>] Array<Issue> data, response status code and response headers
    def issues_list_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_for_authenticated_user ...'
      end
      allowable_values = ["assigned", "created", "mentioned", "subscribed", "repos", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated", "comments"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user/issues'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'labels'] = opts[:'labels'] if !opts[:'labels'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Issue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization issues assigned to the authenticated user
    # List issues in an organization assigned to the authenticated user.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation. (default to 'assigned')
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Issue>]
    def issues_list_for_org(org, opts = {})
      data, _status_code, _headers = issues_list_for_org_with_http_info(org, opts)
      data
    end

    # List organization issues assigned to the authenticated user
    # List issues in an organization assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Indicates which sorts of issues to return. &#x60;assigned&#x60; means issues assigned to you. &#x60;created&#x60; means issues created by you. &#x60;mentioned&#x60; means issues mentioning you. &#x60;subscribed&#x60; means issues you&#39;re subscribed to updates for. &#x60;all&#x60; or &#x60;repos&#x60; means all issues you can see, regardless of participation or creation. (default to 'assigned')
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Issue>, Integer, Hash)>] Array<Issue> data, response status code and response headers
    def issues_list_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling IssuesApi.issues_list_for_org"
      end
      allowable_values = ["assigned", "created", "mentioned", "subscribed", "repos", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated", "comments"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/issues'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'labels'] = opts[:'labels'] if !opts[:'labels'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Issue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository issues
    # List issues in a repository.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :milestone If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned.
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :assignee Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user.
    # @option opts [String] :creator The user that created the issue.
    # @option opts [String] :mentioned A user that&#39;s mentioned in the issue.
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Issue>]
    def issues_list_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = issues_list_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List repository issues
    # List issues in a repository.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :milestone If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned.
    # @option opts [String] :state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :assignee Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user.
    # @option opts [String] :creator The user that created the issue.
    # @option opts [String] :mentioned A user that&#39;s mentioned in the issue.
    # @option opts [String] :labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60;
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Issue>, Integer, Hash)>] Array<Issue> data, response status code and response headers
    def issues_list_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_for_repo"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated", "comments"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'milestone'] = opts[:'milestone'] if !opts[:'milestone'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'assignee'] = opts[:'assignee'] if !opts[:'assignee'].nil?
      query_params[:'creator'] = opts[:'creator'] if !opts[:'creator'].nil?
      query_params[:'mentioned'] = opts[:'mentioned'] if !opts[:'mentioned'].nil?
      query_params[:'labels'] = opts[:'labels'] if !opts[:'labels'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Issue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for issues in a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Label>]
    def issues_list_labels_for_milestone(owner, repo, milestone_number, opts = {})
      data, _status_code, _headers = issues_list_labels_for_milestone_with_http_info(owner, repo, milestone_number, opts)
      data
    end

    # List labels for issues in a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issues_list_labels_for_milestone_with_http_info(owner, repo, milestone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_labels_for_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_labels_for_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_labels_for_milestone"
      end
      # verify the required parameter 'milestone_number' is set
      if @api_client.config.client_side_validation && milestone_number.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_number' when calling IssuesApi.issues_list_labels_for_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones/{milestone_number}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'milestone_number' + '}', CGI.escape(milestone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_labels_for_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_labels_for_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for a repository
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Label>]
    def issues_list_labels_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = issues_list_labels_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List labels for a repository
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issues_list_labels_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_labels_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_labels_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_labels_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_labels_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_labels_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Label>]
    def issues_list_labels_on_issue(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_list_labels_on_issue_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # List labels for an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issues_list_labels_on_issue_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_labels_on_issue ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_labels_on_issue"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_labels_on_issue"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_list_labels_on_issue"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_labels_on_issue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_labels_on_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List milestones
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :sort What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (default to 'due_on')
    # @option opts [String] :direction The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (default to 'asc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Milestone1>]
    def issues_list_milestones(owner, repo, opts = {})
      data, _status_code, _headers = issues_list_milestones_with_http_info(owner, repo, opts)
      data
    end

    # List milestones
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [String] :sort What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (default to 'due_on')
    # @option opts [String] :direction The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (default to 'asc')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Milestone1>, Integer, Hash)>] Array<Milestone1> data, response status code and response headers
    def issues_list_milestones_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_list_milestones ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_list_milestones"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_list_milestones"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["due_on", "completeness"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Milestone1>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_list_milestones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_list_milestones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lock an issue
    # Users with push access can lock an issue or pull request's conversation.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesLockRequest] :issues_lock_request 
    # @return [nil]
    def issues_lock(owner, repo, issue_number, opts = {})
      issues_lock_with_http_info(owner, repo, issue_number, opts)
      nil
    end

    # Lock an issue
    # Users with push access can lock an issue or pull request&#39;s conversation.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesLockRequest] :issues_lock_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issues_lock_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_lock ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_lock"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_lock"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_lock"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/lock'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_lock_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_lock",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_lock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all labels from an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issues_remove_all_labels(owner, repo, issue_number, opts = {})
      issues_remove_all_labels_with_http_info(owner, repo, issue_number, opts)
      nil
    end

    # Remove all labels from an issue
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issues_remove_all_labels_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_remove_all_labels ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_remove_all_labels"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_remove_all_labels"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_remove_all_labels"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_remove_all_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_remove_all_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove assignees from an issue
    # Removes one or more assignees from an issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesRemoveAssigneesRequest] :issues_remove_assignees_request 
    # @return [Issue]
    def issues_remove_assignees(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_remove_assignees_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # Remove assignees from an issue
    # Removes one or more assignees from an issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesRemoveAssigneesRequest] :issues_remove_assignees_request 
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issues_remove_assignees_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_remove_assignees ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_remove_assignees"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_remove_assignees"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_remove_assignees"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/assignees'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_remove_assignees_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_remove_assignees",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_remove_assignees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a label from an issue
    # Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Label>]
    def issues_remove_label(owner, repo, issue_number, name, opts = {})
      data, _status_code, _headers = issues_remove_label_with_http_info(owner, repo, issue_number, name, opts)
      data
    end

    # Remove a label from an issue
    # Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a &#x60;404 Not Found&#x60; status if the label does not exist.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issues_remove_label_with_http_info(owner, repo, issue_number, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_remove_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_remove_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_remove_label"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_remove_label"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling IssuesApi.issues_remove_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_remove_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_remove_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set labels for an issue
    # Removes any previous labels and sets the new labels for an issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesSetLabelsRequest] :issues_set_labels_request 
    # @return [Array<Label>]
    def issues_set_labels(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_set_labels_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # Set labels for an issue
    # Removes any previous labels and sets the new labels for an issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesSetLabelsRequest] :issues_set_labels_request 
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def issues_set_labels_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_set_labels ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_set_labels"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_set_labels"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_set_labels"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_set_labels_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_set_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_set_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlock an issue
    # Users with push access can unlock an issue's conversation.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def issues_unlock(owner, repo, issue_number, opts = {})
      issues_unlock_with_http_info(owner, repo, issue_number, opts)
      nil
    end

    # Unlock an issue
    # Users with push access can unlock an issue&#39;s conversation.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def issues_unlock_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_unlock ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_unlock"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_unlock"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_unlock"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/lock'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_unlock",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_unlock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an issue
    # Issue owners and users with push access can edit an issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesUpdateRequest] :issues_update_request 
    # @return [Issue]
    def issues_update(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = issues_update_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # Update an issue
    # Issue owners and users with push access can edit an issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesUpdateRequest] :issues_update_request 
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def issues_update_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_update ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_update"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_update"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling IssuesApi.issues_update"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_update_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an issue comment
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param issues_update_comment_request [IssuesUpdateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [IssueComment]
    def issues_update_comment(owner, repo, comment_id, issues_update_comment_request, opts = {})
      data, _status_code, _headers = issues_update_comment_with_http_info(owner, repo, comment_id, issues_update_comment_request, opts)
      data
    end

    # Update an issue comment
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param issues_update_comment_request [IssuesUpdateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueComment, Integer, Hash)>] IssueComment data, response status code and response headers
    def issues_update_comment_with_http_info(owner, repo, comment_id, issues_update_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_update_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_update_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_update_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling IssuesApi.issues_update_comment"
      end
      # verify the required parameter 'issues_update_comment_request' is set
      if @api_client.config.client_side_validation && issues_update_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'issues_update_comment_request' when calling IssuesApi.issues_update_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{comment_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issues_update_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IssueComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_update_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesUpdateLabelRequest] :issues_update_label_request 
    # @return [Label]
    def issues_update_label(owner, repo, name, opts = {})
      data, _status_code, _headers = issues_update_label_with_http_info(owner, repo, name, opts)
      data
    end

    # Update a label
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesUpdateLabelRequest] :issues_update_label_request 
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def issues_update_label_with_http_info(owner, repo, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_update_label ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_update_label"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_update_label"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling IssuesApi.issues_update_label"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/labels/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_update_label_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_update_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_update_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesUpdateMilestoneRequest] :issues_update_milestone_request 
    # @return [Milestone1]
    def issues_update_milestone(owner, repo, milestone_number, opts = {})
      data, _status_code, _headers = issues_update_milestone_with_http_info(owner, repo, milestone_number, opts)
      data
    end

    # Update a milestone
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param milestone_number [Integer] The number that identifies the milestone.
    # @param [Hash] opts the optional parameters
    # @option opts [IssuesUpdateMilestoneRequest] :issues_update_milestone_request 
    # @return [Array<(Milestone1, Integer, Hash)>] Milestone1 data, response status code and response headers
    def issues_update_milestone_with_http_info(owner, repo, milestone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssuesApi.issues_update_milestone ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling IssuesApi.issues_update_milestone"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling IssuesApi.issues_update_milestone"
      end
      # verify the required parameter 'milestone_number' is set
      if @api_client.config.client_side_validation && milestone_number.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_number' when calling IssuesApi.issues_update_milestone"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/milestones/{milestone_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'milestone_number' + '}', CGI.escape(milestone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'issues_update_milestone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone1'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IssuesApi.issues_update_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssuesApi#issues_update_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
