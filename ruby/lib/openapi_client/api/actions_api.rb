=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class ActionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add custom labels to a self-hosted runner for an organization
    # Add custom labels to a self-hosted runner configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request [EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_add_custom_labels_to_self_hosted_runner_for_org(org, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts = {})
      data, _status_code, _headers = actions_add_custom_labels_to_self_hosted_runner_for_org_with_http_info(org, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts)
      data
    end

    # Add custom labels to a self-hosted runner for an organization
    # Add custom labels to a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request [EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_add_custom_labels_to_self_hosted_runner_for_org_with_http_info(org, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org"
      end
      # verify the required parameter 'enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_custom_labels_to_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add custom labels to a self-hosted runner for a repository
    # Add custom labels to a self-hosted runner configured in a repository.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request [EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_add_custom_labels_to_self_hosted_runner_for_repo(owner, repo, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts = {})
      data, _status_code, _headers = actions_add_custom_labels_to_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts)
      data
    end

    # Add custom labels to a self-hosted runner for a repository
    # Add custom labels to a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request [EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_add_custom_labels_to_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_custom_labels_to_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add repository access to a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_add_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, repository_id, opts = {})
      actions_add_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, repository_id, opts)
      nil
    end

    # Add repository access to a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_add_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_repo_access_to_self_hosted_runner_group_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_add_repo_access_to_self_hosted_runner_group_in_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_add_repo_access_to_self_hosted_runner_group_in_org"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_add_repo_access_to_self_hosted_runner_group_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_repo_access_to_self_hosted_runner_group_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_repo_access_to_self_hosted_runner_group_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_add_selected_repo_to_org_secret(org, secret_name, repository_id, opts = {})
      actions_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_selected_repo_to_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_add_selected_repo_to_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_selected_repo_to_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_selected_repo_to_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a self-hosted runner to a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Adds a self-hosted runner to a runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_add_self_hosted_runner_to_group_for_org(org, runner_group_id, runner_id, opts = {})
      actions_add_self_hosted_runner_to_group_for_org_with_http_info(org, runner_group_id, runner_id, opts)
      nil
    end

    # Add a self-hosted runner to a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Adds a self-hosted runner to a runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_add_self_hosted_runner_to_group_for_org_with_http_info(org, runner_group_id, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_self_hosted_runner_to_group_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_add_self_hosted_runner_to_group_for_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_add_self_hosted_runner_to_group_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_add_self_hosted_runner_to_group_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_self_hosted_runner_to_group_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_self_hosted_runner_to_group_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approve a workflow run for a fork pull request
    # Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_approve_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_approve_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Approve a workflow run for a fork pull request
    # Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_approve_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_approve_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_approve_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_approve_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_approve_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/approve'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_approve_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_approve_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a workflow run
    # Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_cancel_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_cancel_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Cancel a workflow run
    # Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_cancel_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_cancel_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_cancel_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_cancel_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_cancel_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_cancel_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_cancel_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update an environment secret
    # Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_environment_secret_request [ActionsCreateOrUpdateEnvironmentSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_or_update_environment_secret(repository_id, environment_name, secret_name, actions_create_or_update_environment_secret_request, opts = {})
      data, _status_code, _headers = actions_create_or_update_environment_secret_with_http_info(repository_id, environment_name, secret_name, actions_create_or_update_environment_secret_request, opts)
      data
    end

    # Create or update an environment secret
    # Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_environment_secret_request [ActionsCreateOrUpdateEnvironmentSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_or_update_environment_secret_with_http_info(repository_id, environment_name, secret_name, actions_create_or_update_environment_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_or_update_environment_secret ...'
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # verify the required parameter 'actions_create_or_update_environment_secret_request' is set
      if @api_client.config.client_side_validation && actions_create_or_update_environment_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_or_update_environment_secret_request' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # resource path
      local_var_path = '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'.sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_or_update_environment_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_or_update_environment_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_or_update_environment_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_org_secret_request [ActionsCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_or_update_org_secret(org, secret_name, actions_create_or_update_org_secret_request, opts = {})
      data, _status_code, _headers = actions_create_or_update_org_secret_with_http_info(org, secret_name, actions_create_or_update_org_secret_request, opts)
      data
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_org_secret_request [ActionsCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_or_update_org_secret_with_http_info(org, secret_name, actions_create_or_update_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_or_update_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_or_update_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_create_or_update_org_secret"
      end
      # verify the required parameter 'actions_create_or_update_org_secret_request' is set
      if @api_client.config.client_side_validation && actions_create_or_update_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_or_update_org_secret_request' when calling ActionsApi.actions_create_or_update_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_or_update_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_or_update_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_or_update_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_repo_secret_request [ActionsCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_or_update_repo_secret(owner, repo, secret_name, actions_create_or_update_repo_secret_request, opts = {})
      data, _status_code, _headers = actions_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, actions_create_or_update_repo_secret_request, opts)
      data
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_repo_secret_request [ActionsCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, actions_create_or_update_repo_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_or_update_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # verify the required parameter 'actions_create_or_update_repo_secret_request' is set
      if @api_client.config.client_side_validation && actions_create_or_update_repo_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_or_update_repo_secret_request' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_or_update_repo_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_or_update_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_or_update_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a registration token for an organization
    # Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_registration_token_for_org(org, opts = {})
      data, _status_code, _headers = actions_create_registration_token_for_org_with_http_info(org, opts)
      data
    end

    # Create a registration token for an organization
    # Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_registration_token_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_registration_token_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_registration_token_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/registration-token'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_registration_token_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_registration_token_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a registration token for a repository
    # Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN ```
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_registration_token_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_create_registration_token_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # Create a registration token for a repository
    # Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_registration_token_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_registration_token_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_registration_token_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_registration_token_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/registration-token'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_registration_token_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_registration_token_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a remove token for an organization
    # Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_remove_token_for_org(org, opts = {})
      data, _status_code, _headers = actions_create_remove_token_for_org_with_http_info(org, opts)
      data
    end

    # Create a remove token for an organization
    # Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_remove_token_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_remove_token_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_remove_token_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/remove-token'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_remove_token_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_remove_token_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a remove token for a repository
    # Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_remove_token_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_create_remove_token_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # Create a remove token for a repository
    # Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_remove_token_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_remove_token_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_remove_token_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_remove_token_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/remove-token'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_remove_token_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_remove_token_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a self-hosted runner group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_create_self_hosted_runner_group_for_org_request [ActionsCreateSelfHostedRunnerGroupForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner]
    def actions_create_self_hosted_runner_group_for_org(org, actions_create_self_hosted_runner_group_for_org_request, opts = {})
      data, _status_code, _headers = actions_create_self_hosted_runner_group_for_org_with_http_info(org, actions_create_self_hosted_runner_group_for_org_request, opts)
      data
    end

    # Create a self-hosted runner group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_create_self_hosted_runner_group_for_org_request [ActionsCreateSelfHostedRunnerGroupForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner, Integer, Hash)>] ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner data, response status code and response headers
    def actions_create_self_hosted_runner_group_for_org_with_http_info(org, actions_create_self_hosted_runner_group_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_self_hosted_runner_group_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_self_hosted_runner_group_for_org"
      end
      # verify the required parameter 'actions_create_self_hosted_runner_group_for_org_request' is set
      if @api_client.config.client_side_validation && actions_create_self_hosted_runner_group_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_self_hosted_runner_group_for_org_request' when calling ActionsApi.actions_create_self_hosted_runner_group_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_self_hosted_runner_group_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_self_hosted_runner_group_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_self_hosted_runner_group_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a workflow dispatch event
    # You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param actions_create_workflow_dispatch_request [ActionsCreateWorkflowDispatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_create_workflow_dispatch(owner, repo, workflow_id, actions_create_workflow_dispatch_request, opts = {})
      actions_create_workflow_dispatch_with_http_info(owner, repo, workflow_id, actions_create_workflow_dispatch_request, opts)
      nil
    end

    # Create a workflow dispatch event
    # You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param actions_create_workflow_dispatch_request [ActionsCreateWorkflowDispatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_create_workflow_dispatch_with_http_info(owner, repo, workflow_id, actions_create_workflow_dispatch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_workflow_dispatch ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # verify the required parameter 'actions_create_workflow_dispatch_request' is set
      if @api_client.config.client_side_validation && actions_create_workflow_dispatch_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_workflow_dispatch_request' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_workflow_dispatch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_workflow_dispatch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_workflow_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a GitHub Actions cache for a repository (using a cache ID)
    # Deletes a GitHub Actions cache for a repository, using a cache ID.  You must authenticate using an access token with the `repo` scope to use this endpoint.  GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param cache_id [Integer] The unique identifier of the GitHub Actions cache.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_actions_cache_by_id(owner, repo, cache_id, opts = {})
      actions_delete_actions_cache_by_id_with_http_info(owner, repo, cache_id, opts)
      nil
    end

    # Delete a GitHub Actions cache for a repository (using a cache ID)
    # Deletes a GitHub Actions cache for a repository, using a cache ID.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param cache_id [Integer] The unique identifier of the GitHub Actions cache.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_actions_cache_by_id_with_http_info(owner, repo, cache_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_actions_cache_by_id ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_actions_cache_by_id"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_actions_cache_by_id"
      end
      # verify the required parameter 'cache_id' is set
      if @api_client.config.client_side_validation && cache_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_id' when calling ActionsApi.actions_delete_actions_cache_by_id"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/caches/{cache_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'cache_id' + '}', CGI.escape(cache_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_actions_cache_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_actions_cache_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete GitHub Actions caches for a repository (using a cache key)
    # Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  You must authenticate using an access token with the `repo` scope to use this endpoint.  GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param key [String] A key for identifying the cache.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @return [RepositoryActionsCaches]
    def actions_delete_actions_cache_by_key(owner, repo, key, opts = {})
      data, _status_code, _headers = actions_delete_actions_cache_by_key_with_http_info(owner, repo, key, opts)
      data
    end

    # Delete GitHub Actions caches for a repository (using a cache key)
    # Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param key [String] A key for identifying the cache.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @return [Array<(RepositoryActionsCaches, Integer, Hash)>] RepositoryActionsCaches data, response status code and response headers
    def actions_delete_actions_cache_by_key_with_http_info(owner, repo, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_actions_cache_by_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_actions_cache_by_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_actions_cache_by_key"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ActionsApi.actions_delete_actions_cache_by_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/caches'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RepositoryActionsCaches'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_actions_cache_by_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_actions_cache_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an artifact
    # Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_artifact(owner, repo, artifact_id, opts = {})
      actions_delete_artifact_with_http_info(owner, repo, artifact_id, opts)
      nil
    end

    # Delete an artifact
    # Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_artifact_with_http_info(owner, repo, artifact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_artifact ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_artifact"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_artifact"
      end
      # verify the required parameter 'artifact_id' is set
      if @api_client.config.client_side_validation && artifact_id.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_id' when calling ActionsApi.actions_delete_artifact"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'artifact_id' + '}', CGI.escape(artifact_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an environment secret
    # Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_environment_secret(repository_id, environment_name, secret_name, opts = {})
      actions_delete_environment_secret_with_http_info(repository_id, environment_name, secret_name, opts)
      nil
    end

    # Delete an environment secret
    # Deletes a secret in an environment using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_environment_secret_with_http_info(repository_id, environment_name, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_environment_secret ...'
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_delete_environment_secret"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_delete_environment_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_delete_environment_secret"
      end
      # resource path
      local_var_path = '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'.sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_environment_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_environment_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_org_secret(org, secret_name, opts = {})
      actions_delete_org_secret_with_http_info(org, secret_name, opts)
      nil
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_delete_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_delete_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_repo_secret(owner, repo, secret_name, opts = {})
      actions_delete_repo_secret_with_http_info(owner, repo, secret_name, opts)
      nil
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_delete_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a self-hosted runner from an organization
    # Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_self_hosted_runner_from_org(org, runner_id, opts = {})
      actions_delete_self_hosted_runner_from_org_with_http_info(org, runner_id, opts)
      nil
    end

    # Delete a self-hosted runner from an organization
    # Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_self_hosted_runner_from_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_self_hosted_runner_from_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_delete_self_hosted_runner_from_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_delete_self_hosted_runner_from_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_self_hosted_runner_from_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_self_hosted_runner_from_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a self-hosted runner from a repository
    # Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_self_hosted_runner_from_repo(owner, repo, runner_id, opts = {})
      actions_delete_self_hosted_runner_from_repo_with_http_info(owner, repo, runner_id, opts)
      nil
    end

    # Delete a self-hosted runner from a repository
    # Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_self_hosted_runner_from_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_self_hosted_runner_from_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_self_hosted_runner_from_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_self_hosted_runner_from_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_delete_self_hosted_runner_from_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_self_hosted_runner_from_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_self_hosted_runner_from_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a self-hosted runner group from an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Deletes a self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_self_hosted_runner_group_from_org(org, runner_group_id, opts = {})
      actions_delete_self_hosted_runner_group_from_org_with_http_info(org, runner_group_id, opts)
      nil
    end

    # Delete a self-hosted runner group from an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Deletes a self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_self_hosted_runner_group_from_org_with_http_info(org, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_self_hosted_runner_group_from_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_delete_self_hosted_runner_group_from_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_delete_self_hosted_runner_group_from_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_self_hosted_runner_group_from_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_self_hosted_runner_group_from_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a workflow run
    # Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_workflow_run(owner, repo, run_id, opts = {})
      actions_delete_workflow_run_with_http_info(owner, repo, run_id, opts)
      nil
    end

    # Delete a workflow run
    # Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_delete_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete workflow run logs
    # Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_workflow_run_logs(owner, repo, run_id, opts = {})
      actions_delete_workflow_run_logs_with_http_info(owner, repo, run_id, opts)
      nil
    end

    # Delete workflow run logs
    # Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_workflow_run_logs_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_workflow_run_logs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_workflow_run_logs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_workflow_run_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_delete_workflow_run_logs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_workflow_run_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_workflow_run_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a selected repository for GitHub Actions in an organization
    # Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_disable_selected_repository_github_actions_organization(org, repository_id, opts = {})
      actions_disable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts)
      nil
    end

    # Disable a selected repository for GitHub Actions in an organization
    # Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_disable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_disable_selected_repository_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_disable_selected_repository_github_actions_organization"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_disable_selected_repository_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_disable_selected_repository_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_disable_selected_repository_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a workflow
    # Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_disable_workflow(owner, repo, workflow_id, opts = {})
      actions_disable_workflow_with_http_info(owner, repo, workflow_id, opts)
      nil
    end

    # Disable a workflow
    # Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_disable_workflow_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_disable_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_disable_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_disable_workflow"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_disable_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_disable_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_disable_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download an artifact
    # Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param archive_format [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_artifact(owner, repo, artifact_id, archive_format, opts = {})
      actions_download_artifact_with_http_info(owner, repo, artifact_id, archive_format, opts)
      nil
    end

    # Download an artifact
    # Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param archive_format [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_artifact_with_http_info(owner, repo, artifact_id, archive_format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_artifact ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_artifact"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_artifact"
      end
      # verify the required parameter 'artifact_id' is set
      if @api_client.config.client_side_validation && artifact_id.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_id' when calling ActionsApi.actions_download_artifact"
      end
      # verify the required parameter 'archive_format' is set
      if @api_client.config.client_side_validation && archive_format.nil?
        fail ArgumentError, "Missing the required parameter 'archive_format' when calling ActionsApi.actions_download_artifact"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'artifact_id' + '}', CGI.escape(artifact_id.to_s)).sub('{' + 'archive_format' + '}', CGI.escape(archive_format.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download job logs for a workflow run
    # Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_job_logs_for_workflow_run(owner, repo, job_id, opts = {})
      actions_download_job_logs_for_workflow_run_with_http_info(owner, repo, job_id, opts)
      nil
    end

    # Download job logs for a workflow run
    # Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_job_logs_for_workflow_run_with_http_info(owner, repo, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_job_logs_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_job_logs_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_job_logs_for_workflow_run"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ActionsApi.actions_download_job_logs_for_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_job_logs_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_job_logs_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download workflow run attempt logs
    # Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_workflow_run_attempt_logs(owner, repo, run_id, attempt_number, opts = {})
      actions_download_workflow_run_attempt_logs_with_http_info(owner, repo, run_id, attempt_number, opts)
      nil
    end

    # Download workflow run attempt logs
    # Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_workflow_run_attempt_logs_with_http_info(owner, repo, run_id, attempt_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_workflow_run_attempt_logs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # verify the required parameter 'attempt_number' is set
      if @api_client.config.client_side_validation && attempt_number.nil?
        fail ArgumentError, "Missing the required parameter 'attempt_number' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s)).sub('{' + 'attempt_number' + '}', CGI.escape(attempt_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_workflow_run_attempt_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_workflow_run_attempt_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download workflow run logs
    # Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_workflow_run_logs(owner, repo, run_id, opts = {})
      actions_download_workflow_run_logs_with_http_info(owner, repo, run_id, opts)
      nil
    end

    # Download workflow run logs
    # Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_workflow_run_logs_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_workflow_run_logs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_workflow_run_logs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_workflow_run_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_download_workflow_run_logs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_workflow_run_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_workflow_run_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a selected repository for GitHub Actions in an organization
    # Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_enable_selected_repository_github_actions_organization(org, repository_id, opts = {})
      actions_enable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts)
      nil
    end

    # Enable a selected repository for GitHub Actions in an organization
    # Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_enable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_enable_selected_repository_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_enable_selected_repository_github_actions_organization"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_enable_selected_repository_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_enable_selected_repository_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_enable_selected_repository_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a workflow
    # Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_enable_workflow(owner, repo, workflow_id, opts = {})
      actions_enable_workflow_with_http_info(owner, repo, workflow_id, opts)
      nil
    end

    # Enable a workflow
    # Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_enable_workflow_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_enable_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_enable_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_enable_workflow"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_enable_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_enable_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_enable_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List GitHub Actions caches for a repository
    # Lists the GitHub Actions caches for a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :key An explicit key or prefix for identifying the cache
    # @option opts [String] :sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (default to 'last_accessed_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @return [RepositoryActionsCaches]
    def actions_get_actions_cache_list(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_list_with_http_info(owner, repo, opts)
      data
    end

    # List GitHub Actions caches for a repository
    # Lists the GitHub Actions caches for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :key An explicit key or prefix for identifying the cache
    # @option opts [String] :sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (default to 'last_accessed_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @return [Array<(RepositoryActionsCaches, Integer, Hash)>] RepositoryActionsCaches data, response status code and response headers
    def actions_get_actions_cache_list_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_list ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_actions_cache_list"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_actions_cache_list"
      end
      allowable_values = ["created_at", "last_accessed_at", "size_in_bytes"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/caches'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RepositoryActionsCaches'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions cache usage for a repository
    # Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsCacheUsageByRepository]
    def actions_get_actions_cache_usage(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_usage_with_http_info(owner, repo, opts)
      data
    end

    # Get GitHub Actions cache usage for a repository
    # Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsCacheUsageByRepository, Integer, Hash)>] ActionsCacheUsageByRepository data, response status code and response headers
    def actions_get_actions_cache_usage_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_usage ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_actions_cache_usage"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_actions_cache_usage"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/cache/usage'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsCacheUsageByRepository'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repositories with GitHub Actions cache usage for an organization
    # Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsGetActionsCacheUsageByRepoForOrg200Response]
    def actions_get_actions_cache_usage_by_repo_for_org(org, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_usage_by_repo_for_org_with_http_info(org, opts)
      data
    end

    # List repositories with GitHub Actions cache usage for an organization
    # Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsGetActionsCacheUsageByRepoForOrg200Response, Integer, Hash)>] ActionsGetActionsCacheUsageByRepoForOrg200Response data, response status code and response headers
    def actions_get_actions_cache_usage_by_repo_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_usage_by_repo_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_actions_cache_usage_by_repo_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/cache/usage-by-repository'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetActionsCacheUsageByRepoForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_usage_by_repo_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_usage_by_repo_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions cache usage for an enterprise
    # Gets the total GitHub Actions cache usage for an enterprise. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetActionsCacheUsageForEnterprise200Response]
    def actions_get_actions_cache_usage_for_enterprise(enterprise, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_usage_for_enterprise_with_http_info(enterprise, opts)
      data
    end

    # Get GitHub Actions cache usage for an enterprise
    # Gets the total GitHub Actions cache usage for an enterprise. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetActionsCacheUsageForEnterprise200Response, Integer, Hash)>] ActionsGetActionsCacheUsageForEnterprise200Response data, response status code and response headers
    def actions_get_actions_cache_usage_for_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_usage_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling ActionsApi.actions_get_actions_cache_usage_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/cache/usage'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetActionsCacheUsageForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_usage_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_usage_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions cache usage for an organization
    # Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetActionsCacheUsageForEnterprise200Response]
    def actions_get_actions_cache_usage_for_org(org, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_usage_for_org_with_http_info(org, opts)
      data
    end

    # Get GitHub Actions cache usage for an organization
    # Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetActionsCacheUsageForEnterprise200Response, Integer, Hash)>] ActionsGetActionsCacheUsageForEnterprise200Response data, response status code and response headers
    def actions_get_actions_cache_usage_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_usage_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_actions_cache_usage_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/cache/usage'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetActionsCacheUsageForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_usage_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_usage_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get allowed actions and reusable workflows for an organization
    # Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminGetAllowedActionsEnterprise200Response]
    def actions_get_allowed_actions_organization(org, opts = {})
      data, _status_code, _headers = actions_get_allowed_actions_organization_with_http_info(org, opts)
      data
    end

    # Get allowed actions and reusable workflows for an organization
    # Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminGetAllowedActionsEnterprise200Response, Integer, Hash)>] EnterpriseAdminGetAllowedActionsEnterprise200Response data, response status code and response headers
    def actions_get_allowed_actions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_allowed_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_allowed_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/selected-actions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminGetAllowedActionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_allowed_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_allowed_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get allowed actions and reusable workflows for a repository
    # Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminGetAllowedActionsEnterprise200Response]
    def actions_get_allowed_actions_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_allowed_actions_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get allowed actions and reusable workflows for a repository
    # Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminGetAllowedActionsEnterprise200Response, Integer, Hash)>] EnterpriseAdminGetAllowedActionsEnterprise200Response data, response status code and response headers
    def actions_get_allowed_actions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_allowed_actions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_allowed_actions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_allowed_actions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/selected-actions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminGetAllowedActionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_allowed_actions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_allowed_actions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an artifact
    # Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [Artifact]
    def actions_get_artifact(owner, repo, artifact_id, opts = {})
      data, _status_code, _headers = actions_get_artifact_with_http_info(owner, repo, artifact_id, opts)
      data
    end

    # Get an artifact
    # Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Artifact, Integer, Hash)>] Artifact data, response status code and response headers
    def actions_get_artifact_with_http_info(owner, repo, artifact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_artifact ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_artifact"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_artifact"
      end
      # verify the required parameter 'artifact_id' is set
      if @api_client.config.client_side_validation && artifact_id.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_id' when calling ActionsApi.actions_get_artifact"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'artifact_id' + '}', CGI.escape(artifact_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Artifact'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the opt-out flag of an OIDC subject claim customization for a repository
    # Gets the `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [TheJsonPayloadEnablesDisablesTheUseOfSubClaimCustomization]
    def actions_get_custom_oidc_sub_claim_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # Get the opt-out flag of an OIDC subject claim customization for a repository
    # Gets the &#x60;opt-out&#x60; flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TheJsonPayloadEnablesDisablesTheUseOfSubClaimCustomization, Integer, Hash)>] TheJsonPayloadEnablesDisablesTheUseOfSubClaimCustomization data, response status code and response headers
    def actions_get_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_custom_oidc_sub_claim_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_custom_oidc_sub_claim_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_custom_oidc_sub_claim_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/oidc/customization/sub'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TheJsonPayloadEnablesDisablesTheUseOfSubClaimCustomization'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_custom_oidc_sub_claim_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_custom_oidc_sub_claim_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an environment public key
    # Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param [Hash] opts the optional parameters
    # @return [ActionsPublicKey]
    def actions_get_environment_public_key(repository_id, environment_name, opts = {})
      data, _status_code, _headers = actions_get_environment_public_key_with_http_info(repository_id, environment_name, opts)
      data
    end

    # Get an environment public key
    # Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsPublicKey, Integer, Hash)>] ActionsPublicKey data, response status code and response headers
    def actions_get_environment_public_key_with_http_info(repository_id, environment_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_environment_public_key ...'
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_get_environment_public_key"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_get_environment_public_key"
      end
      # resource path
      local_var_path = '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key'.sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_environment_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_environment_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an environment secret
    # Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [ActionsSecret]
    def actions_get_environment_secret(repository_id, environment_name, secret_name, opts = {})
      data, _status_code, _headers = actions_get_environment_secret_with_http_info(repository_id, environment_name, secret_name, opts)
      data
    end

    # Get an environment secret
    # Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsSecret, Integer, Hash)>] ActionsSecret data, response status code and response headers
    def actions_get_environment_secret_with_http_info(repository_id, environment_name, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_environment_secret ...'
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_get_environment_secret"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_get_environment_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_get_environment_secret"
      end
      # resource path
      local_var_path = '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'.sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_environment_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_environment_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default workflow permissions for an enterprise
    # Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \"[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint. GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response]
    def actions_get_github_actions_default_workflow_permissions_enterprise(enterprise, opts = {})
      data, _status_code, _headers = actions_get_github_actions_default_workflow_permissions_enterprise_with_http_info(enterprise, opts)
      data
    end

    # Get default workflow permissions for an enterprise
    # Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an enterprise, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;enterprise_administration:write&#x60; permission to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response, Integer, Hash)>] ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response data, response status code and response headers
    def actions_get_github_actions_default_workflow_permissions_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_default_workflow_permissions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling ActionsApi.actions_get_github_actions_default_workflow_permissions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/workflow'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_default_workflow_permissions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_default_workflow_permissions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default workflow permissions for an organization
    # Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response]
    def actions_get_github_actions_default_workflow_permissions_organization(org, opts = {})
      data, _status_code, _headers = actions_get_github_actions_default_workflow_permissions_organization_with_http_info(org, opts)
      data
    end

    # Get default workflow permissions for an organization
    # Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response, Integer, Hash)>] ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response data, response status code and response headers
    def actions_get_github_actions_default_workflow_permissions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_default_workflow_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_github_actions_default_workflow_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/workflow'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_default_workflow_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_default_workflow_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default workflow permissions for a repository
    # Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response]
    def actions_get_github_actions_default_workflow_permissions_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get default workflow permissions for a repository
    # Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response, Integer, Hash)>] ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response data, response status code and response headers
    def actions_get_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_default_workflow_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_github_actions_default_workflow_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_github_actions_default_workflow_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/workflow'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_default_workflow_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_default_workflow_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions permissions for an organization
    # Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetGithubActionsPermissionsOrganization200Response]
    def actions_get_github_actions_permissions_organization(org, opts = {})
      data, _status_code, _headers = actions_get_github_actions_permissions_organization_with_http_info(org, opts)
      data
    end

    # Get GitHub Actions permissions for an organization
    # Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetGithubActionsPermissionsOrganization200Response, Integer, Hash)>] ActionsGetGithubActionsPermissionsOrganization200Response data, response status code and response headers
    def actions_get_github_actions_permissions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_github_actions_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetGithubActionsPermissionsOrganization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions permissions for a repository
    # Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetGithubActionsPermissionsRepository200Response]
    def actions_get_github_actions_permissions_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_github_actions_permissions_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get GitHub Actions permissions for a repository
    # Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetGithubActionsPermissionsRepository200Response, Integer, Hash)>] ActionsGetGithubActionsPermissionsRepository200Response data, response status code and response headers
    def actions_get_github_actions_permissions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_github_actions_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_github_actions_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetGithubActionsPermissionsRepository200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a job for a workflow run
    # Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def actions_get_job_for_workflow_run(owner, repo, job_id, opts = {})
      data, _status_code, _headers = actions_get_job_for_workflow_run_with_http_info(owner, repo, job_id, opts)
      data
    end

    # Get a job for a workflow run
    # Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def actions_get_job_for_workflow_run_with_http_info(owner, repo, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_job_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_job_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_job_for_workflow_run"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ActionsApi.actions_get_job_for_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/jobs/{job_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Job'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_job_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_job_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsPublicKey]
    def actions_get_org_public_key(org, opts = {})
      data, _status_code, _headers = actions_get_org_public_key_with_http_info(org, opts)
      data
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsPublicKey, Integer, Hash)>] ActionsPublicKey data, response status code and response headers
    def actions_get_org_public_key_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_org_public_key ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_org_public_key"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/public-key'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_org_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_org_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [ActionsSecretForAnOrganization]
    def actions_get_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = actions_get_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsSecretForAnOrganization, Integer, Hash)>] ActionsSecretForAnOrganization data, response status code and response headers
    def actions_get_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_get_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsSecretForAnOrganization'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pending deployments for a workflow run
    # Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<PendingDeployment>]
    def actions_get_pending_deployments_for_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_pending_deployments_for_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get pending deployments for a workflow run
    # Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PendingDeployment>, Integer, Hash)>] Array<PendingDeployment> data, response status code and response headers
    def actions_get_pending_deployments_for_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_pending_deployments_for_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_pending_deployments_for_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_pending_deployments_for_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_pending_deployments_for_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PendingDeployment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_pending_deployments_for_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_pending_deployments_for_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsPublicKey]
    def actions_get_repo_public_key(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_repo_public_key_with_http_info(owner, repo, opts)
      data
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsPublicKey, Integer, Hash)>] ActionsPublicKey data, response status code and response headers
    def actions_get_repo_public_key_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_repo_public_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_repo_public_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_repo_public_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/public-key'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_repo_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_repo_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [ActionsSecret]
    def actions_get_repo_secret(owner, repo, secret_name, opts = {})
      data, _status_code, _headers = actions_get_repo_secret_with_http_info(owner, repo, secret_name, opts)
      data
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsSecret, Integer, Hash)>] ActionsSecret data, response status code and response headers
    def actions_get_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_get_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the review history for a workflow run
    # Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<EnvironmentApproval>]
    def actions_get_reviews_for_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_reviews_for_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get the review history for a workflow run
    # Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EnvironmentApproval>, Integer, Hash)>] Array<EnvironmentApproval> data, response status code and response headers
    def actions_get_reviews_for_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_reviews_for_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_reviews_for_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_reviews_for_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_reviews_for_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EnvironmentApproval>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_reviews_for_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_reviews_for_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a self-hosted runner for an organization
    # Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [SelfHostedRunners]
    def actions_get_self_hosted_runner_for_org(org, runner_id, opts = {})
      data, _status_code, _headers = actions_get_self_hosted_runner_for_org_with_http_info(org, runner_id, opts)
      data
    end

    # Get a self-hosted runner for an organization
    # Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SelfHostedRunners, Integer, Hash)>] SelfHostedRunners data, response status code and response headers
    def actions_get_self_hosted_runner_for_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_get_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SelfHostedRunners'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a self-hosted runner for a repository
    # Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [SelfHostedRunners]
    def actions_get_self_hosted_runner_for_repo(owner, repo, runner_id, opts = {})
      data, _status_code, _headers = actions_get_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts)
      data
    end

    # Get a self-hosted runner for a repository
    # Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SelfHostedRunners, Integer, Hash)>] SelfHostedRunners data, response status code and response headers
    def actions_get_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_get_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SelfHostedRunners'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a self-hosted runner group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Gets a specific self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner]
    def actions_get_self_hosted_runner_group_for_org(org, runner_group_id, opts = {})
      data, _status_code, _headers = actions_get_self_hosted_runner_group_for_org_with_http_info(org, runner_group_id, opts)
      data
    end

    # Get a self-hosted runner group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Gets a specific self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner, Integer, Hash)>] ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner data, response status code and response headers
    def actions_get_self_hosted_runner_group_for_org_with_http_info(org, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_self_hosted_runner_group_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_self_hosted_runner_group_for_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_get_self_hosted_runner_group_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_self_hosted_runner_group_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_self_hosted_runner_group_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a workflow
    # Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Workflow]
    def actions_get_workflow(owner, repo, workflow_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_with_http_info(owner, repo, workflow_id, opts)
      data
    end

    # Get a workflow
    # Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Workflow, Integer, Hash)>] Workflow data, response status code and response headers
    def actions_get_workflow_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_get_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Workflow'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the level of access for workflows outside of the repository
    # Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to internal and private repositories. For more information, see \"[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\" for GitHub.com and \"[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-cloud@latest/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)\" for GitHub Enterprise Cloud.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetWorkflowAccessToRepository200Response]
    def actions_get_workflow_access_to_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_workflow_access_to_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get the level of access for workflows outside of the repository
    # Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to internal and private repositories. For more information, see \&quot;[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot; for GitHub.com and \&quot;[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-cloud@latest/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)\&quot; for GitHub Enterprise Cloud.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetWorkflowAccessToRepository200Response, Integer, Hash)>] ActionsGetWorkflowAccessToRepository200Response data, response status code and response headers
    def actions_get_workflow_access_to_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_access_to_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_access_to_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_access_to_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/access'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetWorkflowAccessToRepository200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_access_to_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_access_to_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a workflow run
    # Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [WorkflowRun]
    def actions_get_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get a workflow run
    # Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [Array<(WorkflowRun, Integer, Hash)>] WorkflowRun data, response status code and response headers
    def actions_get_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a workflow run attempt
    # Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [WorkflowRun]
    def actions_get_workflow_run_attempt(owner, repo, run_id, attempt_number, opts = {})
      data, _status_code, _headers = actions_get_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts)
      data
    end

    # Get a workflow run attempt
    # Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [Array<(WorkflowRun, Integer, Hash)>] WorkflowRun data, response status code and response headers
    def actions_get_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_run_attempt ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # verify the required parameter 'attempt_number' is set
      if @api_client.config.client_side_validation && attempt_number.nil?
        fail ArgumentError, "Missing the required parameter 'attempt_number' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s)).sub('{' + 'attempt_number' + '}', CGI.escape(attempt_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_run_attempt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_run_attempt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get workflow run usage
    # Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [WorkflowRunUsage]
    def actions_get_workflow_run_usage(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_run_usage_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get workflow run usage
    # Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkflowRunUsage, Integer, Hash)>] WorkflowRunUsage data, response status code and response headers
    def actions_get_workflow_run_usage_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_run_usage ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_run_usage"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_run_usage"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_workflow_run_usage"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/timing'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowRunUsage'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_run_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_run_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get workflow usage
    # Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [WorkflowUsage]
    def actions_get_workflow_usage(owner, repo, workflow_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_usage_with_http_info(owner, repo, workflow_id, opts)
      data
    end

    # Get workflow usage
    # Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkflowUsage, Integer, Hash)>] WorkflowUsage data, response status code and response headers
    def actions_get_workflow_usage_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_usage ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_usage"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_usage"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_get_workflow_usage"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowUsage'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List artifacts for a repository
    # Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListArtifactsForRepo200Response]
    def actions_list_artifacts_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_artifacts_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List artifacts for a repository
    # Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListArtifactsForRepo200Response, Integer, Hash)>] ActionsListArtifactsForRepo200Response data, response status code and response headers
    def actions_list_artifacts_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_artifacts_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_artifacts_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_artifacts_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListArtifactsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_artifacts_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_artifacts_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List environment secrets
    # Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListRepoSecrets200Response]
    def actions_list_environment_secrets(repository_id, environment_name, opts = {})
      data, _status_code, _headers = actions_list_environment_secrets_with_http_info(repository_id, environment_name, opts)
      data
    end

    # List environment secrets
    # Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param environment_name [String] The name of the environment
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListRepoSecrets200Response, Integer, Hash)>] ActionsListRepoSecrets200Response data, response status code and response headers
    def actions_list_environment_secrets_with_http_info(repository_id, environment_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_environment_secrets ...'
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_list_environment_secrets"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_list_environment_secrets"
      end
      # resource path
      local_var_path = '/repositories/{repository_id}/environments/{environment_name}/secrets'.sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_environment_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_environment_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List jobs for a workflow run
    # Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListJobsForWorkflowRunAttempt200Response]
    def actions_list_jobs_for_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_list_jobs_for_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # List jobs for a workflow run
    # Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListJobsForWorkflowRunAttempt200Response, Integer, Hash)>] ActionsListJobsForWorkflowRunAttempt200Response data, response status code and response headers
    def actions_list_jobs_for_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_jobs_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_jobs_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_jobs_for_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_list_jobs_for_workflow_run"
      end
      allowable_values = ["latest", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListJobsForWorkflowRunAttempt200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_jobs_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_jobs_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List jobs for a workflow run attempt
    # Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListJobsForWorkflowRunAttempt200Response]
    def actions_list_jobs_for_workflow_run_attempt(owner, repo, run_id, attempt_number, opts = {})
      data, _status_code, _headers = actions_list_jobs_for_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts)
      data
    end

    # List jobs for a workflow run attempt
    # Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListJobsForWorkflowRunAttempt200Response, Integer, Hash)>] ActionsListJobsForWorkflowRunAttempt200Response data, response status code and response headers
    def actions_list_jobs_for_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_jobs_for_workflow_run_attempt ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # verify the required parameter 'attempt_number' is set
      if @api_client.config.client_side_validation && attempt_number.nil?
        fail ArgumentError, "Missing the required parameter 'attempt_number' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s)).sub('{' + 'attempt_number' + '}', CGI.escape(attempt_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListJobsForWorkflowRunAttempt200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_jobs_for_workflow_run_attempt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_jobs_for_workflow_run_attempt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for a self-hosted runner for an organization
    # Lists all labels for a self-hosted runner configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_list_labels_for_self_hosted_runner_for_org(org, runner_id, opts = {})
      data, _status_code, _headers = actions_list_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, opts)
      data
    end

    # List labels for a self-hosted runner for an organization
    # Lists all labels for a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_list_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_labels_for_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_labels_for_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_labels_for_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for a self-hosted runner for a repository
    # Lists all labels for a self-hosted runner configured in a repository.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_list_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id, opts = {})
      data, _status_code, _headers = actions_list_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts)
      data
    end

    # List labels for a self-hosted runner for a repository
    # Lists all labels for a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_list_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_labels_for_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListOrgSecrets200Response]
    def actions_list_org_secrets(org, opts = {})
      data, _status_code, _headers = actions_list_org_secrets_with_http_info(org, opts)
      data
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListOrgSecrets200Response, Integer, Hash)>] ActionsListOrgSecrets200Response data, response status code and response headers
    def actions_list_org_secrets_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_org_secrets ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_org_secrets"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListOrgSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_org_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_org_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository access to a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response]
    def actions_list_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, opts = {})
      data, _status_code, _headers = actions_list_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, opts)
      data
    end

    # List repository access to a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response, Integer, Hash)>] ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response data, response status code and response headers
    def actions_list_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_access_to_self_hosted_runner_group_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_repo_access_to_self_hosted_runner_group_in_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_list_repo_access_to_self_hosted_runner_group_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_access_to_self_hosted_runner_group_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_access_to_self_hosted_runner_group_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListRepoSecrets200Response]
    def actions_list_repo_secrets(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_repo_secrets_with_http_info(owner, repo, opts)
      data
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListRepoSecrets200Response, Integer, Hash)>] ActionsListRepoSecrets200Response data, response status code and response headers
    def actions_list_repo_secrets_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_secrets ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_repo_secrets"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_repo_secrets"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository workflows
    # Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListRepoWorkflows200Response]
    def actions_list_repo_workflows(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_repo_workflows_with_http_info(owner, repo, opts)
      data
    end

    # List repository workflows
    # Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListRepoWorkflows200Response, Integer, Hash)>] ActionsListRepoWorkflows200Response data, response status code and response headers
    def actions_list_repo_workflows_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_workflows ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_repo_workflows"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_repo_workflows"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoWorkflows200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_workflows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_workflows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List runner applications for an organization
    # Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<RunnerApplication>]
    def actions_list_runner_applications_for_org(org, opts = {})
      data, _status_code, _headers = actions_list_runner_applications_for_org_with_http_info(org, opts)
      data
    end

    # List runner applications for an organization
    # Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RunnerApplication>, Integer, Hash)>] Array<RunnerApplication> data, response status code and response headers
    def actions_list_runner_applications_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_runner_applications_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_runner_applications_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/downloads'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RunnerApplication>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_runner_applications_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_runner_applications_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List runner applications for a repository
    # Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<RunnerApplication>]
    def actions_list_runner_applications_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_runner_applications_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List runner applications for a repository
    # Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RunnerApplication>, Integer, Hash)>] Array<RunnerApplication> data, response status code and response headers
    def actions_list_runner_applications_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_runner_applications_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_runner_applications_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_runner_applications_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/downloads'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RunnerApplication>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_runner_applications_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_runner_applications_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [ActionsListSelectedReposForOrgSecret200Response]
    def actions_list_selected_repos_for_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = actions_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(ActionsListSelectedReposForOrgSecret200Response, Integer, Hash)>] ActionsListSelectedReposForOrgSecret200Response data, response status code and response headers
    def actions_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_list_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedReposForOrgSecret200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories enabled for GitHub Actions in an organization
    # Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response]
    def actions_list_selected_repositories_enabled_github_actions_organization(org, opts = {})
      data, _status_code, _headers = actions_list_selected_repositories_enabled_github_actions_organization_with_http_info(org, opts)
      data
    end

    # List selected repositories enabled for GitHub Actions in an organization
    # Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response, Integer, Hash)>] ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response data, response status code and response headers
    def actions_list_selected_repositories_enabled_github_actions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_selected_repositories_enabled_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_selected_repositories_enabled_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_selected_repositories_enabled_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_selected_repositories_enabled_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runner groups for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :visible_to_repository Only return runner groups that are allowed to be used by this repository.
    # @return [ActionsListSelfHostedRunnerGroupsForOrg200Response]
    def actions_list_self_hosted_runner_groups_for_org(org, opts = {})
      data, _status_code, _headers = actions_list_self_hosted_runner_groups_for_org_with_http_info(org, opts)
      data
    end

    # List self-hosted runner groups for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :visible_to_repository Only return runner groups that are allowed to be used by this repository.
    # @return [Array<(ActionsListSelfHostedRunnerGroupsForOrg200Response, Integer, Hash)>] ActionsListSelfHostedRunnerGroupsForOrg200Response data, response status code and response headers
    def actions_list_self_hosted_runner_groups_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_self_hosted_runner_groups_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_self_hosted_runner_groups_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'visible_to_repository'] = opts[:'visible_to_repository'] if !opts[:'visible_to_repository'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnerGroupsForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_self_hosted_runner_groups_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_self_hosted_runner_groups_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runners for an organization
    # Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListSelfHostedRunnersForOrg200Response]
    def actions_list_self_hosted_runners_for_org(org, opts = {})
      data, _status_code, _headers = actions_list_self_hosted_runners_for_org_with_http_info(org, opts)
      data
    end

    # List self-hosted runners for an organization
    # Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListSelfHostedRunnersForOrg200Response, Integer, Hash)>] ActionsListSelfHostedRunnersForOrg200Response data, response status code and response headers
    def actions_list_self_hosted_runners_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_self_hosted_runners_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_self_hosted_runners_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnersForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_self_hosted_runners_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_self_hosted_runners_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runners for a repository
    # Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListSelfHostedRunnersForOrg200Response]
    def actions_list_self_hosted_runners_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_self_hosted_runners_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List self-hosted runners for a repository
    # Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListSelfHostedRunnersForOrg200Response, Integer, Hash)>] ActionsListSelfHostedRunnersForOrg200Response data, response status code and response headers
    def actions_list_self_hosted_runners_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_self_hosted_runners_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_self_hosted_runners_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_self_hosted_runners_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnersForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_self_hosted_runners_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_self_hosted_runners_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runners in a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists self-hosted runners that are in a specific organization group.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response]
    def actions_list_self_hosted_runners_in_group_for_org(org, runner_group_id, opts = {})
      data, _status_code, _headers = actions_list_self_hosted_runners_in_group_for_org_with_http_info(org, runner_group_id, opts)
      data
    end

    # List self-hosted runners in a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists self-hosted runners that are in a specific organization group.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response data, response status code and response headers
    def actions_list_self_hosted_runners_in_group_for_org_with_http_info(org, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_self_hosted_runners_in_group_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_self_hosted_runners_in_group_for_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_list_self_hosted_runners_in_group_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_self_hosted_runners_in_group_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_self_hosted_runners_in_group_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List workflow run artifacts
    # Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ActionsListArtifactsForRepo200Response]
    def actions_list_workflow_run_artifacts(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_list_workflow_run_artifacts_with_http_info(owner, repo, run_id, opts)
      data
    end

    # List workflow run artifacts
    # Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ActionsListArtifactsForRepo200Response, Integer, Hash)>] ActionsListArtifactsForRepo200Response data, response status code and response headers
    def actions_list_workflow_run_artifacts_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_workflow_run_artifacts ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_workflow_run_artifacts"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_workflow_run_artifacts"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_list_workflow_run_artifacts"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListArtifactsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_workflow_run_artifacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_workflow_run_artifacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List workflow runs
    # List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @return [ActionsListWorkflowRunsForRepo200Response]
    def actions_list_workflow_runs(owner, repo, workflow_id, opts = {})
      data, _status_code, _headers = actions_list_workflow_runs_with_http_info(owner, repo, workflow_id, opts)
      data
    end

    # List workflow runs
    # List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @return [Array<(ActionsListWorkflowRunsForRepo200Response, Integer, Hash)>] ActionsListWorkflowRunsForRepo200Response data, response status code and response headers
    def actions_list_workflow_runs_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_workflow_runs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_workflow_runs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_workflow_runs"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_list_workflow_runs"
      end
      allowable_values = ["completed", "action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out", "in_progress", "queued", "requested", "waiting"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'actor'] = opts[:'actor'] if !opts[:'actor'].nil?
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'created'] = opts[:'created'] if !opts[:'created'].nil?
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?
      query_params[:'check_suite_id'] = opts[:'check_suite_id'] if !opts[:'check_suite_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListWorkflowRunsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_workflow_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_workflow_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List workflow runs for a repository
    # Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @return [ActionsListWorkflowRunsForRepo200Response]
    def actions_list_workflow_runs_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_workflow_runs_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List workflow runs for a repository
    # Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @return [Array<(ActionsListWorkflowRunsForRepo200Response, Integer, Hash)>] ActionsListWorkflowRunsForRepo200Response data, response status code and response headers
    def actions_list_workflow_runs_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_workflow_runs_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_workflow_runs_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_workflow_runs_for_repo"
      end
      allowable_values = ["completed", "action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out", "in_progress", "queued", "requested", "waiting"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'actor'] = opts[:'actor'] if !opts[:'actor'].nil?
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'created'] = opts[:'created'] if !opts[:'created'].nil?
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?
      query_params[:'check_suite_id'] = opts[:'check_suite_id'] if !opts[:'check_suite_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListWorkflowRunsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_workflow_runs_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_workflow_runs_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-run a job from a workflow run
    # Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Object]
    def actions_re_run_job_for_workflow_run(owner, repo, job_id, opts = {})
      data, _status_code, _headers = actions_re_run_job_for_workflow_run_with_http_info(owner, repo, job_id, opts)
      data
    end

    # Re-run a job from a workflow run
    # Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_re_run_job_for_workflow_run_with_http_info(owner, repo, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_re_run_job_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_re_run_job_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_re_run_job_for_workflow_run"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ActionsApi.actions_re_run_job_for_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_re_run_job_for_workflow_run_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_re_run_job_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_re_run_job_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-run a workflow
    # Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Object]
    def actions_re_run_workflow(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_re_run_workflow_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Re-run a workflow
    # Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_re_run_workflow_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_re_run_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_re_run_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_re_run_workflow"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_re_run_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_re_run_job_for_workflow_run_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_re_run_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_re_run_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-run failed jobs from a workflow run
    # Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Object]
    def actions_re_run_workflow_failed_jobs(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_re_run_workflow_failed_jobs_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Re-run failed jobs from a workflow run
    # Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_re_run_workflow_failed_jobs_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_re_run_workflow_failed_jobs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_re_run_workflow_failed_jobs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_re_run_workflow_failed_jobs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_re_run_workflow_failed_jobs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_re_run_job_for_workflow_run_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_re_run_workflow_failed_jobs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_re_run_workflow_failed_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all custom labels from a self-hosted runner for an organization
    # Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_org(org, runner_id, opts = {})
      data, _status_code, _headers = actions_remove_all_custom_labels_from_self_hosted_runner_for_org_with_http_info(org, runner_id, opts)
      data
    end

    # Remove all custom labels from a self-hosted runner for an organization
    # Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_all_custom_labels_from_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all custom labels from a self-hosted runner for a repository
    # Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_repo(owner, repo, runner_id, opts = {})
      data, _status_code, _headers = actions_remove_all_custom_labels_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts)
      data
    end

    # Remove all custom labels from a self-hosted runner for a repository
    # Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_all_custom_labels_from_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a custom label from a self-hosted runner for an organization
    # Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_remove_custom_label_from_self_hosted_runner_for_org(org, runner_id, name, opts = {})
      data, _status_code, _headers = actions_remove_custom_label_from_self_hosted_runner_for_org_with_http_info(org, runner_id, name, opts)
      data
    end

    # Remove a custom label from a self-hosted runner for an organization
    # Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_remove_custom_label_from_self_hosted_runner_for_org_with_http_info(org, runner_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels/{name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_custom_label_from_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a custom label from a self-hosted runner for a repository
    # Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_remove_custom_label_from_self_hosted_runner_for_repo(owner, repo, runner_id, name, opts = {})
      data, _status_code, _headers = actions_remove_custom_label_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, name, opts)
      data
    end

    # Remove a custom label from a self-hosted runner for a repository
    # Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_remove_custom_label_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_custom_label_from_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove repository access to a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_remove_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, repository_id, opts = {})
      actions_remove_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, repository_id, opts)
      nil
    end

    # Remove repository access to a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_remove_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_repo_access_to_self_hosted_runner_group_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_repo_access_to_self_hosted_runner_group_in_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_remove_repo_access_to_self_hosted_runner_group_in_org"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_remove_repo_access_to_self_hosted_runner_group_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_repo_access_to_self_hosted_runner_group_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_repo_access_to_self_hosted_runner_group_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_remove_selected_repo_from_org_secret(org, secret_name, repository_id, opts = {})
      actions_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_selected_repo_from_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_remove_selected_repo_from_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_selected_repo_from_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_selected_repo_from_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a self-hosted runner from a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_remove_self_hosted_runner_from_group_for_org(org, runner_group_id, runner_id, opts = {})
      actions_remove_self_hosted_runner_from_group_for_org_with_http_info(org, runner_group_id, runner_id, opts)
      nil
    end

    # Remove a self-hosted runner from a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_remove_self_hosted_runner_from_group_for_org_with_http_info(org, runner_group_id, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_self_hosted_runner_from_group_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_self_hosted_runner_from_group_for_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_remove_self_hosted_runner_from_group_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_self_hosted_runner_from_group_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_self_hosted_runner_from_group_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_self_hosted_runner_from_group_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review pending deployments for a workflow run
    # Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param actions_review_pending_deployments_for_run_request [ActionsReviewPendingDeploymentsForRunRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Deployment>]
    def actions_review_pending_deployments_for_run(owner, repo, run_id, actions_review_pending_deployments_for_run_request, opts = {})
      data, _status_code, _headers = actions_review_pending_deployments_for_run_with_http_info(owner, repo, run_id, actions_review_pending_deployments_for_run_request, opts)
      data
    end

    # Review pending deployments for a workflow run
    # Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param actions_review_pending_deployments_for_run_request [ActionsReviewPendingDeploymentsForRunRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Deployment>, Integer, Hash)>] Array<Deployment> data, response status code and response headers
    def actions_review_pending_deployments_for_run_with_http_info(owner, repo, run_id, actions_review_pending_deployments_for_run_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_review_pending_deployments_for_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # verify the required parameter 'actions_review_pending_deployments_for_run_request' is set
      if @api_client.config.client_side_validation && actions_review_pending_deployments_for_run_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_review_pending_deployments_for_run_request' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_review_pending_deployments_for_run_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Deployment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_review_pending_deployments_for_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_review_pending_deployments_for_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the GitHub Actions OIDC custom issuer policy for an enterprise
    # Sets the GitHub Actions OpenID Connect (OIDC) custom issuer policy for an enterprise. You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint. GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request [ActionsSetActionsOidcCustomIssuerPolicyForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_actions_oidc_custom_issuer_policy_for_enterprise(enterprise, actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request, opts = {})
      actions_set_actions_oidc_custom_issuer_policy_for_enterprise_with_http_info(enterprise, actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request, opts)
      nil
    end

    # Set the GitHub Actions OIDC custom issuer policy for an enterprise
    # Sets the GitHub Actions OpenID Connect (OIDC) custom issuer policy for an enterprise. You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;enterprise_administration:write&#x60; permission to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request [ActionsSetActionsOidcCustomIssuerPolicyForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_actions_oidc_custom_issuer_policy_for_enterprise_with_http_info(enterprise, actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_actions_oidc_custom_issuer_policy_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling ActionsApi.actions_set_actions_oidc_custom_issuer_policy_for_enterprise"
      end
      # verify the required parameter 'actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request' is set
      if @api_client.config.client_side_validation && actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request' when calling ActionsApi.actions_set_actions_oidc_custom_issuer_policy_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/oidc/customization/issuer'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_actions_oidc_custom_issuer_policy_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_actions_oidc_custom_issuer_policy_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_actions_oidc_custom_issuer_policy_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set allowed actions and reusable workflows for an organization
    # Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  If the organization belongs to an enterprise that has `selected` actions and reusable workflows set at the enterprise level, then you cannot override any of the enterprise's allowed actions and reusable workflows settings.  To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [EnterpriseAdminGetAllowedActionsEnterprise200Response] :enterprise_admin_get_allowed_actions_enterprise200_response 
    # @return [nil]
    def actions_set_allowed_actions_organization(org, opts = {})
      actions_set_allowed_actions_organization_with_http_info(org, opts)
      nil
    end

    # Set allowed actions and reusable workflows for an organization
    # Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  If the organization belongs to an enterprise that has &#x60;selected&#x60; actions and reusable workflows set at the enterprise level, then you cannot override any of the enterprise&#39;s allowed actions and reusable workflows settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories in the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [EnterpriseAdminGetAllowedActionsEnterprise200Response] :enterprise_admin_get_allowed_actions_enterprise200_response 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_allowed_actions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_allowed_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_allowed_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/selected-actions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'enterprise_admin_get_allowed_actions_enterprise200_response'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_allowed_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_allowed_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set allowed actions and reusable workflows for a repository
    # Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  If the repository belongs to an organization or enterprise that has `selected` actions and reusable workflows set at the organization or enterprise levels, then you cannot override any of the allowed actions and reusable workflows settings.  To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [EnterpriseAdminGetAllowedActionsEnterprise200Response] :enterprise_admin_get_allowed_actions_enterprise200_response 
    # @return [nil]
    def actions_set_allowed_actions_repository(owner, repo, opts = {})
      actions_set_allowed_actions_repository_with_http_info(owner, repo, opts)
      nil
    end

    # Set allowed actions and reusable workflows for a repository
    # Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  If the repository belongs to an organization or enterprise that has &#x60;selected&#x60; actions and reusable workflows set at the organization or enterprise levels, then you cannot override any of the allowed actions and reusable workflows settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [EnterpriseAdminGetAllowedActionsEnterprise200Response] :enterprise_admin_get_allowed_actions_enterprise200_response 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_allowed_actions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_allowed_actions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_allowed_actions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_allowed_actions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/selected-actions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'enterprise_admin_get_allowed_actions_enterprise200_response'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_allowed_actions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_allowed_actions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set custom labels for a self-hosted runner for an organization
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request [EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_set_custom_labels_for_self_hosted_runner_for_org(org, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts = {})
      data, _status_code, _headers = actions_set_custom_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts)
      data
    end

    # Set custom labels for a self-hosted runner for an organization
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request [EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_set_custom_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org"
      end
      # verify the required parameter 'enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_custom_labels_for_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set custom labels for a self-hosted runner for a repository
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request [EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def actions_set_custom_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts = {})
      data, _status_code, _headers = actions_set_custom_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts)
      data
    end

    # Set custom labels for a self-hosted runner for a repository
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request [EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def actions_set_custom_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_custom_labels_for_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the opt-in flag of an OIDC subject claim customization for a repository
    # Sets the `opt-in` or `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param the_json_payload_enables_disables_the_use_of_sub_claim_customization [TheJsonPayloadEnablesDisablesTheUseOfSubClaimCustomization] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_set_custom_oidc_sub_claim_for_repo(owner, repo, the_json_payload_enables_disables_the_use_of_sub_claim_customization, opts = {})
      data, _status_code, _headers = actions_set_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, the_json_payload_enables_disables_the_use_of_sub_claim_customization, opts)
      data
    end

    # Set the opt-in flag of an OIDC subject claim customization for a repository
    # Sets the &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param the_json_payload_enables_disables_the_use_of_sub_claim_customization [TheJsonPayloadEnablesDisablesTheUseOfSubClaimCustomization] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_set_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, the_json_payload_enables_disables_the_use_of_sub_claim_customization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_custom_oidc_sub_claim_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_custom_oidc_sub_claim_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_custom_oidc_sub_claim_for_repo"
      end
      # verify the required parameter 'the_json_payload_enables_disables_the_use_of_sub_claim_customization' is set
      if @api_client.config.client_side_validation && the_json_payload_enables_disables_the_use_of_sub_claim_customization.nil?
        fail ArgumentError, "Missing the required parameter 'the_json_payload_enables_disables_the_use_of_sub_claim_customization' when calling ActionsApi.actions_set_custom_oidc_sub_claim_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/oidc/customization/sub'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(the_json_payload_enables_disables_the_use_of_sub_claim_customization)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_custom_oidc_sub_claim_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_custom_oidc_sub_claim_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default workflow permissions for an enterprise
    # Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise, and sets whether GitHub Actions can submit approving pull request reviews. For more information, see \"[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint. GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param actions_set_github_actions_default_workflow_permissions_enterprise_request [ActionsSetGithubActionsDefaultWorkflowPermissionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_github_actions_default_workflow_permissions_enterprise(enterprise, actions_set_github_actions_default_workflow_permissions_enterprise_request, opts = {})
      actions_set_github_actions_default_workflow_permissions_enterprise_with_http_info(enterprise, actions_set_github_actions_default_workflow_permissions_enterprise_request, opts)
      nil
    end

    # Set default workflow permissions for an enterprise
    # Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an enterprise, and sets whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;enterprise_administration:write&#x60; permission to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param actions_set_github_actions_default_workflow_permissions_enterprise_request [ActionsSetGithubActionsDefaultWorkflowPermissionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_default_workflow_permissions_enterprise_with_http_info(enterprise, actions_set_github_actions_default_workflow_permissions_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_default_workflow_permissions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_enterprise"
      end
      # verify the required parameter 'actions_set_github_actions_default_workflow_permissions_enterprise_request' is set
      if @api_client.config.client_side_validation && actions_set_github_actions_default_workflow_permissions_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_github_actions_default_workflow_permissions_enterprise_request' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/workflow'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_github_actions_default_workflow_permissions_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_default_workflow_permissions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_default_workflow_permissions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default workflow permissions for an organization
    # Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsSetGithubActionsDefaultWorkflowPermissionsEnterpriseRequest] :actions_set_github_actions_default_workflow_permissions_enterprise_request 
    # @return [nil]
    def actions_set_github_actions_default_workflow_permissions_organization(org, opts = {})
      actions_set_github_actions_default_workflow_permissions_organization_with_http_info(org, opts)
      nil
    end

    # Set default workflow permissions for an organization
    # Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsSetGithubActionsDefaultWorkflowPermissionsEnterpriseRequest] :actions_set_github_actions_default_workflow_permissions_enterprise_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_default_workflow_permissions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_default_workflow_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/workflow'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_set_github_actions_default_workflow_permissions_enterprise_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_default_workflow_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_default_workflow_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default workflow permissions for a repository
    # Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param actions_set_github_actions_default_workflow_permissions_enterprise_request [ActionsSetGithubActionsDefaultWorkflowPermissionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_github_actions_default_workflow_permissions_repository(owner, repo, actions_set_github_actions_default_workflow_permissions_enterprise_request, opts = {})
      actions_set_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, actions_set_github_actions_default_workflow_permissions_enterprise_request, opts)
      nil
    end

    # Set default workflow permissions for a repository
    # Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param actions_set_github_actions_default_workflow_permissions_enterprise_request [ActionsSetGithubActionsDefaultWorkflowPermissionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, actions_set_github_actions_default_workflow_permissions_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_default_workflow_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_repository"
      end
      # verify the required parameter 'actions_set_github_actions_default_workflow_permissions_enterprise_request' is set
      if @api_client.config.client_side_validation && actions_set_github_actions_default_workflow_permissions_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_github_actions_default_workflow_permissions_enterprise_request' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/workflow'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_github_actions_default_workflow_permissions_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_default_workflow_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_default_workflow_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set GitHub Actions permissions for an organization
    # Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions and reusable workflows, then you cannot override them for the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_organization_request [ActionsSetGithubActionsPermissionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_github_actions_permissions_organization(org, actions_set_github_actions_permissions_organization_request, opts = {})
      actions_set_github_actions_permissions_organization_with_http_info(org, actions_set_github_actions_permissions_organization_request, opts)
      nil
    end

    # Set GitHub Actions permissions for an organization
    # Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions and reusable workflows, then you cannot override them for the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_organization_request [ActionsSetGithubActionsPermissionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_permissions_organization_with_http_info(org, actions_set_github_actions_permissions_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_github_actions_permissions_organization"
      end
      # verify the required parameter 'actions_set_github_actions_permissions_organization_request' is set
      if @api_client.config.client_side_validation && actions_set_github_actions_permissions_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_github_actions_permissions_organization_request' when calling ActionsApi.actions_set_github_actions_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_github_actions_permissions_organization_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set GitHub Actions permissions for a repository
    # Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions and reusable workflows, then you cannot override them for the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_repository_request [ActionsSetGithubActionsPermissionsRepositoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_github_actions_permissions_repository(owner, repo, actions_set_github_actions_permissions_repository_request, opts = {})
      actions_set_github_actions_permissions_repository_with_http_info(owner, repo, actions_set_github_actions_permissions_repository_request, opts)
      nil
    end

    # Set GitHub Actions permissions for a repository
    # Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions and reusable workflows, then you cannot override them for the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_repository_request [ActionsSetGithubActionsPermissionsRepositoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_permissions_repository_with_http_info(owner, repo, actions_set_github_actions_permissions_repository_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_github_actions_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_github_actions_permissions_repository"
      end
      # verify the required parameter 'actions_set_github_actions_permissions_repository_request' is set
      if @api_client.config.client_side_validation && actions_set_github_actions_permissions_repository_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_github_actions_permissions_repository_request' when calling ActionsApi.actions_set_github_actions_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_github_actions_permissions_repository_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set repository access for a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param actions_set_repo_access_to_self_hosted_runner_group_in_org_request [ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, actions_set_repo_access_to_self_hosted_runner_group_in_org_request, opts = {})
      actions_set_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, actions_set_repo_access_to_self_hosted_runner_group_in_org_request, opts)
      nil
    end

    # Set repository access for a self-hosted runner group in an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param actions_set_repo_access_to_self_hosted_runner_group_in_org_request [ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_repo_access_to_self_hosted_runner_group_in_org_with_http_info(org, runner_group_id, actions_set_repo_access_to_self_hosted_runner_group_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_repo_access_to_self_hosted_runner_group_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_repo_access_to_self_hosted_runner_group_in_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_set_repo_access_to_self_hosted_runner_group_in_org"
      end
      # verify the required parameter 'actions_set_repo_access_to_self_hosted_runner_group_in_org_request' is set
      if @api_client.config.client_side_validation && actions_set_repo_access_to_self_hosted_runner_group_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_repo_access_to_self_hosted_runner_group_in_org_request' when calling ActionsApi.actions_set_repo_access_to_self_hosted_runner_group_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_repo_access_to_self_hosted_runner_group_in_org_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_repo_access_to_self_hosted_runner_group_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_repo_access_to_self_hosted_runner_group_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_set_selected_repos_for_org_secret_request [ActionsSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_selected_repos_for_org_secret(org, secret_name, actions_set_selected_repos_for_org_secret_request, opts = {})
      actions_set_selected_repos_for_org_secret_with_http_info(org, secret_name, actions_set_selected_repos_for_org_secret_request, opts)
      nil
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_set_selected_repos_for_org_secret_request [ActionsSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_selected_repos_for_org_secret_with_http_info(org, secret_name, actions_set_selected_repos_for_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'actions_set_selected_repos_for_org_secret_request' is set
      if @api_client.config.client_side_validation && actions_set_selected_repos_for_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_selected_repos_for_org_secret_request' when calling ActionsApi.actions_set_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_selected_repos_for_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories enabled for GitHub Actions in an organization
    # Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_selected_repositories_enabled_github_actions_organization_request [ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_selected_repositories_enabled_github_actions_organization(org, actions_set_selected_repositories_enabled_github_actions_organization_request, opts = {})
      actions_set_selected_repositories_enabled_github_actions_organization_with_http_info(org, actions_set_selected_repositories_enabled_github_actions_organization_request, opts)
      nil
    end

    # Set selected repositories enabled for GitHub Actions in an organization
    # Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_selected_repositories_enabled_github_actions_organization_request [ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_selected_repositories_enabled_github_actions_organization_with_http_info(org, actions_set_selected_repositories_enabled_github_actions_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization"
      end
      # verify the required parameter 'actions_set_selected_repositories_enabled_github_actions_organization_request' is set
      if @api_client.config.client_side_validation && actions_set_selected_repositories_enabled_github_actions_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_selected_repositories_enabled_github_actions_organization_request' when calling ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_selected_repositories_enabled_github_actions_organization_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_selected_repositories_enabled_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set self-hosted runners in a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Replaces the list of self-hosted runners that are part of an organization runner group.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request [EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_self_hosted_runners_in_group_for_org(org, runner_group_id, enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request, opts = {})
      actions_set_self_hosted_runners_in_group_for_org_with_http_info(org, runner_group_id, enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request, opts)
      nil
    end

    # Set self-hosted runners in a group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Replaces the list of self-hosted runners that are part of an organization runner group.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request [EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_self_hosted_runners_in_group_for_org_with_http_info(org, runner_group_id, enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_self_hosted_runners_in_group_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_self_hosted_runners_in_group_for_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_set_self_hosted_runners_in_group_for_org"
      end
      # verify the required parameter 'enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request' when calling ActionsApi.actions_set_self_hosted_runners_in_group_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_self_hosted_runners_in_group_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_self_hosted_runners_in_group_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the level of access for workflows outside of the repository
    # Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to internal and private repositories. For more information, see \"[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\" for GitHub.com and \"[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-cloud@latest/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)\" for GitHub Enterprise Cloud.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param actions_get_workflow_access_to_repository200_response [ActionsGetWorkflowAccessToRepository200Response] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_workflow_access_to_repository(owner, repo, actions_get_workflow_access_to_repository200_response, opts = {})
      actions_set_workflow_access_to_repository_with_http_info(owner, repo, actions_get_workflow_access_to_repository200_response, opts)
      nil
    end

    # Set the level of access for workflows outside of the repository
    # Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to internal and private repositories. For more information, see \&quot;[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot; for GitHub.com and \&quot;[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-cloud@latest/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)\&quot; for GitHub Enterprise Cloud.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param actions_get_workflow_access_to_repository200_response [ActionsGetWorkflowAccessToRepository200Response] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_workflow_access_to_repository_with_http_info(owner, repo, actions_get_workflow_access_to_repository200_response, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_workflow_access_to_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_workflow_access_to_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_workflow_access_to_repository"
      end
      # verify the required parameter 'actions_get_workflow_access_to_repository200_response' is set
      if @api_client.config.client_side_validation && actions_get_workflow_access_to_repository200_response.nil?
        fail ArgumentError, "Missing the required parameter 'actions_get_workflow_access_to_repository200_response' when calling ActionsApi.actions_set_workflow_access_to_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/access'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_get_workflow_access_to_repository200_response)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_workflow_access_to_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_workflow_access_to_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a self-hosted runner group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Updates the `name` and `visibility` of a self-hosted runner group in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param actions_update_self_hosted_runner_group_for_org_request [ActionsUpdateSelfHostedRunnerGroupForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner]
    def actions_update_self_hosted_runner_group_for_org(org, runner_group_id, actions_update_self_hosted_runner_group_for_org_request, opts = {})
      data, _status_code, _headers = actions_update_self_hosted_runner_group_for_org_with_http_info(org, runner_group_id, actions_update_self_hosted_runner_group_for_org_request, opts)
      data
    end

    # Update a self-hosted runner group for an organization
    # The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param actions_update_self_hosted_runner_group_for_org_request [ActionsUpdateSelfHostedRunnerGroupForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner, Integer, Hash)>] ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner data, response status code and response headers
    def actions_update_self_hosted_runner_group_for_org_with_http_info(org, runner_group_id, actions_update_self_hosted_runner_group_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_update_self_hosted_runner_group_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_update_self_hosted_runner_group_for_org"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling ActionsApi.actions_update_self_hosted_runner_group_for_org"
      end
      # verify the required parameter 'actions_update_self_hosted_runner_group_for_org_request' is set
      if @api_client.config.client_side_validation && actions_update_self_hosted_runner_group_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_update_self_hosted_runner_group_for_org_request' when calling ActionsApi.actions_update_self_hosted_runner_group_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runner-groups/{runner_group_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_update_self_hosted_runner_group_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnerGroupsForOrg200ResponseRunnerGroupsInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_update_self_hosted_runner_group_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_update_self_hosted_runner_group_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
