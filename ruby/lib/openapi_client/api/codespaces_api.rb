=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class CodespacesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a selected repository to a user secret
    # Adds a repository to the selected repositories for a user's codespace secret. You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def codespaces_add_repository_for_secret_for_authenticated_user(secret_name, repository_id, opts = {})
      codespaces_add_repository_for_secret_for_authenticated_user_with_http_info(secret_name, repository_id, opts)
      nil
    end

    # Add a selected repository to a user secret
    # Adds a repository to the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on the referenced repository to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def codespaces_add_repository_for_secret_for_authenticated_user_with_http_info(secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_add_repository_for_secret_for_authenticated_user ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_add_repository_for_secret_for_authenticated_user"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling CodespacesApi.codespaces_add_repository_for_secret_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_add_repository_for_secret_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_add_repository_for_secret_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List machine types for a codespace
    # List the machine types a codespace can transition to use.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [CodespacesRepoMachinesForAuthenticatedUser200Response]
    def codespaces_codespace_machines_for_authenticated_user(codespace_name, opts = {})
      data, _status_code, _headers = codespaces_codespace_machines_for_authenticated_user_with_http_info(codespace_name, opts)
      data
    end

    # List machine types for a codespace
    # List the machine types a codespace can transition to use.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodespacesRepoMachinesForAuthenticatedUser200Response, Integer, Hash)>] CodespacesRepoMachinesForAuthenticatedUser200Response data, response status code and response headers
    def codespaces_codespace_machines_for_authenticated_user_with_http_info(codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_codespace_machines_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_codespace_machines_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}/machines'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesRepoMachinesForAuthenticatedUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_codespace_machines_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_codespace_machines_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a codespace for the authenticated user
    # Creates a new codespace, owned by the authenticated user.  This endpoint requires either a `repository_id` OR a `pull_request` but not both.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
    # @param codespaces_create_for_authenticated_user_request [CodespacesCreateForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Codespace]
    def codespaces_create_for_authenticated_user(codespaces_create_for_authenticated_user_request, opts = {})
      data, _status_code, _headers = codespaces_create_for_authenticated_user_with_http_info(codespaces_create_for_authenticated_user_request, opts)
      data
    end

    # Create a codespace for the authenticated user
    # Creates a new codespace, owned by the authenticated user.  This endpoint requires either a &#x60;repository_id&#x60; OR a &#x60;pull_request&#x60; but not both.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param codespaces_create_for_authenticated_user_request [CodespacesCreateForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_create_for_authenticated_user_with_http_info(codespaces_create_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_create_for_authenticated_user ...'
      end
      # verify the required parameter 'codespaces_create_for_authenticated_user_request' is set
      if @api_client.config.client_side_validation && codespaces_create_for_authenticated_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'codespaces_create_for_authenticated_user_request' when calling CodespacesApi.codespaces_create_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(codespaces_create_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_create_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_create_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint.  #### Example of encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example of encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example of encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example of encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param codespaces_create_or_update_repo_secret_request [CodespacesCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def codespaces_create_or_update_repo_secret(owner, repo, secret_name, codespaces_create_or_update_repo_secret_request, opts = {})
      data, _status_code, _headers = codespaces_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, codespaces_create_or_update_repo_secret_request, opts)
      data
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.  #### Example of encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example of encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example of encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param codespaces_create_or_update_repo_secret_request [CodespacesCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def codespaces_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, codespaces_create_or_update_repo_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_create_or_update_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_create_or_update_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_create_or_update_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_create_or_update_repo_secret"
      end
      # verify the required parameter 'codespaces_create_or_update_repo_secret_request' is set
      if @api_client.config.client_side_validation && codespaces_create_or_update_repo_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'codespaces_create_or_update_repo_secret_request' when calling CodespacesApi.codespaces_create_or_update_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(codespaces_create_or_update_repo_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_create_or_update_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_create_or_update_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a secret for the authenticated user
    # Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).  You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.  GitHub Apps must have read access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
    # @param secret_name [String] The name of the secret.
    # @param codespaces_create_or_update_secret_for_authenticated_user_request [CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def codespaces_create_or_update_secret_for_authenticated_user(secret_name, codespaces_create_or_update_secret_for_authenticated_user_request, opts = {})
      data, _status_code, _headers = codespaces_create_or_update_secret_for_authenticated_user_with_http_info(secret_name, codespaces_create_or_update_secret_for_authenticated_user_request, opts)
      data
    end

    # Create or update a secret for the authenticated user
    # Creates or updates a secret for a user&#39;s codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must also have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission and &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    # @param secret_name [String] The name of the secret.
    # @param codespaces_create_or_update_secret_for_authenticated_user_request [CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def codespaces_create_or_update_secret_for_authenticated_user_with_http_info(secret_name, codespaces_create_or_update_secret_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_create_or_update_secret_for_authenticated_user ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_create_or_update_secret_for_authenticated_user"
      end
      # verify the required parameter 'codespaces_create_or_update_secret_for_authenticated_user_request' is set
      if @api_client.config.client_side_validation && codespaces_create_or_update_secret_for_authenticated_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'codespaces_create_or_update_secret_for_authenticated_user_request' when calling CodespacesApi.codespaces_create_or_update_secret_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/{secret_name}'.sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(codespaces_create_or_update_secret_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_create_or_update_secret_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_create_or_update_secret_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a codespace from a pull request
    # Creates a codespace owned by the authenticated user for the specified pull request.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param codespaces_create_with_pr_for_authenticated_user_request [CodespacesCreateWithPrForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Codespace]
    def codespaces_create_with_pr_for_authenticated_user(owner, repo, pull_number, codespaces_create_with_pr_for_authenticated_user_request, opts = {})
      data, _status_code, _headers = codespaces_create_with_pr_for_authenticated_user_with_http_info(owner, repo, pull_number, codespaces_create_with_pr_for_authenticated_user_request, opts)
      data
    end

    # Create a codespace from a pull request
    # Creates a codespace owned by the authenticated user for the specified pull request.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param codespaces_create_with_pr_for_authenticated_user_request [CodespacesCreateWithPrForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_create_with_pr_for_authenticated_user_with_http_info(owner, repo, pull_number, codespaces_create_with_pr_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_create_with_pr_for_authenticated_user ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_create_with_pr_for_authenticated_user"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_create_with_pr_for_authenticated_user"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling CodespacesApi.codespaces_create_with_pr_for_authenticated_user"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/codespaces'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(codespaces_create_with_pr_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_create_with_pr_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_create_with_pr_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a codespace in a repository
    # Creates a codespace owned by the authenticated user in the specified repository.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param codespaces_create_with_repo_for_authenticated_user_request [CodespacesCreateWithRepoForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Codespace]
    def codespaces_create_with_repo_for_authenticated_user(owner, repo, codespaces_create_with_repo_for_authenticated_user_request, opts = {})
      data, _status_code, _headers = codespaces_create_with_repo_for_authenticated_user_with_http_info(owner, repo, codespaces_create_with_repo_for_authenticated_user_request, opts)
      data
    end

    # Create a codespace in a repository
    # Creates a codespace owned by the authenticated user in the specified repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param codespaces_create_with_repo_for_authenticated_user_request [CodespacesCreateWithRepoForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_create_with_repo_for_authenticated_user_with_http_info(owner, repo, codespaces_create_with_repo_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_create_with_repo_for_authenticated_user ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_create_with_repo_for_authenticated_user"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_create_with_repo_for_authenticated_user"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(codespaces_create_with_repo_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_create_with_repo_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_create_with_repo_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a codespace for the authenticated user
    # Deletes a user's codespace.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def codespaces_delete_for_authenticated_user(codespace_name, opts = {})
      data, _status_code, _headers = codespaces_delete_for_authenticated_user_with_http_info(codespace_name, opts)
      data
    end

    # Delete a codespace for the authenticated user
    # Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def codespaces_delete_for_authenticated_user_with_http_info(codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_delete_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_delete_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_delete_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_delete_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a codespace from the organization
    # Deletes a user's codespace.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def codespaces_delete_from_organization(org, username, codespace_name, opts = {})
      data, _status_code, _headers = codespaces_delete_from_organization_with_http_info(org, username, codespace_name, opts)
      data
    end

    # Delete a codespace from the organization
    # Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def codespaces_delete_from_organization_with_http_info(org, username, codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_delete_from_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodespacesApi.codespaces_delete_from_organization"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling CodespacesApi.codespaces_delete_from_organization"
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_delete_from_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/members/{username}/codespaces/{codespace_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_delete_from_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_delete_from_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def codespaces_delete_repo_secret(owner, repo, secret_name, opts = {})
      codespaces_delete_repo_secret_with_http_info(owner, repo, secret_name, opts)
      nil
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def codespaces_delete_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_delete_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_delete_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_delete_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_delete_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_delete_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_delete_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a secret for the authenticated user
    # Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def codespaces_delete_secret_for_authenticated_user(secret_name, opts = {})
      codespaces_delete_secret_for_authenticated_user_with_http_info(secret_name, opts)
      nil
    end

    # Delete a secret for the authenticated user
    # Deletes a secret from a user&#39;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def codespaces_delete_secret_for_authenticated_user_with_http_info(secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_delete_secret_for_authenticated_user ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_delete_secret_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/{secret_name}'.sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_delete_secret_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_delete_secret_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export a codespace for the authenticated user
    # Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  You must authenticate using a personal access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [FetchesInformationAboutAnExportOfACodespace]
    def codespaces_export_for_authenticated_user(codespace_name, opts = {})
      data, _status_code, _headers = codespaces_export_for_authenticated_user_with_http_info(codespace_name, opts)
      data
    end

    # Export a codespace for the authenticated user
    # Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FetchesInformationAboutAnExportOfACodespace, Integer, Hash)>] FetchesInformationAboutAnExportOfACodespace data, response status code and response headers
    def codespaces_export_for_authenticated_user_with_http_info(codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_export_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_export_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}/exports'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FetchesInformationAboutAnExportOfACodespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_export_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_export_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details about a codespace export
    # Gets information about an export of a codespace.  You must authenticate using a personal access token with the `codespace` scope to use this endpoint.  GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param export_id [String] The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported.
    # @param [Hash] opts the optional parameters
    # @return [FetchesInformationAboutAnExportOfACodespace]
    def codespaces_get_export_details_for_authenticated_user(codespace_name, export_id, opts = {})
      data, _status_code, _headers = codespaces_get_export_details_for_authenticated_user_with_http_info(codespace_name, export_id, opts)
      data
    end

    # Get details about a codespace export
    # Gets information about an export of a codespace.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param export_id [String] The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FetchesInformationAboutAnExportOfACodespace, Integer, Hash)>] FetchesInformationAboutAnExportOfACodespace data, response status code and response headers
    def codespaces_get_export_details_for_authenticated_user_with_http_info(codespace_name, export_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_get_export_details_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_get_export_details_for_authenticated_user"
      end
      # verify the required parameter 'export_id' is set
      if @api_client.config.client_side_validation && export_id.nil?
        fail ArgumentError, "Missing the required parameter 'export_id' when calling CodespacesApi.codespaces_get_export_details_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}/exports/{export_id}'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s)).sub('{' + 'export_id' + '}', CGI.escape(export_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FetchesInformationAboutAnExportOfACodespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_get_export_details_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_get_export_details_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a codespace for the authenticated user
    # Gets information about a user's codespace.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Codespace]
    def codespaces_get_for_authenticated_user(codespace_name, opts = {})
      data, _status_code, _headers = codespaces_get_for_authenticated_user_with_http_info(codespace_name, opts)
      data
    end

    # Get a codespace for the authenticated user
    # Gets information about a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_get_for_authenticated_user_with_http_info(codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_get_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_get_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_get_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_get_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get public key for the authenticated user
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @return [CodespacesUserPublicKey]
    def codespaces_get_public_key_for_authenticated_user(opts = {})
      data, _status_code, _headers = codespaces_get_public_key_for_authenticated_user_with_http_info(opts)
      data
    end

    # Get public key for the authenticated user
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodespacesUserPublicKey, Integer, Hash)>] CodespacesUserPublicKey data, response status code and response headers
    def codespaces_get_public_key_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_get_public_key_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/public-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesUserPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_get_public_key_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_get_public_key_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [CodespacesPublicKey]
    def codespaces_get_repo_public_key(owner, repo, opts = {})
      data, _status_code, _headers = codespaces_get_repo_public_key_with_http_info(owner, repo, opts)
      data
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodespacesPublicKey, Integer, Hash)>] CodespacesPublicKey data, response status code and response headers
    def codespaces_get_repo_public_key_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_get_repo_public_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_get_repo_public_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_get_repo_public_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/secrets/public-key'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_get_repo_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_get_repo_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [CodespacesSecret]
    def codespaces_get_repo_secret(owner, repo, secret_name, opts = {})
      data, _status_code, _headers = codespaces_get_repo_secret_with_http_info(owner, repo, secret_name, opts)
      data
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodespacesSecret, Integer, Hash)>] CodespacesSecret data, response status code and response headers
    def codespaces_get_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_get_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_get_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_get_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_get_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_get_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_get_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a secret for the authenticated user
    # Gets a secret available to a user's codespaces without revealing its encrypted value.  You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [CodespacesSecret1]
    def codespaces_get_secret_for_authenticated_user(secret_name, opts = {})
      data, _status_code, _headers = codespaces_get_secret_for_authenticated_user_with_http_info(secret_name, opts)
      data
    end

    # Get a secret for the authenticated user
    # Gets a secret available to a user&#39;s codespaces without revealing its encrypted value.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodespacesSecret1, Integer, Hash)>] CodespacesSecret1 data, response status code and response headers
    def codespaces_get_secret_for_authenticated_user_with_http_info(secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_get_secret_for_authenticated_user ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_get_secret_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/{secret_name}'.sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesSecret1'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_get_secret_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_get_secret_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List devcontainer configurations in a repository for the authenticated user
    # Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response]
    def codespaces_list_devcontainers_in_repository_for_authenticated_user(owner, repo, opts = {})
      data, _status_code, _headers = codespaces_list_devcontainers_in_repository_for_authenticated_user_with_http_info(owner, repo, opts)
      data
    end

    # List devcontainer configurations in a repository for the authenticated user
    # Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response, Integer, Hash)>] CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response data, response status code and response headers
    def codespaces_list_devcontainers_in_repository_for_authenticated_user_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_list_devcontainers_in_repository_for_authenticated_user ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_list_devcontainers_in_repository_for_authenticated_user"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_list_devcontainers_in_repository_for_authenticated_user"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/devcontainers'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_list_devcontainers_in_repository_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_list_devcontainers_in_repository_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List codespaces for the authenticated user
    # Lists the authenticated user's codespaces.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :repository_id ID of the Repository to filter on
    # @return [CodespacesListInOrganization200Response]
    def codespaces_list_for_authenticated_user(opts = {})
      data, _status_code, _headers = codespaces_list_for_authenticated_user_with_http_info(opts)
      data
    end

    # List codespaces for the authenticated user
    # Lists the authenticated user&#39;s codespaces.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :repository_id ID of the Repository to filter on
    # @return [Array<(CodespacesListInOrganization200Response, Integer, Hash)>] CodespacesListInOrganization200Response data, response status code and response headers
    def codespaces_list_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_list_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/codespaces'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'repository_id'] = opts[:'repository_id'] if !opts[:'repository_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesListInOrganization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_list_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_list_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List codespaces for the organization
    # Lists the codespaces associated to a specified organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [CodespacesListInOrganization200Response]
    def codespaces_list_in_organization(org, opts = {})
      data, _status_code, _headers = codespaces_list_in_organization_with_http_info(org, opts)
      data
    end

    # List codespaces for the organization
    # Lists the codespaces associated to a specified organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(CodespacesListInOrganization200Response, Integer, Hash)>] CodespacesListInOrganization200Response data, response status code and response headers
    def codespaces_list_in_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_list_in_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodespacesApi.codespaces_list_in_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/codespaces'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesListInOrganization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_list_in_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_list_in_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List codespaces in a repository for the authenticated user
    # Lists the codespaces associated to a specified repository and the authenticated user.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [CodespacesListInOrganization200Response]
    def codespaces_list_in_repository_for_authenticated_user(owner, repo, opts = {})
      data, _status_code, _headers = codespaces_list_in_repository_for_authenticated_user_with_http_info(owner, repo, opts)
      data
    end

    # List codespaces in a repository for the authenticated user
    # Lists the codespaces associated to a specified repository and the authenticated user.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(CodespacesListInOrganization200Response, Integer, Hash)>] CodespacesListInOrganization200Response data, response status code and response headers
    def codespaces_list_in_repository_for_authenticated_user_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_list_in_repository_for_authenticated_user ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_list_in_repository_for_authenticated_user"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_list_in_repository_for_authenticated_user"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesListInOrganization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_list_in_repository_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_list_in_repository_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [CodespacesListRepoSecrets200Response]
    def codespaces_list_repo_secrets(owner, repo, opts = {})
      data, _status_code, _headers = codespaces_list_repo_secrets_with_http_info(owner, repo, opts)
      data
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(CodespacesListRepoSecrets200Response, Integer, Hash)>] CodespacesListRepoSecrets200Response data, response status code and response headers
    def codespaces_list_repo_secrets_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_list_repo_secrets ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_list_repo_secrets"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_list_repo_secrets"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/secrets'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesListRepoSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_list_repo_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_list_repo_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories for a user secret
    # List the repositories that have been granted the ability to use a user's codespace secret.  You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListSelectedReposForOrgSecret200Response]
    def codespaces_list_repositories_for_secret_for_authenticated_user(secret_name, opts = {})
      data, _status_code, _headers = codespaces_list_repositories_for_secret_for_authenticated_user_with_http_info(secret_name, opts)
      data
    end

    # List selected repositories for a user secret
    # List the repositories that have been granted the ability to use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListSelectedReposForOrgSecret200Response, Integer, Hash)>] ActionsListSelectedReposForOrgSecret200Response data, response status code and response headers
    def codespaces_list_repositories_for_secret_for_authenticated_user_with_http_info(secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_list_repositories_for_secret_for_authenticated_user ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_list_repositories_for_secret_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/{secret_name}/repositories'.sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedReposForOrgSecret200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_list_repositories_for_secret_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_list_repositories_for_secret_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List secrets for the authenticated user
    # Lists all secrets available for a user's Codespaces without revealing their encrypted values.  You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [CodespacesListSecretsForAuthenticatedUser200Response]
    def codespaces_list_secrets_for_authenticated_user(opts = {})
      data, _status_code, _headers = codespaces_list_secrets_for_authenticated_user_with_http_info(opts)
      data
    end

    # List secrets for the authenticated user
    # Lists all secrets available for a user&#39;s Codespaces without revealing their encrypted values.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(CodespacesListSecretsForAuthenticatedUser200Response, Integer, Hash)>] CodespacesListSecretsForAuthenticatedUser200Response data, response status code and response headers
    def codespaces_list_secrets_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_list_secrets_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/codespaces/secrets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesListSecretsForAuthenticatedUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_list_secrets_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_list_secrets_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default attributes for a codespace
    # Gets the default attributes for codespaces created by the user with the repository.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
    # @option opts [String] :client_ip An alternative IP for default location auto-detection, such as when proxying a request.
    # @return [CodespacesPreFlightWithRepoForAuthenticatedUser200Response]
    def codespaces_pre_flight_with_repo_for_authenticated_user(owner, repo, opts = {})
      data, _status_code, _headers = codespaces_pre_flight_with_repo_for_authenticated_user_with_http_info(owner, repo, opts)
      data
    end

    # Get default attributes for a codespace
    # Gets the default attributes for codespaces created by the user with the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
    # @option opts [String] :client_ip An alternative IP for default location auto-detection, such as when proxying a request.
    # @return [Array<(CodespacesPreFlightWithRepoForAuthenticatedUser200Response, Integer, Hash)>] CodespacesPreFlightWithRepoForAuthenticatedUser200Response data, response status code and response headers
    def codespaces_pre_flight_with_repo_for_authenticated_user_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_pre_flight_with_repo_for_authenticated_user ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_pre_flight_with_repo_for_authenticated_user"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_pre_flight_with_repo_for_authenticated_user"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/new'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?
      query_params[:'client_ip'] = opts[:'client_ip'] if !opts[:'client_ip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesPreFlightWithRepoForAuthenticatedUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_pre_flight_with_repo_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_pre_flight_with_repo_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a selected repository from a user secret
    # Removes a repository from the selected repositories for a user's codespace secret. You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def codespaces_remove_repository_for_secret_for_authenticated_user(secret_name, repository_id, opts = {})
      codespaces_remove_repository_for_secret_for_authenticated_user_with_http_info(secret_name, repository_id, opts)
      nil
    end

    # Remove a selected repository from a user secret
    # Removes a repository from the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def codespaces_remove_repository_for_secret_for_authenticated_user_with_http_info(secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_remove_repository_for_secret_for_authenticated_user ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_remove_repository_for_secret_for_authenticated_user"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling CodespacesApi.codespaces_remove_repository_for_secret_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_remove_repository_for_secret_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_remove_repository_for_secret_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List available machine types for a repository
    # List the machine types available for a given repository based on its configuration.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location to check for available machines. Assigned by IP if not provided.
    # @option opts [String] :client_ip IP for location auto-detection when proxying a request
    # @return [CodespacesRepoMachinesForAuthenticatedUser200Response]
    def codespaces_repo_machines_for_authenticated_user(owner, repo, opts = {})
      data, _status_code, _headers = codespaces_repo_machines_for_authenticated_user_with_http_info(owner, repo, opts)
      data
    end

    # List available machine types for a repository
    # List the machine types available for a given repository based on its configuration.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location to check for available machines. Assigned by IP if not provided.
    # @option opts [String] :client_ip IP for location auto-detection when proxying a request
    # @return [Array<(CodespacesRepoMachinesForAuthenticatedUser200Response, Integer, Hash)>] CodespacesRepoMachinesForAuthenticatedUser200Response data, response status code and response headers
    def codespaces_repo_machines_for_authenticated_user_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_repo_machines_for_authenticated_user ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodespacesApi.codespaces_repo_machines_for_authenticated_user"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodespacesApi.codespaces_repo_machines_for_authenticated_user"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/codespaces/machines'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'client_ip'] = opts[:'client_ip'] if !opts[:'client_ip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodespacesRepoMachinesForAuthenticatedUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_repo_machines_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_repo_machines_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories for a user secret
    # Select the repositories that will use a user's codespace secret.  You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param codespaces_set_repositories_for_secret_for_authenticated_user_request [CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def codespaces_set_repositories_for_secret_for_authenticated_user(secret_name, codespaces_set_repositories_for_secret_for_authenticated_user_request, opts = {})
      codespaces_set_repositories_for_secret_for_authenticated_user_with_http_info(secret_name, codespaces_set_repositories_for_secret_for_authenticated_user_request, opts)
      nil
    end

    # Set selected repositories for a user secret
    # Select the repositories that will use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
    # @param secret_name [String] The name of the secret.
    # @param codespaces_set_repositories_for_secret_for_authenticated_user_request [CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def codespaces_set_repositories_for_secret_for_authenticated_user_with_http_info(secret_name, codespaces_set_repositories_for_secret_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_set_repositories_for_secret_for_authenticated_user ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling CodespacesApi.codespaces_set_repositories_for_secret_for_authenticated_user"
      end
      # verify the required parameter 'codespaces_set_repositories_for_secret_for_authenticated_user_request' is set
      if @api_client.config.client_side_validation && codespaces_set_repositories_for_secret_for_authenticated_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'codespaces_set_repositories_for_secret_for_authenticated_user_request' when calling CodespacesApi.codespaces_set_repositories_for_secret_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/secrets/{secret_name}/repositories'.sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(codespaces_set_repositories_for_secret_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_set_repositories_for_secret_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_set_repositories_for_secret_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start a codespace for the authenticated user
    # Starts a user's codespace.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Codespace]
    def codespaces_start_for_authenticated_user(codespace_name, opts = {})
      data, _status_code, _headers = codespaces_start_for_authenticated_user_with_http_info(codespace_name, opts)
      data
    end

    # Start a codespace for the authenticated user
    # Starts a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_start_for_authenticated_user_with_http_info(codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_start_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_start_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}/start'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_start_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_start_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop a codespace for the authenticated user
    # Stops a user's codespace.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Codespace]
    def codespaces_stop_for_authenticated_user(codespace_name, opts = {})
      data, _status_code, _headers = codespaces_stop_for_authenticated_user_with_http_info(codespace_name, opts)
      data
    end

    # Stop a codespace for the authenticated user
    # Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_stop_for_authenticated_user_with_http_info(codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_stop_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_stop_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}/stop'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_stop_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_stop_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop a codespace for an organization user
    # Stops a user's codespace.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Codespace]
    def codespaces_stop_in_organization(org, username, codespace_name, opts = {})
      data, _status_code, _headers = codespaces_stop_in_organization_with_http_info(org, username, codespace_name, opts)
      data
    end

    # Stop a codespace for an organization user
    # Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_stop_in_organization_with_http_info(org, username, codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_stop_in_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodespacesApi.codespaces_stop_in_organization"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling CodespacesApi.codespaces_stop_in_organization"
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_stop_in_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_stop_in_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_stop_in_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a codespace for the authenticated user
    # Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  You must authenticate using an access token with the `codespace` scope to use this endpoint.  GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @option opts [CodespacesUpdateForAuthenticatedUserRequest] :codespaces_update_for_authenticated_user_request 
    # @return [Codespace]
    def codespaces_update_for_authenticated_user(codespace_name, opts = {})
      data, _status_code, _headers = codespaces_update_for_authenticated_user_with_http_info(codespace_name, opts)
      data
    end

    # Update a codespace for the authenticated user
    # Updates a codespace owned by the authenticated user. Currently only the codespace&#39;s machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
    # @param codespace_name [String] The name of the codespace.
    # @param [Hash] opts the optional parameters
    # @option opts [CodespacesUpdateForAuthenticatedUserRequest] :codespaces_update_for_authenticated_user_request 
    # @return [Array<(Codespace, Integer, Hash)>] Codespace data, response status code and response headers
    def codespaces_update_for_authenticated_user_with_http_info(codespace_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodespacesApi.codespaces_update_for_authenticated_user ...'
      end
      # verify the required parameter 'codespace_name' is set
      if @api_client.config.client_side_validation && codespace_name.nil?
        fail ArgumentError, "Missing the required parameter 'codespace_name' when calling CodespacesApi.codespaces_update_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/codespaces/{codespace_name}'.sub('{' + 'codespace_name' + '}', CGI.escape(codespace_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'codespaces_update_for_authenticated_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Codespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodespacesApi.codespaces_update_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodespacesApi#codespaces_update_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
