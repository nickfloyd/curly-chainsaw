=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class ChecksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a check run
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.  In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param checks_create_request [ChecksCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CheckRun]
    def checks_create(owner, repo, checks_create_request, opts = {})
      data, _status_code, _headers = checks_create_with_http_info(owner, repo, checks_create_request, opts)
      data
    end

    # Create a check run
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Creates a new check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check runs.  In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param checks_create_request [ChecksCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckRun, Integer, Hash)>] CheckRun data, response status code and response headers
    def checks_create_with_http_info(owner, repo, checks_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_create ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_create"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_create"
      end
      # verify the required parameter 'checks_create_request' is set
      if @api_client.config.client_side_validation && checks_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'checks_create_request' when calling ChecksApi.checks_create"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-runs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checks_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a check suite
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param checks_create_suite_request [ChecksCreateSuiteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CheckSuite]
    def checks_create_suite(owner, repo, checks_create_suite_request, opts = {})
      data, _status_code, _headers = checks_create_suite_with_http_info(owner, repo, checks_create_suite_request, opts)
      data
    end

    # Create a check suite
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you&#39;ve disabled automatic creation using \&quot;[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\&quot;. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check suites.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param checks_create_suite_request [ChecksCreateSuiteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckSuite, Integer, Hash)>] CheckSuite data, response status code and response headers
    def checks_create_suite_with_http_info(owner, repo, checks_create_suite_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_create_suite ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_create_suite"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_create_suite"
      end
      # verify the required parameter 'checks_create_suite_request' is set
      if @api_client.config.client_side_validation && checks_create_suite_request.nil?
        fail ArgumentError, "Missing the required parameter 'checks_create_suite_request' when calling ChecksApi.checks_create_suite"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-suites'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checks_create_suite_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckSuite'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_create_suite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_create_suite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a check run
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param [Hash] opts the optional parameters
    # @return [CheckRun]
    def checks_get(owner, repo, check_run_id, opts = {})
      data, _status_code, _headers = checks_get_with_http_info(owner, repo, check_run_id, opts)
      data
    end

    # Get a check run
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Gets a single check run using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckRun, Integer, Hash)>] CheckRun data, response status code and response headers
    def checks_get_with_http_info(owner, repo, check_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_get ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_get"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_get"
      end
      # verify the required parameter 'check_run_id' is set
      if @api_client.config.client_side_validation && check_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_run_id' when calling ChecksApi.checks_get"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-runs/{check_run_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'check_run_id' + '}', CGI.escape(check_run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a check suite
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.  Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_suite_id [Integer] The unique identifier of the check suite.
    # @param [Hash] opts the optional parameters
    # @return [CheckSuite]
    def checks_get_suite(owner, repo, check_suite_id, opts = {})
      data, _status_code, _headers = checks_get_suite_with_http_info(owner, repo, check_suite_id, opts)
      data
    end

    # Get a check suite
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Gets a single check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_suite_id [Integer] The unique identifier of the check suite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckSuite, Integer, Hash)>] CheckSuite data, response status code and response headers
    def checks_get_suite_with_http_info(owner, repo, check_suite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_get_suite ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_get_suite"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_get_suite"
      end
      # verify the required parameter 'check_suite_id' is set
      if @api_client.config.client_side_validation && check_suite_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_suite_id' when calling ChecksApi.checks_get_suite"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-suites/{check_suite_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'check_suite_id' + '}', CGI.escape(check_suite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckSuite'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_get_suite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_get_suite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List check run annotations
    # Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<CheckAnnotation>]
    def checks_list_annotations(owner, repo, check_run_id, opts = {})
      data, _status_code, _headers = checks_list_annotations_with_http_info(owner, repo, check_run_id, opts)
      data
    end

    # List check run annotations
    # Lists annotations for a check run using the annotation &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get annotations for a check run in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<CheckAnnotation>, Integer, Hash)>] Array<CheckAnnotation> data, response status code and response headers
    def checks_list_annotations_with_http_info(owner, repo, check_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_list_annotations ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_list_annotations"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_list_annotations"
      end
      # verify the required parameter 'check_run_id' is set
      if @api_client.config.client_side_validation && check_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_run_id' when calling ChecksApi.checks_list_annotations"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'check_run_id' + '}', CGI.escape(check_run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CheckAnnotation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_list_annotations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_list_annotations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List check runs for a Git reference
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param ref [String] ref parameter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :check_name Returns check runs with the specified &#x60;name&#x60;.
    # @option opts [String] :status Returns check runs with the specified &#x60;status&#x60;.
    # @option opts [String] :filter Filters check runs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns the most recent check runs. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :app_id 
    # @return [ChecksListForSuite200Response]
    def checks_list_for_ref(owner, repo, ref, opts = {})
      data, _status_code, _headers = checks_list_for_ref_with_http_info(owner, repo, ref, opts)
      data
    end

    # List check runs for a Git reference
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a commit ref. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param ref [String] ref parameter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :check_name Returns check runs with the specified &#x60;name&#x60;.
    # @option opts [String] :status Returns check runs with the specified &#x60;status&#x60;.
    # @option opts [String] :filter Filters check runs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns the most recent check runs. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :app_id 
    # @return [Array<(ChecksListForSuite200Response, Integer, Hash)>] ChecksListForSuite200Response data, response status code and response headers
    def checks_list_for_ref_with_http_info(owner, repo, ref, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_list_for_ref ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_list_for_ref"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_list_for_ref"
      end
      # verify the required parameter 'ref' is set
      if @api_client.config.client_side_validation && ref.nil?
        fail ArgumentError, "Missing the required parameter 'ref' when calling ChecksApi.checks_list_for_ref"
      end
      allowable_values = ["queued", "in_progress", "completed"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = ["latest", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/commits/{ref}/check-runs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'ref' + '}', CGI.escape(ref.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'check_name'] = opts[:'check_name'] if !opts[:'check_name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksListForSuite200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_list_for_ref",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_list_for_ref\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List check runs in a check suite
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_suite_id [Integer] The unique identifier of the check suite.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :check_name Returns check runs with the specified &#x60;name&#x60;.
    # @option opts [String] :status Returns check runs with the specified &#x60;status&#x60;.
    # @option opts [String] :filter Filters check runs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns the most recent check runs. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ChecksListForSuite200Response]
    def checks_list_for_suite(owner, repo, check_suite_id, opts = {})
      data, _status_code, _headers = checks_list_for_suite_with_http_info(owner, repo, check_suite_id, opts)
      data
    end

    # List check runs in a check suite
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_suite_id [Integer] The unique identifier of the check suite.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :check_name Returns check runs with the specified &#x60;name&#x60;.
    # @option opts [String] :status Returns check runs with the specified &#x60;status&#x60;.
    # @option opts [String] :filter Filters check runs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns the most recent check runs. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ChecksListForSuite200Response, Integer, Hash)>] ChecksListForSuite200Response data, response status code and response headers
    def checks_list_for_suite_with_http_info(owner, repo, check_suite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_list_for_suite ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_list_for_suite"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_list_for_suite"
      end
      # verify the required parameter 'check_suite_id' is set
      if @api_client.config.client_side_validation && check_suite_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_suite_id' when calling ChecksApi.checks_list_for_suite"
      end
      allowable_values = ["queued", "in_progress", "completed"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = ["latest", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'check_suite_id' + '}', CGI.escape(check_suite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'check_name'] = opts[:'check_name'] if !opts[:'check_name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksListForSuite200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_list_for_suite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_list_for_suite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List check suites for a Git reference
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.  Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param ref [String] ref parameter
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :app_id Filters check suites by GitHub App &#x60;id&#x60;.
    # @option opts [String] :check_name Returns check runs with the specified &#x60;name&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [ChecksListSuitesForRef200Response]
    def checks_list_suites_for_ref(owner, repo, ref, opts = {})
      data, _status_code, _headers = checks_list_suites_for_ref_with_http_info(owner, repo, ref, opts)
      data
    end

    # List check suites for a Git reference
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Lists check suites for a commit &#x60;ref&#x60;. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param ref [String] ref parameter
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :app_id Filters check suites by GitHub App &#x60;id&#x60;.
    # @option opts [String] :check_name Returns check runs with the specified &#x60;name&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(ChecksListSuitesForRef200Response, Integer, Hash)>] ChecksListSuitesForRef200Response data, response status code and response headers
    def checks_list_suites_for_ref_with_http_info(owner, repo, ref, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_list_suites_for_ref ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_list_suites_for_ref"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_list_suites_for_ref"
      end
      # verify the required parameter 'ref' is set
      if @api_client.config.client_side_validation && ref.nil?
        fail ArgumentError, "Missing the required parameter 'ref' when calling ChecksApi.checks_list_suites_for_ref"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/commits/{ref}/check-suites'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'ref' + '}', CGI.escape(ref.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'check_name'] = opts[:'check_name'] if !opts[:'check_name'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksListSuitesForRef200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_list_suites_for_ref",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_list_suites_for_ref\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rerequest a check run
    # Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.  To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def checks_rerequest_run(owner, repo, check_run_id, opts = {})
      data, _status_code, _headers = checks_rerequest_run_with_http_info(owner, repo, check_run_id, opts)
      data
    end

    # Rerequest a check run
    # Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_run&#x60; webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action &#x60;rerequested&#x60;. When a check run is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check run, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def checks_rerequest_run_with_http_info(owner, repo, check_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_rerequest_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_rerequest_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_rerequest_run"
      end
      # verify the required parameter 'check_run_id' is set
      if @api_client.config.client_side_validation && check_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_run_id' when calling ChecksApi.checks_rerequest_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'check_run_id' + '}', CGI.escape(check_run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_rerequest_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_rerequest_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rerequest a check suite
    # Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.  To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_suite_id [Integer] The unique identifier of the check suite.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def checks_rerequest_suite(owner, repo, check_suite_id, opts = {})
      data, _status_code, _headers = checks_rerequest_suite_with_http_info(owner, repo, check_suite_id, opts)
      data
    end

    # Rerequest a check suite
    # Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_suite&#x60; webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action &#x60;rerequested&#x60;. When a check suite is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check suite, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_suite_id [Integer] The unique identifier of the check suite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def checks_rerequest_suite_with_http_info(owner, repo, check_suite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_rerequest_suite ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_rerequest_suite"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_rerequest_suite"
      end
      # verify the required parameter 'check_suite_id' is set
      if @api_client.config.client_side_validation && check_suite_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_suite_id' when calling ChecksApi.checks_rerequest_suite"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'check_suite_id' + '}', CGI.escape(check_suite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_rerequest_suite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_rerequest_suite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update repository preferences for check suites
    # Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param checks_set_suites_preferences_request [ChecksSetSuitesPreferencesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CheckSuitePreference]
    def checks_set_suites_preferences(owner, repo, checks_set_suites_preferences_request, opts = {})
      data, _status_code, _headers = checks_set_suites_preferences_with_http_info(owner, repo, checks_set_suites_preferences_request, opts)
      data
    end

    # Update repository preferences for check suites
    # Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param checks_set_suites_preferences_request [ChecksSetSuitesPreferencesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckSuitePreference, Integer, Hash)>] CheckSuitePreference data, response status code and response headers
    def checks_set_suites_preferences_with_http_info(owner, repo, checks_set_suites_preferences_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_set_suites_preferences ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_set_suites_preferences"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_set_suites_preferences"
      end
      # verify the required parameter 'checks_set_suites_preferences_request' is set
      if @api_client.config.client_side_validation && checks_set_suites_preferences_request.nil?
        fail ArgumentError, "Missing the required parameter 'checks_set_suites_preferences_request' when calling ChecksApi.checks_set_suites_preferences"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-suites/preferences'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checks_set_suites_preferences_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckSuitePreference'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_set_suites_preferences",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_set_suites_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a check run
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param checks_update_request [ChecksUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CheckRun]
    def checks_update(owner, repo, check_run_id, checks_update_request, opts = {})
      data, _status_code, _headers = checks_update_with_http_info(owner, repo, check_run_id, checks_update_request, opts)
      data
    end

    # Update a check run
    # **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Updates a check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to edit check runs.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param check_run_id [Integer] The unique identifier of the check run.
    # @param checks_update_request [ChecksUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckRun, Integer, Hash)>] CheckRun data, response status code and response headers
    def checks_update_with_http_info(owner, repo, check_run_id, checks_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.checks_update ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ChecksApi.checks_update"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChecksApi.checks_update"
      end
      # verify the required parameter 'check_run_id' is set
      if @api_client.config.client_side_validation && check_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_run_id' when calling ChecksApi.checks_update"
      end
      # verify the required parameter 'checks_update_request' is set
      if @api_client.config.client_side_validation && checks_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'checks_update_request' when calling ChecksApi.checks_update"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/check-runs/{check_run_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'check_run_id' + '}', CGI.escape(check_run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checks_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChecksApi.checks_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#checks_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
