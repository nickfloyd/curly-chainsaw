=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class MigrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel an import
    # Stop an import for a repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def migrations_cancel_import(owner, repo, opts = {})
      migrations_cancel_import_with_http_info(owner, repo, opts)
      nil
    end

    # Cancel an import
    # Stop an import for a repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def migrations_cancel_import_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_cancel_import ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_cancel_import"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_cancel_import"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_cancel_import",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_cancel_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user migration archive
    # Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def migrations_delete_archive_for_authenticated_user(migration_id, opts = {})
      migrations_delete_archive_for_authenticated_user_with_http_info(migration_id, opts)
      nil
    end

    # Delete a user migration archive
    # Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def migrations_delete_archive_for_authenticated_user_with_http_info(migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_delete_archive_for_authenticated_user ...'
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_delete_archive_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/migrations/{migration_id}/archive'.sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_delete_archive_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_delete_archive_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization migration archive
    # Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def migrations_delete_archive_for_org(org, migration_id, opts = {})
      migrations_delete_archive_for_org_with_http_info(org, migration_id, opts)
      nil
    end

    # Delete an organization migration archive
    # Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def migrations_delete_archive_for_org_with_http_info(org, migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_delete_archive_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling MigrationsApi.migrations_delete_archive_for_org"
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_delete_archive_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/migrations/{migration_id}/archive'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_delete_archive_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_delete_archive_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download an organization migration archive
    # Fetches the URL to a migration archive.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def migrations_download_archive_for_org(org, migration_id, opts = {})
      migrations_download_archive_for_org_with_http_info(org, migration_id, opts)
      nil
    end

    # Download an organization migration archive
    # Fetches the URL to a migration archive.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def migrations_download_archive_for_org_with_http_info(org, migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_download_archive_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling MigrationsApi.migrations_download_archive_for_org"
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_download_archive_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/migrations/{migration_id}/archive'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_download_archive_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_download_archive_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a user migration archive
    # Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def migrations_get_archive_for_authenticated_user(migration_id, opts = {})
      migrations_get_archive_for_authenticated_user_with_http_info(migration_id, opts)
      nil
    end

    # Download a user migration archive
    # Fetches the URL to download the migration archive as a &#x60;tar.gz&#x60; file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an &#x60;attachments&#x60; directory that includes all attachment files uploaded to GitHub.com and a &#x60;repositories&#x60; directory that contains the repository&#39;s Git data.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def migrations_get_archive_for_authenticated_user_with_http_info(migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_get_archive_for_authenticated_user ...'
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_get_archive_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/migrations/{migration_id}/archive'.sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_get_archive_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_get_archive_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get commit authors
    # Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.  This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :since A user ID. Only return users with an ID greater than this ID.
    # @return [Array<PorterAuthor>]
    def migrations_get_commit_authors(owner, repo, opts = {})
      data, _status_code, _headers = migrations_get_commit_authors_with_http_info(owner, repo, opts)
      data
    end

    # Get commit authors
    # Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username &#x60;hubot&#x60; into something like &#x60;hubot &lt;hubot@12341234-abab-fefe-8787-fedcba987654&gt;&#x60;.  This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :since A user ID. Only return users with an ID greater than this ID.
    # @return [Array<(Array<PorterAuthor>, Integer, Hash)>] Array<PorterAuthor> data, response status code and response headers
    def migrations_get_commit_authors_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_get_commit_authors ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_get_commit_authors"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_get_commit_authors"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import/authors'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PorterAuthor>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_get_commit_authors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_get_commit_authors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an import status
    # View the progress of an import.  **Import status**  This section includes details about the possible values of the `status` field of the Import Progress response.  An import that does not have errors will progress through these steps:  *   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL. *   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import). *   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\". *   `complete` - the import is complete, and the repository is ready on GitHub.  If there are problems, you will see one of these in the `status` field:  *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section. *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information. *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section. *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL. *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.  **The project_choices field**  When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.  **Git LFS related fields**  This section includes details about Git LFS related fields that may be present in the Import Progress response.  *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken. *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step. *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository. *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Import]
    def migrations_get_import_status(owner, repo, opts = {})
      data, _status_code, _headers = migrations_get_import_status_with_http_info(owner, repo, opts)
      data
    end

    # Get an import status
    # View the progress of an import.  **Import status**  This section includes details about the possible values of the &#x60;status&#x60; field of the Import Progress response.  An import that does not have errors will progress through these steps:  *   &#x60;detecting&#x60; - the \&quot;detection\&quot; step of the import is in progress because the request did not include a &#x60;vcs&#x60; parameter. The import is identifying the type of source control present at the URL. *   &#x60;importing&#x60; - the \&quot;raw\&quot; step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include &#x60;commit_count&#x60; (the total number of raw commits that will be imported) and &#x60;percent&#x60; (0 - 100, the current progress through the import). *   &#x60;mapping&#x60; - the \&quot;rewrite\&quot; step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   &#x60;pushing&#x60; - the \&quot;push\&quot; step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include &#x60;push_percent&#x60;, which is the percent value reported by &#x60;git push&#x60; when it is \&quot;Writing objects\&quot;. *   &#x60;complete&#x60; - the import is complete, and the repository is ready on GitHub.  If there are problems, you will see one of these in the &#x60;status&#x60; field:  *   &#x60;auth_failed&#x60; - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section. *   &#x60;error&#x60; - the import encountered an error. The import progress response will include the &#x60;failed_step&#x60; and an error message. Contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api) for more information. *   &#x60;detection_needs_auth&#x60; - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section. *   &#x60;detection_found_nothing&#x60; - the importer didn&#39;t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL. *   &#x60;detection_found_multiple&#x60; - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a &#x60;project_choices&#x60; field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.  **The project_choices field**  When multiple projects are found at the provided URL, the response hash will include a &#x60;project_choices&#x60; field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.  **Git LFS related fields**  This section includes details about Git LFS related fields that may be present in the Import Progress response.  *   &#x60;use_lfs&#x60; - describes whether the import has been opted in or out of using Git LFS. The value can be &#x60;opt_in&#x60;, &#x60;opt_out&#x60;, or &#x60;undecided&#x60; if no action has been taken. *   &#x60;has_large_files&#x60; - the boolean value describing whether files larger than 100MB were found during the &#x60;importing&#x60; step. *   &#x60;large_files_size&#x60; - the total size in gigabytes of files larger than 100MB found in the originating repository. *   &#x60;large_files_count&#x60; - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \&quot;Get Large Files\&quot; request.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Import, Integer, Hash)>] Import data, response status code and response headers
    def migrations_get_import_status_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_get_import_status ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_get_import_status"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_get_import_status"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Import'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_get_import_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_get_import_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get large files
    # List files larger than 100MB found during the import
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<PorterLargeFile>]
    def migrations_get_large_files(owner, repo, opts = {})
      data, _status_code, _headers = migrations_get_large_files_with_http_info(owner, repo, opts)
      data
    end

    # Get large files
    # List files larger than 100MB found during the import
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PorterLargeFile>, Integer, Hash)>] Array<PorterLargeFile> data, response status code and response headers
    def migrations_get_large_files_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_get_large_files ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_get_large_files"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_get_large_files"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import/large_files'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PorterLargeFile>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_get_large_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_get_large_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user migration status
    # Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:  *   `pending` - the migration hasn't started yet. *   `exporting` - the migration is in progress. *   `exported` - the migration finished successfully. *   `failed` - the migration failed.  Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :exclude 
    # @return [Migration]
    def migrations_get_status_for_authenticated_user(migration_id, opts = {})
      data, _status_code, _headers = migrations_get_status_for_authenticated_user_with_http_info(migration_id, opts)
      data
    end

    # Get a user migration status
    # Fetches a single user migration. The response includes the &#x60;state&#x60; of the migration, which can be one of the following values:  *   &#x60;pending&#x60; - the migration hasn&#39;t started yet. *   &#x60;exporting&#x60; - the migration is in progress. *   &#x60;exported&#x60; - the migration finished successfully. *   &#x60;failed&#x60; - the migration failed.  Once the migration has been &#x60;exported&#x60; you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :exclude 
    # @return [Array<(Migration, Integer, Hash)>] Migration data, response status code and response headers
    def migrations_get_status_for_authenticated_user_with_http_info(migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_get_status_for_authenticated_user ...'
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_get_status_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/migrations/{migration_id}'.sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude'] = @api_client.build_collection_param(opts[:'exclude'], :multi) if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Migration'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_get_status_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_get_status_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization migration status
    # Fetches the status of a migration.  The `state` of a migration can be one of the following values:  *   `pending`, which means the migration hasn't started yet. *   `exporting`, which means the migration is in progress. *   `exported`, which means the migration finished successfully. *   `failed`, which means the migration failed.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :exclude Exclude attributes from the API response to improve performance
    # @return [Migration]
    def migrations_get_status_for_org(org, migration_id, opts = {})
      data, _status_code, _headers = migrations_get_status_for_org_with_http_info(org, migration_id, opts)
      data
    end

    # Get an organization migration status
    # Fetches the status of a migration.  The &#x60;state&#x60; of a migration can be one of the following values:  *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :exclude Exclude attributes from the API response to improve performance
    # @return [Array<(Migration, Integer, Hash)>] Migration data, response status code and response headers
    def migrations_get_status_for_org_with_http_info(org, migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_get_status_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling MigrationsApi.migrations_get_status_for_org"
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_get_status_for_org"
      end
      allowable_values = ["repositories"]
      if @api_client.config.client_side_validation && opts[:'exclude'] && !opts[:'exclude'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"exclude\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/migrations/{migration_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude'] = @api_client.build_collection_param(opts[:'exclude'], :multi) if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Migration'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_get_status_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_get_status_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user migrations
    # Lists all migrations a user has started.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Migration>]
    def migrations_list_for_authenticated_user(opts = {})
      data, _status_code, _headers = migrations_list_for_authenticated_user_with_http_info(opts)
      data
    end

    # List user migrations
    # Lists all migrations a user has started.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Migration>, Integer, Hash)>] Array<Migration> data, response status code and response headers
    def migrations_list_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_list_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/migrations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Migration>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_list_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_list_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization migrations
    # Lists the most recent migrations.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Array<String>] :exclude Exclude attributes from the API response to improve performance
    # @return [Array<Migration>]
    def migrations_list_for_org(org, opts = {})
      data, _status_code, _headers = migrations_list_for_org_with_http_info(org, opts)
      data
    end

    # List organization migrations
    # Lists the most recent migrations.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Array<String>] :exclude Exclude attributes from the API response to improve performance
    # @return [Array<(Array<Migration>, Integer, Hash)>] Array<Migration> data, response status code and response headers
    def migrations_list_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_list_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling MigrationsApi.migrations_list_for_org"
      end
      allowable_values = ["repositories"]
      if @api_client.config.client_side_validation && opts[:'exclude'] && !opts[:'exclude'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"exclude\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/migrations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'exclude'] = @api_client.build_collection_param(opts[:'exclude'], :multi) if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Migration>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_list_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_list_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repositories for a user migration
    # Lists all the repositories for this user migration.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<MinimalRepository>]
    def migrations_list_repos_for_authenticated_user(migration_id, opts = {})
      data, _status_code, _headers = migrations_list_repos_for_authenticated_user_with_http_info(migration_id, opts)
      data
    end

    # List repositories for a user migration
    # Lists all the repositories for this user migration.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<MinimalRepository>, Integer, Hash)>] Array<MinimalRepository> data, response status code and response headers
    def migrations_list_repos_for_authenticated_user_with_http_info(migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_list_repos_for_authenticated_user ...'
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_list_repos_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/migrations/{migration_id}/repositories'.sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MinimalRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_list_repos_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_list_repos_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repositories in an organization migration
    # List all the repositories for this organization migration.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<MinimalRepository>]
    def migrations_list_repos_for_org(org, migration_id, opts = {})
      data, _status_code, _headers = migrations_list_repos_for_org_with_http_info(org, migration_id, opts)
      data
    end

    # List repositories in an organization migration
    # List all the repositories for this organization migration.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<MinimalRepository>, Integer, Hash)>] Array<MinimalRepository> data, response status code and response headers
    def migrations_list_repos_for_org_with_http_info(org, migration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_list_repos_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling MigrationsApi.migrations_list_repos_for_org"
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_list_repos_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/migrations/{migration_id}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MinimalRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_list_repos_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_list_repos_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map a commit author
    # Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param author_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [MigrationsMapCommitAuthorRequest] :migrations_map_commit_author_request 
    # @return [PorterAuthor]
    def migrations_map_commit_author(owner, repo, author_id, opts = {})
      data, _status_code, _headers = migrations_map_commit_author_with_http_info(owner, repo, author_id, opts)
      data
    end

    # Map a commit author
    # Update an author&#39;s identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param author_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [MigrationsMapCommitAuthorRequest] :migrations_map_commit_author_request 
    # @return [Array<(PorterAuthor, Integer, Hash)>] PorterAuthor data, response status code and response headers
    def migrations_map_commit_author_with_http_info(owner, repo, author_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_map_commit_author ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_map_commit_author"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_map_commit_author"
      end
      # verify the required parameter 'author_id' is set
      if @api_client.config.client_side_validation && author_id.nil?
        fail ArgumentError, "Missing the required parameter 'author_id' when calling MigrationsApi.migrations_map_commit_author"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import/authors/{author_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'author_id' + '}', CGI.escape(author_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'migrations_map_commit_author_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PorterAuthor'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_map_commit_author",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_map_commit_author\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Git LFS preference
    # You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/articles/versioning-large-files/).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param migrations_set_lfs_preference_request [MigrationsSetLfsPreferenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Import]
    def migrations_set_lfs_preference(owner, repo, migrations_set_lfs_preference_request, opts = {})
      data, _status_code, _headers = migrations_set_lfs_preference_with_http_info(owner, repo, migrations_set_lfs_preference_request, opts)
      data
    end

    # Update Git LFS preference
    # You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/articles/versioning-large-files/).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param migrations_set_lfs_preference_request [MigrationsSetLfsPreferenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Import, Integer, Hash)>] Import data, response status code and response headers
    def migrations_set_lfs_preference_with_http_info(owner, repo, migrations_set_lfs_preference_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_set_lfs_preference ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_set_lfs_preference"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_set_lfs_preference"
      end
      # verify the required parameter 'migrations_set_lfs_preference_request' is set
      if @api_client.config.client_side_validation && migrations_set_lfs_preference_request.nil?
        fail ArgumentError, "Missing the required parameter 'migrations_set_lfs_preference_request' when calling MigrationsApi.migrations_set_lfs_preference"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import/lfs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(migrations_set_lfs_preference_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Import'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_set_lfs_preference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_set_lfs_preference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start a user migration
    # Initiates the generation of a user migration archive.
    # @param migrations_start_for_authenticated_user_request [MigrationsStartForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Migration]
    def migrations_start_for_authenticated_user(migrations_start_for_authenticated_user_request, opts = {})
      data, _status_code, _headers = migrations_start_for_authenticated_user_with_http_info(migrations_start_for_authenticated_user_request, opts)
      data
    end

    # Start a user migration
    # Initiates the generation of a user migration archive.
    # @param migrations_start_for_authenticated_user_request [MigrationsStartForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Migration, Integer, Hash)>] Migration data, response status code and response headers
    def migrations_start_for_authenticated_user_with_http_info(migrations_start_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_start_for_authenticated_user ...'
      end
      # verify the required parameter 'migrations_start_for_authenticated_user_request' is set
      if @api_client.config.client_side_validation && migrations_start_for_authenticated_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'migrations_start_for_authenticated_user_request' when calling MigrationsApi.migrations_start_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/migrations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(migrations_start_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Migration'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_start_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_start_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start an organization migration
    # Initiates the generation of a migration archive.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migrations_start_for_org_request [MigrationsStartForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Migration]
    def migrations_start_for_org(org, migrations_start_for_org_request, opts = {})
      data, _status_code, _headers = migrations_start_for_org_with_http_info(org, migrations_start_for_org_request, opts)
      data
    end

    # Start an organization migration
    # Initiates the generation of a migration archive.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migrations_start_for_org_request [MigrationsStartForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Migration, Integer, Hash)>] Migration data, response status code and response headers
    def migrations_start_for_org_with_http_info(org, migrations_start_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_start_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling MigrationsApi.migrations_start_for_org"
      end
      # verify the required parameter 'migrations_start_for_org_request' is set
      if @api_client.config.client_side_validation && migrations_start_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'migrations_start_for_org_request' when calling MigrationsApi.migrations_start_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/migrations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(migrations_start_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Migration'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_start_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_start_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start an import
    # Start a source import to a GitHub repository using GitHub Importer.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param migrations_start_import_request [MigrationsStartImportRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Import]
    def migrations_start_import(owner, repo, migrations_start_import_request, opts = {})
      data, _status_code, _headers = migrations_start_import_with_http_info(owner, repo, migrations_start_import_request, opts)
      data
    end

    # Start an import
    # Start a source import to a GitHub repository using GitHub Importer.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param migrations_start_import_request [MigrationsStartImportRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Import, Integer, Hash)>] Import data, response status code and response headers
    def migrations_start_import_with_http_info(owner, repo, migrations_start_import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_start_import ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_start_import"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_start_import"
      end
      # verify the required parameter 'migrations_start_import_request' is set
      if @api_client.config.client_side_validation && migrations_start_import_request.nil?
        fail ArgumentError, "Missing the required parameter 'migrations_start_import_request' when calling MigrationsApi.migrations_start_import"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(migrations_start_import_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Import'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_start_import",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_start_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlock a user repository
    # Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param repo_name [String] repo_name parameter
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def migrations_unlock_repo_for_authenticated_user(migration_id, repo_name, opts = {})
      migrations_unlock_repo_for_authenticated_user_with_http_info(migration_id, repo_name, opts)
      nil
    end

    # Unlock a user repository
    # Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of &#x60;404 Not Found&#x60; if the repository is not locked.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param repo_name [String] repo_name parameter
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def migrations_unlock_repo_for_authenticated_user_with_http_info(migration_id, repo_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_unlock_repo_for_authenticated_user ...'
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_unlock_repo_for_authenticated_user"
      end
      # verify the required parameter 'repo_name' is set
      if @api_client.config.client_side_validation && repo_name.nil?
        fail ArgumentError, "Missing the required parameter 'repo_name' when calling MigrationsApi.migrations_unlock_repo_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/migrations/{migration_id}/repos/{repo_name}/lock'.sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s)).sub('{' + 'repo_name' + '}', CGI.escape(repo_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_unlock_repo_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_unlock_repo_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlock an organization repository
    # Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param repo_name [String] repo_name parameter
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def migrations_unlock_repo_for_org(org, migration_id, repo_name, opts = {})
      migrations_unlock_repo_for_org_with_http_info(org, migration_id, repo_name, opts)
      nil
    end

    # Unlock an organization repository
    # Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param migration_id [Integer] The unique identifier of the migration.
    # @param repo_name [String] repo_name parameter
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def migrations_unlock_repo_for_org_with_http_info(org, migration_id, repo_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_unlock_repo_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling MigrationsApi.migrations_unlock_repo_for_org"
      end
      # verify the required parameter 'migration_id' is set
      if @api_client.config.client_side_validation && migration_id.nil?
        fail ArgumentError, "Missing the required parameter 'migration_id' when calling MigrationsApi.migrations_unlock_repo_for_org"
      end
      # verify the required parameter 'repo_name' is set
      if @api_client.config.client_side_validation && repo_name.nil?
        fail ArgumentError, "Missing the required parameter 'repo_name' when calling MigrationsApi.migrations_unlock_repo_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'migration_id' + '}', CGI.escape(migration_id.to_s)).sub('{' + 'repo_name' + '}', CGI.escape(repo_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_unlock_repo_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_unlock_repo_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an import
    # An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.  Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array. You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [MigrationsUpdateImportRequest] :migrations_update_import_request 
    # @return [Import]
    def migrations_update_import(owner, repo, opts = {})
      data, _status_code, _headers = migrations_update_import_with_http_info(owner, repo, opts)
      data
    end

    # Update an import
    # An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.  Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status &#x60;detection_found_multiple&#x60; and the Import Progress response will include a &#x60;project_choices&#x60; array. You can select the project to import by providing one of the objects in the &#x60;project_choices&#x60; array in the update request.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [MigrationsUpdateImportRequest] :migrations_update_import_request 
    # @return [Array<(Import, Integer, Hash)>] Import data, response status code and response headers
    def migrations_update_import_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MigrationsApi.migrations_update_import ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling MigrationsApi.migrations_update_import"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling MigrationsApi.migrations_update_import"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/import'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'migrations_update_import_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Import'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MigrationsApi.migrations_update_import",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MigrationsApi#migrations_update_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
