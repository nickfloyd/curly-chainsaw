=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class EnterpriseAdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add custom labels to a self-hosted runner for an enterprise
    # Add custom labels to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request [EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise(enterprise, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts = {})
      data, _status_code, _headers = enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts)
      data
    end

    # Add custom labels to a self-hosted runner for an enterprise
    # Add custom labels to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request [EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request' when calling EnterpriseAdminApi.enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add organization access to a self-hosted runner group in an enterprise
    # Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, org_id, opts = {})
      enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, org_id, opts)
      nil
    end

    # Add organization access to a self-hosted runner group in an enterprise
    # Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EnterpriseAdminApi.enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a self-hosted runner to a group for an enterprise
    # Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_add_self_hosted_runner_to_group_for_enterprise(enterprise, runner_group_id, runner_id, opts = {})
      enterprise_admin_add_self_hosted_runner_to_group_for_enterprise_with_http_info(enterprise, runner_group_id, runner_id, opts)
      nil
    end

    # Add a self-hosted runner to a group for an enterprise
    # Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_add_self_hosted_runner_to_group_for_enterprise_with_http_info(enterprise, runner_group_id, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_add_self_hosted_runner_to_group_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_add_self_hosted_runner_to_group_for_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_add_self_hosted_runner_to_group_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_add_self_hosted_runner_to_group_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_add_self_hosted_runner_to_group_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_add_self_hosted_runner_to_group_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a registration token for an enterprise
    # Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN ```
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def enterprise_admin_create_registration_token_for_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_create_registration_token_for_enterprise_with_http_info(enterprise, opts)
      data
    end

    # Create a registration token for an enterprise
    # Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN &#x60;&#x60;&#x60;
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def enterprise_admin_create_registration_token_for_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_create_registration_token_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_create_registration_token_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/registration-token'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_create_registration_token_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_create_registration_token_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a remove token for an enterprise
    # Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def enterprise_admin_create_remove_token_for_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_create_remove_token_for_enterprise_with_http_info(enterprise, opts)
      data
    end

    # Create a remove token for an enterprise
    # Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def enterprise_admin_create_remove_token_for_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_create_remove_token_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_create_remove_token_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/remove-token'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_create_remove_token_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_create_remove_token_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a self-hosted runner group for an enterprise
    # Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_create_self_hosted_runner_group_for_enterprise_request [EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner]
    def enterprise_admin_create_self_hosted_runner_group_for_enterprise(enterprise, enterprise_admin_create_self_hosted_runner_group_for_enterprise_request, opts = {})
      data, _status_code, _headers = enterprise_admin_create_self_hosted_runner_group_for_enterprise_with_http_info(enterprise, enterprise_admin_create_self_hosted_runner_group_for_enterprise_request, opts)
      data
    end

    # Create a self-hosted runner group for an enterprise
    # Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_create_self_hosted_runner_group_for_enterprise_request [EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner, Integer, Hash)>] EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner data, response status code and response headers
    def enterprise_admin_create_self_hosted_runner_group_for_enterprise_with_http_info(enterprise, enterprise_admin_create_self_hosted_runner_group_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_create_self_hosted_runner_group_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_create_self_hosted_runner_group_for_enterprise"
      end
      # verify the required parameter 'enterprise_admin_create_self_hosted_runner_group_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_create_self_hosted_runner_group_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_create_self_hosted_runner_group_for_enterprise_request' when calling EnterpriseAdminApi.enterprise_admin_create_self_hosted_runner_group_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_create_self_hosted_runner_group_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_create_self_hosted_runner_group_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_create_self_hosted_runner_group_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a SCIM group from an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_delete_scim_group_from_enterprise(enterprise, scim_group_id, opts = {})
      enterprise_admin_delete_scim_group_from_enterprise_with_http_info(enterprise, scim_group_id, opts)
      nil
    end

    # Delete a SCIM group from an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_delete_scim_group_from_enterprise_with_http_info(enterprise, scim_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_delete_scim_group_from_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_delete_scim_group_from_enterprise"
      end
      # verify the required parameter 'scim_group_id' is set
      if @api_client.config.client_side_validation && scim_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_group_id' when calling EnterpriseAdminApi.enterprise_admin_delete_scim_group_from_enterprise"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_group_id' + '}', CGI.escape(scim_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_delete_scim_group_from_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_delete_scim_group_from_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a self-hosted runner from an enterprise
    # Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_delete_self_hosted_runner_from_enterprise(enterprise, runner_id, opts = {})
      enterprise_admin_delete_self_hosted_runner_from_enterprise_with_http_info(enterprise, runner_id, opts)
      nil
    end

    # Delete a self-hosted runner from an enterprise
    # Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_delete_self_hosted_runner_from_enterprise_with_http_info(enterprise, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_from_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_from_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_from_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/{runner_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_from_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_delete_self_hosted_runner_from_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a self-hosted runner group from an enterprise
    # Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_delete_self_hosted_runner_group_from_enterprise(enterprise, runner_group_id, opts = {})
      enterprise_admin_delete_self_hosted_runner_group_from_enterprise_with_http_info(enterprise, runner_group_id, opts)
      nil
    end

    # Delete a self-hosted runner group from an enterprise
    # Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_delete_self_hosted_runner_group_from_enterprise_with_http_info(enterprise, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_group_from_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_group_from_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_group_from_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_delete_self_hosted_runner_group_from_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_delete_self_hosted_runner_group_from_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a SCIM user from an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_delete_user_from_enterprise(enterprise, scim_user_id, opts = {})
      enterprise_admin_delete_user_from_enterprise_with_http_info(enterprise, scim_user_id, opts)
      nil
    end

    # Delete a SCIM user from an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_delete_user_from_enterprise_with_http_info(enterprise, scim_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_delete_user_from_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_delete_user_from_enterprise"
      end
      # verify the required parameter 'scim_user_id' is set
      if @api_client.config.client_side_validation && scim_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_user_id' when calling EnterpriseAdminApi.enterprise_admin_delete_user_from_enterprise"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_user_id' + '}', CGI.escape(scim_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_delete_user_from_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_delete_user_from_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a selected organization for GitHub Actions in an enterprise
    # Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_disable_selected_organization_github_actions_enterprise(enterprise, org_id, opts = {})
      enterprise_admin_disable_selected_organization_github_actions_enterprise_with_http_info(enterprise, org_id, opts)
      nil
    end

    # Disable a selected organization for GitHub Actions in an enterprise
    # Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_disable_selected_organization_github_actions_enterprise_with_http_info(enterprise, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_disable_selected_organization_github_actions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_disable_selected_organization_github_actions_enterprise"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EnterpriseAdminApi.enterprise_admin_disable_selected_organization_github_actions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_disable_selected_organization_github_actions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_disable_selected_organization_github_actions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a selected organization for GitHub Actions in an enterprise
    # Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_enable_selected_organization_github_actions_enterprise(enterprise, org_id, opts = {})
      enterprise_admin_enable_selected_organization_github_actions_enterprise_with_http_info(enterprise, org_id, opts)
      nil
    end

    # Enable a selected organization for GitHub Actions in an enterprise
    # Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_enable_selected_organization_github_actions_enterprise_with_http_info(enterprise, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_enable_selected_organization_github_actions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_enable_selected_organization_github_actions_enterprise"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EnterpriseAdminApi.enterprise_admin_enable_selected_organization_github_actions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_enable_selected_organization_github_actions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_enable_selected_organization_github_actions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get allowed actions and reusable workflows for an enterprise
    # Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminGetAllowedActionsEnterprise200Response]
    def enterprise_admin_get_allowed_actions_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_get_allowed_actions_enterprise_with_http_info(enterprise, opts)
      data
    end

    # Get allowed actions and reusable workflows for an enterprise
    # Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminGetAllowedActionsEnterprise200Response, Integer, Hash)>] EnterpriseAdminGetAllowedActionsEnterprise200Response data, response status code and response headers
    def enterprise_admin_get_allowed_actions_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_allowed_actions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_get_allowed_actions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/selected-actions'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminGetAllowedActionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_allowed_actions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_allowed_actions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the audit log for an enterprise
    # Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
    # @option opts [String] :include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;.
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
    # @option opts [String] :order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;.
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<EnterpriseAdminGetAuditLog200ResponseInner>]
    def enterprise_admin_get_audit_log(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_get_audit_log_with_http_info(enterprise, opts)
      data
    end

    # Get the audit log for an enterprise
    # Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the &#x60;admin:enterprise&#x60; scope.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
    # @option opts [String] :include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;.
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
    # @option opts [String] :order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;.
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<EnterpriseAdminGetAuditLog200ResponseInner>, Integer, Hash)>] Array<EnterpriseAdminGetAuditLog200ResponseInner> data, response status code and response headers
    def enterprise_admin_get_audit_log_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_audit_log ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_get_audit_log"
      end
      allowable_values = ["web", "git", "all"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      allowable_values = ["desc", "asc"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/audit-log'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phrase'] = opts[:'phrase'] if !opts[:'phrase'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EnterpriseAdminGetAuditLog200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_audit_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_audit_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions permissions for an enterprise
    # Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response]
    def enterprise_admin_get_github_actions_permissions_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_get_github_actions_permissions_enterprise_with_http_info(enterprise, opts)
      data
    end

    # Get GitHub Actions permissions for an enterprise
    # Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response, Integer, Hash)>] EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response data, response status code and response headers
    def enterprise_admin_get_github_actions_permissions_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_github_actions_permissions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_get_github_actions_permissions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_github_actions_permissions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_github_actions_permissions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SCIM provisioning information for an enterprise group
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :excluded_attributes Attributes to exclude.
    # @return [EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner]
    def enterprise_admin_get_provisioning_information_for_enterprise_group(enterprise, scim_group_id, opts = {})
      data, _status_code, _headers = enterprise_admin_get_provisioning_information_for_enterprise_group_with_http_info(enterprise, scim_group_id, opts)
      data
    end

    # Get SCIM provisioning information for an enterprise group
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :excluded_attributes Attributes to exclude.
    # @return [Array<(EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner, Integer, Hash)>] EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner data, response status code and response headers
    def enterprise_admin_get_provisioning_information_for_enterprise_group_with_http_info(enterprise, scim_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_group ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_group"
      end
      # verify the required parameter 'scim_group_id' is set
      if @api_client.config.client_side_validation && scim_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_group_id' when calling EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_group"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_group_id' + '}', CGI.escape(scim_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_provisioning_information_for_enterprise_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SCIM provisioning information for an enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminProvisionAndInviteEnterpriseUser201Response]
    def enterprise_admin_get_provisioning_information_for_enterprise_user(enterprise, scim_user_id, opts = {})
      data, _status_code, _headers = enterprise_admin_get_provisioning_information_for_enterprise_user_with_http_info(enterprise, scim_user_id, opts)
      data
    end

    # Get SCIM provisioning information for an enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminProvisionAndInviteEnterpriseUser201Response, Integer, Hash)>] EnterpriseAdminProvisionAndInviteEnterpriseUser201Response data, response status code and response headers
    def enterprise_admin_get_provisioning_information_for_enterprise_user_with_http_info(enterprise, scim_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_user ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_user"
      end
      # verify the required parameter 'scim_user_id' is set
      if @api_client.config.client_side_validation && scim_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_user_id' when calling EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_user"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_user_id' + '}', CGI.escape(scim_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminProvisionAndInviteEnterpriseUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_provisioning_information_for_enterprise_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_provisioning_information_for_enterprise_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a self-hosted runner for an enterprise
    # Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [SelfHostedRunners]
    def enterprise_admin_get_self_hosted_runner_for_enterprise(enterprise, runner_id, opts = {})
      data, _status_code, _headers = enterprise_admin_get_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, opts)
      data
    end

    # Get a self-hosted runner for an enterprise
    # Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SelfHostedRunners, Integer, Hash)>] SelfHostedRunners data, response status code and response headers
    def enterprise_admin_get_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/{runner_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SelfHostedRunners'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_self_hosted_runner_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a self-hosted runner group for an enterprise
    # Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner]
    def enterprise_admin_get_self_hosted_runner_group_for_enterprise(enterprise, runner_group_id, opts = {})
      data, _status_code, _headers = enterprise_admin_get_self_hosted_runner_group_for_enterprise_with_http_info(enterprise, runner_group_id, opts)
      data
    end

    # Get a self-hosted runner group for an enterprise
    # Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner, Integer, Hash)>] EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner data, response status code and response headers
    def enterprise_admin_get_self_hosted_runner_group_for_enterprise_with_http_info(enterprise, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_group_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_group_for_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_group_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_self_hosted_runner_group_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_self_hosted_runner_group_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Enterprise Server statistics
    # Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.  To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \"[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\" in the GitHub Enterprise Server documentation.  You'll need to use a personal access token:   - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the `read:enterprise` permission.   - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the `read:org` permission.  For more information on creating a personal access token, see \"[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\"
    # @param enterprise_or_org [String] The slug version of the enterprise name or the login of an organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_start A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
    # @option opts [String] :date_end A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
    # @return [Array<ServerStatisticsProxyEndpointInner>]
    def enterprise_admin_get_server_statistics(enterprise_or_org, opts = {})
      data, _status_code, _headers = enterprise_admin_get_server_statistics_with_http_info(enterprise_or_org, opts)
      data
    end

    # Get GitHub Enterprise Server statistics
    # Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.  To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \&quot;[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\&quot; in the GitHub Enterprise Server documentation.  You&#39;ll need to use a personal access token:   - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you&#39;ll need a personal access token with the &#x60;read:enterprise&#x60; permission.   - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you&#39;ll need a personal access token with the &#x60;read:org&#x60; permission.  For more information on creating a personal access token, see \&quot;[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\&quot;
    # @param enterprise_or_org [String] The slug version of the enterprise name or the login of an organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_start A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
    # @option opts [String] :date_end A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
    # @return [Array<(Array<ServerStatisticsProxyEndpointInner>, Integer, Hash)>] Array<ServerStatisticsProxyEndpointInner> data, response status code and response headers
    def enterprise_admin_get_server_statistics_with_http_info(enterprise_or_org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_get_server_statistics ...'
      end
      # verify the required parameter 'enterprise_or_org' is set
      if @api_client.config.client_side_validation && enterprise_or_org.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_or_org' when calling EnterpriseAdminApi.enterprise_admin_get_server_statistics"
      end
      # resource path
      local_var_path = '/enterprise-installation/{enterprise_or_org}/server-statistics'.sub('{' + 'enterprise_or_org' + '}', CGI.escape(enterprise_or_org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date_start'] = opts[:'date_start'] if !opts[:'date_start'].nil?
      query_params[:'date_end'] = opts[:'date_end'] if !opts[:'date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ServerStatisticsProxyEndpointInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_get_server_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_get_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for a self-hosted runner for an enterprise
    # Lists all labels for a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise(enterprise, runner_id, opts = {})
      data, _status_code, _headers = enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, opts)
      data
    end

    # List labels for a self-hosted runner for an enterprise
    # Lists all labels for a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization access to a self-hosted runner group in an enterprise
    # Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response]
    def enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, opts = {})
      data, _status_code, _headers = enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, opts)
      data
    end

    # List organization access to a self-hosted runner group in an enterprise
    # Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response, Integer, Hash)>] EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List provisioned SCIM groups for an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Used for pagination: the index of the first result to return.
    # @option opts [Integer] :count Used for pagination: the number of results to return.
    # @option opts [String] :filter filter results
    # @option opts [String] :excluded_attributes attributes to exclude
    # @return [EnterpriseAdminListProvisionedGroupsEnterprise200Response]
    def enterprise_admin_list_provisioned_groups_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_list_provisioned_groups_enterprise_with_http_info(enterprise, opts)
      data
    end

    # List provisioned SCIM groups for an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Used for pagination: the index of the first result to return.
    # @option opts [Integer] :count Used for pagination: the number of results to return.
    # @option opts [String] :filter filter results
    # @option opts [String] :excluded_attributes attributes to exclude
    # @return [Array<(EnterpriseAdminListProvisionedGroupsEnterprise200Response, Integer, Hash)>] EnterpriseAdminListProvisionedGroupsEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_provisioned_groups_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_provisioned_groups_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_provisioned_groups_enterprise"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Groups'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startIndex'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListProvisionedGroupsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_provisioned_groups_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_provisioned_groups_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SCIM provisioned identities for an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Retrieves a paginated list of all provisioned enterprise members, including pending invitations.  When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.  The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:  1. The user is granted access by the IdP and is not a member of the GitHub enterprise.  1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.  1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:    - If the user signs in, their GitHub account is linked to this entry.    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Used for pagination: the index of the first result to return.
    # @option opts [Integer] :count Used for pagination: the number of results to return.
    # @option opts [String] :filter filter results
    # @return [EnterpriseAdminListProvisionedIdentitiesEnterprise200Response]
    def enterprise_admin_list_provisioned_identities_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_list_provisioned_identities_enterprise_with_http_info(enterprise, opts)
      data
    end

    # List SCIM provisioned identities for an enterprise
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Retrieves a paginated list of all provisioned enterprise members, including pending invitations.  When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account&#39;s metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account&#39;s metadata is preserved to allow the user to re-join the organization in the future.   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).   - When a user is invited over SCIM, an external identity is created that matches with the invitee&#39;s email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.  The returned list of external identities can include an entry for a &#x60;null&#x60; user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:  1. The user is granted access by the IdP and is not a member of the GitHub enterprise.  1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.  1. After successfully authenticating with the SAML SSO IdP, the &#x60;null&#x60; external identity entry is created and the user is prompted to sign in to their GitHub account:    - If the user signs in, their GitHub account is linked to this entry.    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity &#x60;null&#x60; entry remains in place.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Used for pagination: the index of the first result to return.
    # @option opts [Integer] :count Used for pagination: the number of results to return.
    # @option opts [String] :filter filter results
    # @return [Array<(EnterpriseAdminListProvisionedIdentitiesEnterprise200Response, Integer, Hash)>] EnterpriseAdminListProvisionedIdentitiesEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_provisioned_identities_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_provisioned_identities_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_provisioned_identities_enterprise"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Users'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startIndex'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListProvisionedIdentitiesEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_provisioned_identities_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_provisioned_identities_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List runner applications for an enterprise
    # Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<RunnerApplication>]
    def enterprise_admin_list_runner_applications_for_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_list_runner_applications_for_enterprise_with_http_info(enterprise, opts)
      data
    end

    # List runner applications for an enterprise
    # Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RunnerApplication>, Integer, Hash)>] Array<RunnerApplication> data, response status code and response headers
    def enterprise_admin_list_runner_applications_for_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_runner_applications_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_runner_applications_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/downloads'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RunnerApplication>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_runner_applications_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_runner_applications_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected organizations enabled for GitHub Actions in an enterprise
    # Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response]
    def enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_with_http_info(enterprise, opts)
      data
    end

    # List selected organizations enabled for GitHub Actions in an enterprise
    # Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response, Integer, Hash)>] EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/organizations'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runner groups for an enterprise
    # Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :visible_to_organization Only return runner groups that are allowed to be used by this organization.
    # @return [EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response]
    def enterprise_admin_list_self_hosted_runner_groups_for_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_list_self_hosted_runner_groups_for_enterprise_with_http_info(enterprise, opts)
      data
    end

    # List self-hosted runner groups for an enterprise
    # Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [String] :visible_to_organization Only return runner groups that are allowed to be used by this organization.
    # @return [Array<(EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_self_hosted_runner_groups_for_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_self_hosted_runner_groups_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_self_hosted_runner_groups_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'visible_to_organization'] = opts[:'visible_to_organization'] if !opts[:'visible_to_organization'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_self_hosted_runner_groups_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_self_hosted_runner_groups_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runners for an enterprise
    # Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [EnterpriseAdminListSelfHostedRunnersForEnterprise200Response]
    def enterprise_admin_list_self_hosted_runners_for_enterprise(enterprise, opts = {})
      data, _status_code, _headers = enterprise_admin_list_self_hosted_runners_for_enterprise_with_http_info(enterprise, opts)
      data
    end

    # List self-hosted runners for an enterprise
    # Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(EnterpriseAdminListSelfHostedRunnersForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListSelfHostedRunnersForEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_self_hosted_runners_for_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_self_hosted_runners_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_self_hosted_runners_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelfHostedRunnersForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_self_hosted_runners_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_self_hosted_runners_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runners in a group for an enterprise
    # Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response]
    def enterprise_admin_list_self_hosted_runners_in_group_for_enterprise(enterprise, runner_group_id, opts = {})
      data, _status_code, _headers = enterprise_admin_list_self_hosted_runners_in_group_for_enterprise_with_http_info(enterprise, runner_group_id, opts)
      data
    end

    # List self-hosted runners in a group for an enterprise
    # Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response data, response status code and response headers
    def enterprise_admin_list_self_hosted_runners_in_group_for_enterprise_with_http_info(enterprise, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_list_self_hosted_runners_in_group_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_list_self_hosted_runners_in_group_for_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_list_self_hosted_runners_in_group_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_list_self_hosted_runners_in_group_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_list_self_hosted_runners_in_group_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provision a SCIM enterprise group and invite users
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_provision_and_invite_enterprise_group_request [EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner]
    def enterprise_admin_provision_and_invite_enterprise_group(enterprise, enterprise_admin_provision_and_invite_enterprise_group_request, opts = {})
      data, _status_code, _headers = enterprise_admin_provision_and_invite_enterprise_group_with_http_info(enterprise, enterprise_admin_provision_and_invite_enterprise_group_request, opts)
      data
    end

    # Provision a SCIM enterprise group and invite users
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_provision_and_invite_enterprise_group_request [EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner, Integer, Hash)>] EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner data, response status code and response headers
    def enterprise_admin_provision_and_invite_enterprise_group_with_http_info(enterprise, enterprise_admin_provision_and_invite_enterprise_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_group ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_group"
      end
      # verify the required parameter 'enterprise_admin_provision_and_invite_enterprise_group_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_provision_and_invite_enterprise_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_provision_and_invite_enterprise_group_request' when calling EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_group"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Groups'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_provision_and_invite_enterprise_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_provision_and_invite_enterprise_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provision and invite a SCIM enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision enterprise membership for a user, and send organization invitation emails to the email address.  You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_provision_and_invite_enterprise_user_request [EnterpriseAdminProvisionAndInviteEnterpriseUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminProvisionAndInviteEnterpriseUser201Response]
    def enterprise_admin_provision_and_invite_enterprise_user(enterprise, enterprise_admin_provision_and_invite_enterprise_user_request, opts = {})
      data, _status_code, _headers = enterprise_admin_provision_and_invite_enterprise_user_with_http_info(enterprise, enterprise_admin_provision_and_invite_enterprise_user_request, opts)
      data
    end

    # Provision and invite a SCIM enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision enterprise membership for a user, and send organization invitation emails to the email address.  You can optionally include the groups a user will be invited to join. If you do not provide a list of &#x60;groups&#x60;, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_provision_and_invite_enterprise_user_request [EnterpriseAdminProvisionAndInviteEnterpriseUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminProvisionAndInviteEnterpriseUser201Response, Integer, Hash)>] EnterpriseAdminProvisionAndInviteEnterpriseUser201Response data, response status code and response headers
    def enterprise_admin_provision_and_invite_enterprise_user_with_http_info(enterprise, enterprise_admin_provision_and_invite_enterprise_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_user ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_user"
      end
      # verify the required parameter 'enterprise_admin_provision_and_invite_enterprise_user_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_provision_and_invite_enterprise_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_provision_and_invite_enterprise_user_request' when calling EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_user"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Users'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_provision_and_invite_enterprise_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminProvisionAndInviteEnterpriseUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_provision_and_invite_enterprise_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_provision_and_invite_enterprise_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all custom labels from a self-hosted runner for an enterprise
    # Remove all custom labels from a self-hosted runner configured in an enterprise. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise(enterprise, runner_id, opts = {})
      data, _status_code, _headers = enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, opts)
      data
    end

    # Remove all custom labels from a self-hosted runner for an enterprise
    # Remove all custom labels from a self-hosted runner configured in an enterprise. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a custom label from a self-hosted runner for an enterprise
    # Remove a custom label from a self-hosted runner configured in an enterprise. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise(enterprise, runner_id, name, opts = {})
      data, _status_code, _headers = enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, name, opts)
      data
    end

    # Remove a custom label from a self-hosted runner for an enterprise
    # Remove a custom label from a self-hosted runner configured in an enterprise. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EnterpriseAdminApi.enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove organization access to a self-hosted runner group in an enterprise
    # Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, org_id, opts = {})
      enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, org_id, opts)
      nil
    end

    # Remove organization access to a self-hosted runner group in an enterprise
    # Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param org_id [Integer] The unique identifier of the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling EnterpriseAdminApi.enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a self-hosted runner from a group for an enterprise
    # Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise(enterprise, runner_group_id, runner_id, opts = {})
      enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise_with_http_info(enterprise, runner_group_id, runner_id, opts)
      nil
    end

    # Remove a self-hosted runner from a group for an enterprise
    # Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise_with_http_info(enterprise, runner_group_id, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set allowed actions and reusable workflows for an enterprise
    # Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_get_allowed_actions_enterprise200_response [EnterpriseAdminGetAllowedActionsEnterprise200Response] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_set_allowed_actions_enterprise(enterprise, enterprise_admin_get_allowed_actions_enterprise200_response, opts = {})
      enterprise_admin_set_allowed_actions_enterprise_with_http_info(enterprise, enterprise_admin_get_allowed_actions_enterprise200_response, opts)
      nil
    end

    # Set allowed actions and reusable workflows for an enterprise
    # Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_get_allowed_actions_enterprise200_response [EnterpriseAdminGetAllowedActionsEnterprise200Response] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_set_allowed_actions_enterprise_with_http_info(enterprise, enterprise_admin_get_allowed_actions_enterprise200_response, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_allowed_actions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_allowed_actions_enterprise"
      end
      # verify the required parameter 'enterprise_admin_get_allowed_actions_enterprise200_response' is set
      if @api_client.config.client_side_validation && enterprise_admin_get_allowed_actions_enterprise200_response.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_get_allowed_actions_enterprise200_response' when calling EnterpriseAdminApi.enterprise_admin_set_allowed_actions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/selected-actions'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_get_allowed_actions_enterprise200_response)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_allowed_actions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_allowed_actions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set custom labels for a self-hosted runner for an enterprise
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request [EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response]
    def enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise(enterprise, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts = {})
      data, _status_code, _headers = enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts)
      data
    end

    # Set custom labels for a self-hosted runner for an enterprise
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request [EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, Integer, Hash)>] EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response data, response status code and response headers
    def enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_with_http_info(enterprise, runner_id, enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling EnterpriseAdminApi.enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise"
      end
      # verify the required parameter 'enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request' when calling EnterpriseAdminApi.enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set GitHub Actions permissions for an enterprise
    # Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_set_github_actions_permissions_enterprise_request [EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_set_github_actions_permissions_enterprise(enterprise, enterprise_admin_set_github_actions_permissions_enterprise_request, opts = {})
      enterprise_admin_set_github_actions_permissions_enterprise_with_http_info(enterprise, enterprise_admin_set_github_actions_permissions_enterprise_request, opts)
      nil
    end

    # Set GitHub Actions permissions for an enterprise
    # Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_set_github_actions_permissions_enterprise_request [EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_set_github_actions_permissions_enterprise_with_http_info(enterprise, enterprise_admin_set_github_actions_permissions_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_github_actions_permissions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_github_actions_permissions_enterprise"
      end
      # verify the required parameter 'enterprise_admin_set_github_actions_permissions_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_github_actions_permissions_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_github_actions_permissions_enterprise_request' when calling EnterpriseAdminApi.enterprise_admin_set_github_actions_permissions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_github_actions_permissions_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_github_actions_permissions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_github_actions_permissions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set SCIM information for a provisioned enterprise group
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param enterprise_admin_provision_and_invite_enterprise_group_request [EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner]
    def enterprise_admin_set_information_for_provisioned_enterprise_group(enterprise, scim_group_id, enterprise_admin_provision_and_invite_enterprise_group_request, opts = {})
      data, _status_code, _headers = enterprise_admin_set_information_for_provisioned_enterprise_group_with_http_info(enterprise, scim_group_id, enterprise_admin_provision_and_invite_enterprise_group_request, opts)
      data
    end

    # Set SCIM information for a provisioned enterprise group
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don&#39;t provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param enterprise_admin_provision_and_invite_enterprise_group_request [EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner, Integer, Hash)>] EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner data, response status code and response headers
    def enterprise_admin_set_information_for_provisioned_enterprise_group_with_http_info(enterprise, scim_group_id, enterprise_admin_provision_and_invite_enterprise_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_group ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_group"
      end
      # verify the required parameter 'scim_group_id' is set
      if @api_client.config.client_side_validation && scim_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_group_id' when calling EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_group"
      end
      # verify the required parameter 'enterprise_admin_provision_and_invite_enterprise_group_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_provision_and_invite_enterprise_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_provision_and_invite_enterprise_group_request' when calling EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_group"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_group_id' + '}', CGI.escape(scim_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_provision_and_invite_enterprise_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_information_for_provisioned_enterprise_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set SCIM information for a provisioned enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.  You must at least provide the required values for the user: `userName`, `name`, and `emails`.  **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param enterprise_admin_provision_and_invite_enterprise_user_request [EnterpriseAdminProvisionAndInviteEnterpriseUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminProvisionAndInviteEnterpriseUser201Response]
    def enterprise_admin_set_information_for_provisioned_enterprise_user(enterprise, scim_user_id, enterprise_admin_provision_and_invite_enterprise_user_request, opts = {})
      data, _status_code, _headers = enterprise_admin_set_information_for_provisioned_enterprise_user_with_http_info(enterprise, scim_user_id, enterprise_admin_provision_and_invite_enterprise_user_request, opts)
      data
    end

    # Set SCIM information for a provisioned enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned user&#39;s information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don&#39;t provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.  You must at least provide the required values for the user: &#x60;userName&#x60;, &#x60;name&#x60;, and &#x60;emails&#x60;.  **Warning:** Setting &#x60;active: false&#x60; removes the user from the enterprise, deletes the external identity, and deletes the associated &#x60;{scim_user_id}&#x60;.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param enterprise_admin_provision_and_invite_enterprise_user_request [EnterpriseAdminProvisionAndInviteEnterpriseUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminProvisionAndInviteEnterpriseUser201Response, Integer, Hash)>] EnterpriseAdminProvisionAndInviteEnterpriseUser201Response data, response status code and response headers
    def enterprise_admin_set_information_for_provisioned_enterprise_user_with_http_info(enterprise, scim_user_id, enterprise_admin_provision_and_invite_enterprise_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_user ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_user"
      end
      # verify the required parameter 'scim_user_id' is set
      if @api_client.config.client_side_validation && scim_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_user_id' when calling EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_user"
      end
      # verify the required parameter 'enterprise_admin_provision_and_invite_enterprise_user_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_provision_and_invite_enterprise_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_provision_and_invite_enterprise_user_request' when calling EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_user"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_user_id' + '}', CGI.escape(scim_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_provision_and_invite_enterprise_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminProvisionAndInviteEnterpriseUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_information_for_provisioned_enterprise_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_information_for_provisioned_enterprise_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set organization access for a self-hosted runner group in an enterprise
    # Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request [EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request, opts = {})
      enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request, opts)
      nil
    end

    # Set organization access for a self-hosted runner group in an enterprise
    # Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request [EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_with_http_info(enterprise, runner_group_id, enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # verify the required parameter 'enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request' when calling EnterpriseAdminApi.enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected organizations enabled for GitHub Actions in an enterprise
    # Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request [EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise(enterprise, enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request, opts = {})
      enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_with_http_info(enterprise, enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request, opts)
      nil
    end

    # Set selected organizations enabled for GitHub Actions in an enterprise
    # Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request [EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_with_http_info(enterprise, enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise"
      end
      # verify the required parameter 'enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request' when calling EnterpriseAdminApi.enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/permissions/organizations'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set self-hosted runners in a group for an enterprise
    # Replaces the list of self-hosted runners that are part of an enterprise runner group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request [EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enterprise_admin_set_self_hosted_runners_in_group_for_enterprise(enterprise, runner_group_id, enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request, opts = {})
      enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_with_http_info(enterprise, runner_group_id, enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request, opts)
      nil
    end

    # Set self-hosted runners in a group for an enterprise
    # Replaces the list of self-hosted runners that are part of an enterprise runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request [EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_with_http_info(enterprise, runner_group_id, enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_set_self_hosted_runners_in_group_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_set_self_hosted_runners_in_group_for_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_set_self_hosted_runners_in_group_for_enterprise"
      end
      # verify the required parameter 'enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request' when calling EnterpriseAdminApi.enterprise_admin_set_self_hosted_runners_in_group_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_set_self_hosted_runners_in_group_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_set_self_hosted_runners_in_group_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an attribute for a SCIM enterprise group
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param enterprise_admin_update_attribute_for_enterprise_group_request [EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner]
    def enterprise_admin_update_attribute_for_enterprise_group(enterprise, scim_group_id, enterprise_admin_update_attribute_for_enterprise_group_request, opts = {})
      data, _status_code, _headers = enterprise_admin_update_attribute_for_enterprise_group_with_http_info(enterprise, scim_group_id, enterprise_admin_update_attribute_for_enterprise_group_request, opts)
      data
    end

    # Update an attribute for a SCIM enterprise group
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_group_id [String] Identifier generated by the GitHub SCIM endpoint.
    # @param enterprise_admin_update_attribute_for_enterprise_group_request [EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner, Integer, Hash)>] EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner data, response status code and response headers
    def enterprise_admin_update_attribute_for_enterprise_group_with_http_info(enterprise, scim_group_id, enterprise_admin_update_attribute_for_enterprise_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_group ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_group"
      end
      # verify the required parameter 'scim_group_id' is set
      if @api_client.config.client_side_validation && scim_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_group_id' when calling EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_group"
      end
      # verify the required parameter 'enterprise_admin_update_attribute_for_enterprise_group_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_update_attribute_for_enterprise_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_update_attribute_for_enterprise_group_request' when calling EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_group"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_group_id' + '}', CGI.escape(scim_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_update_attribute_for_enterprise_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_update_attribute_for_enterprise_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an attribute for a SCIM enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).  **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.  **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.  ``` {   \"Operations\":[{     \"op\":\"replace\",     \"value\":{       \"active\":false     }   }] } ```
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param enterprise_admin_update_attribute_for_enterprise_user_request [EnterpriseAdminUpdateAttributeForEnterpriseUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EnterpriseAdminProvisionAndInviteEnterpriseUser201Response]
    def enterprise_admin_update_attribute_for_enterprise_user(enterprise, scim_user_id, enterprise_admin_update_attribute_for_enterprise_user_request, opts = {})
      data, _status_code, _headers = enterprise_admin_update_attribute_for_enterprise_user_with_http_info(enterprise, scim_user_id, enterprise_admin_update_attribute_for_enterprise_user_request, opts)
      data
    end

    # Update an attribute for a SCIM enterprise user
    # **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned user&#39;s individual attributes. To change a user&#39;s values, you must provide a specific &#x60;Operations&#x60; JSON format that contains at least one of the &#x60;add&#x60;, &#x60;remove&#x60;, or &#x60;replace&#x60; operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).  **Note:** Complicated SCIM &#x60;path&#x60; selectors that include filters are not supported. For example, a &#x60;path&#x60; selector defined as &#x60;\&quot;path\&quot;: \&quot;emails[type eq \\\&quot;work\\\&quot;]\&quot;&#x60; will not work.  **Warning:** If you set &#x60;active:false&#x60; using the &#x60;replace&#x60; operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated &#x60;:scim_user_id&#x60;.  &#x60;&#x60;&#x60; {   \&quot;Operations\&quot;:[{     \&quot;op\&quot;:\&quot;replace\&quot;,     \&quot;value\&quot;:{       \&quot;active\&quot;:false     }   }] } &#x60;&#x60;&#x60;
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param scim_user_id [String] The unique identifier of the SCIM user.
    # @param enterprise_admin_update_attribute_for_enterprise_user_request [EnterpriseAdminUpdateAttributeForEnterpriseUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterpriseAdminProvisionAndInviteEnterpriseUser201Response, Integer, Hash)>] EnterpriseAdminProvisionAndInviteEnterpriseUser201Response data, response status code and response headers
    def enterprise_admin_update_attribute_for_enterprise_user_with_http_info(enterprise, scim_user_id, enterprise_admin_update_attribute_for_enterprise_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_user ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_user"
      end
      # verify the required parameter 'scim_user_id' is set
      if @api_client.config.client_side_validation && scim_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'scim_user_id' when calling EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_user"
      end
      # verify the required parameter 'enterprise_admin_update_attribute_for_enterprise_user_request' is set
      if @api_client.config.client_side_validation && enterprise_admin_update_attribute_for_enterprise_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise_admin_update_attribute_for_enterprise_user_request' when calling EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_user"
      end
      # resource path
      local_var_path = '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'scim_user_id' + '}', CGI.escape(scim_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enterprise_admin_update_attribute_for_enterprise_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminProvisionAndInviteEnterpriseUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_update_attribute_for_enterprise_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_update_attribute_for_enterprise_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a self-hosted runner group for an enterprise
    # Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest] :enterprise_admin_update_self_hosted_runner_group_for_enterprise_request 
    # @return [EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner]
    def enterprise_admin_update_self_hosted_runner_group_for_enterprise(enterprise, runner_group_id, opts = {})
      data, _status_code, _headers = enterprise_admin_update_self_hosted_runner_group_for_enterprise_with_http_info(enterprise, runner_group_id, opts)
      data
    end

    # Update a self-hosted runner group for an enterprise
    # Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param runner_group_id [Integer] Unique identifier of the self-hosted runner group.
    # @param [Hash] opts the optional parameters
    # @option opts [EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest] :enterprise_admin_update_self_hosted_runner_group_for_enterprise_request 
    # @return [Array<(EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner, Integer, Hash)>] EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner data, response status code and response headers
    def enterprise_admin_update_self_hosted_runner_group_for_enterprise_with_http_info(enterprise, runner_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnterpriseAdminApi.enterprise_admin_update_self_hosted_runner_group_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling EnterpriseAdminApi.enterprise_admin_update_self_hosted_runner_group_for_enterprise"
      end
      # verify the required parameter 'runner_group_id' is set
      if @api_client.config.client_side_validation && runner_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_group_id' when calling EnterpriseAdminApi.enterprise_admin_update_self_hosted_runner_group_for_enterprise"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s)).sub('{' + 'runner_group_id' + '}', CGI.escape(runner_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'enterprise_admin_update_self_hosted_runner_group_for_enterprise_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"EnterpriseAdminApi.enterprise_admin_update_self_hosted_runner_group_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseAdminApi#enterprise_admin_update_self_hosted_runner_group_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
