=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class InteractionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get interaction restrictions for your public repositories
    # Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
    # @param [Hash] opts the optional parameters
    # @return [InteractionsGetRestrictionsForOrg200Response]
    def interactions_get_restrictions_for_authenticated_user(opts = {})
      data, _status_code, _headers = interactions_get_restrictions_for_authenticated_user_with_http_info(opts)
      data
    end

    # Get interaction restrictions for your public repositories
    # Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InteractionsGetRestrictionsForOrg200Response, Integer, Hash)>] InteractionsGetRestrictionsForOrg200Response data, response status code and response headers
    def interactions_get_restrictions_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_get_restrictions_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/interaction-limits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InteractionsGetRestrictionsForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_get_restrictions_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_get_restrictions_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get interaction restrictions for an organization
    # Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [InteractionsGetRestrictionsForOrg200Response]
    def interactions_get_restrictions_for_org(org, opts = {})
      data, _status_code, _headers = interactions_get_restrictions_for_org_with_http_info(org, opts)
      data
    end

    # Get interaction restrictions for an organization
    # Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InteractionsGetRestrictionsForOrg200Response, Integer, Hash)>] InteractionsGetRestrictionsForOrg200Response data, response status code and response headers
    def interactions_get_restrictions_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_get_restrictions_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling InteractionsApi.interactions_get_restrictions_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/interaction-limits'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InteractionsGetRestrictionsForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_get_restrictions_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_get_restrictions_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get interaction restrictions for a repository
    # Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [InteractionsGetRestrictionsForOrg200Response]
    def interactions_get_restrictions_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = interactions_get_restrictions_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # Get interaction restrictions for a repository
    # Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InteractionsGetRestrictionsForOrg200Response, Integer, Hash)>] InteractionsGetRestrictionsForOrg200Response data, response status code and response headers
    def interactions_get_restrictions_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_get_restrictions_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling InteractionsApi.interactions_get_restrictions_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling InteractionsApi.interactions_get_restrictions_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/interaction-limits'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InteractionsGetRestrictionsForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_get_restrictions_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_get_restrictions_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove interaction restrictions from your public repositories
    # Removes any interaction restrictions from your public repositories.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def interactions_remove_restrictions_for_authenticated_user(opts = {})
      interactions_remove_restrictions_for_authenticated_user_with_http_info(opts)
      nil
    end

    # Remove interaction restrictions from your public repositories
    # Removes any interaction restrictions from your public repositories.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactions_remove_restrictions_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_remove_restrictions_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/interaction-limits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_remove_restrictions_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_remove_restrictions_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove interaction restrictions for an organization
    # Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def interactions_remove_restrictions_for_org(org, opts = {})
      interactions_remove_restrictions_for_org_with_http_info(org, opts)
      nil
    end

    # Remove interaction restrictions for an organization
    # Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactions_remove_restrictions_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_remove_restrictions_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling InteractionsApi.interactions_remove_restrictions_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/interaction-limits'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_remove_restrictions_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_remove_restrictions_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove interaction restrictions for a repository
    # Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def interactions_remove_restrictions_for_repo(owner, repo, opts = {})
      interactions_remove_restrictions_for_repo_with_http_info(owner, repo, opts)
      nil
    end

    # Remove interaction restrictions for a repository
    # Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactions_remove_restrictions_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_remove_restrictions_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling InteractionsApi.interactions_remove_restrictions_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling InteractionsApi.interactions_remove_restrictions_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/interaction-limits'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_remove_restrictions_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_remove_restrictions_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set interaction restrictions for your public repositories
    # Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
    # @param interaction_restrictions [InteractionRestrictions] 
    # @param [Hash] opts the optional parameters
    # @return [InteractionLimits]
    def interactions_set_restrictions_for_authenticated_user(interaction_restrictions, opts = {})
      data, _status_code, _headers = interactions_set_restrictions_for_authenticated_user_with_http_info(interaction_restrictions, opts)
      data
    end

    # Set interaction restrictions for your public repositories
    # Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
    # @param interaction_restrictions [InteractionRestrictions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InteractionLimits, Integer, Hash)>] InteractionLimits data, response status code and response headers
    def interactions_set_restrictions_for_authenticated_user_with_http_info(interaction_restrictions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_set_restrictions_for_authenticated_user ...'
      end
      # verify the required parameter 'interaction_restrictions' is set
      if @api_client.config.client_side_validation && interaction_restrictions.nil?
        fail ArgumentError, "Missing the required parameter 'interaction_restrictions' when calling InteractionsApi.interactions_set_restrictions_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/interaction-limits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(interaction_restrictions)

      # return_type
      return_type = opts[:debug_return_type] || 'InteractionLimits'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_set_restrictions_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_set_restrictions_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set interaction restrictions for an organization
    # Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param interaction_restrictions [InteractionRestrictions] 
    # @param [Hash] opts the optional parameters
    # @return [InteractionLimits]
    def interactions_set_restrictions_for_org(org, interaction_restrictions, opts = {})
      data, _status_code, _headers = interactions_set_restrictions_for_org_with_http_info(org, interaction_restrictions, opts)
      data
    end

    # Set interaction restrictions for an organization
    # Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param interaction_restrictions [InteractionRestrictions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InteractionLimits, Integer, Hash)>] InteractionLimits data, response status code and response headers
    def interactions_set_restrictions_for_org_with_http_info(org, interaction_restrictions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_set_restrictions_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling InteractionsApi.interactions_set_restrictions_for_org"
      end
      # verify the required parameter 'interaction_restrictions' is set
      if @api_client.config.client_side_validation && interaction_restrictions.nil?
        fail ArgumentError, "Missing the required parameter 'interaction_restrictions' when calling InteractionsApi.interactions_set_restrictions_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/interaction-limits'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(interaction_restrictions)

      # return_type
      return_type = opts[:debug_return_type] || 'InteractionLimits'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_set_restrictions_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_set_restrictions_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set interaction restrictions for a repository
    # Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param interaction_restrictions [InteractionRestrictions] 
    # @param [Hash] opts the optional parameters
    # @return [InteractionLimits]
    def interactions_set_restrictions_for_repo(owner, repo, interaction_restrictions, opts = {})
      data, _status_code, _headers = interactions_set_restrictions_for_repo_with_http_info(owner, repo, interaction_restrictions, opts)
      data
    end

    # Set interaction restrictions for a repository
    # Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param interaction_restrictions [InteractionRestrictions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InteractionLimits, Integer, Hash)>] InteractionLimits data, response status code and response headers
    def interactions_set_restrictions_for_repo_with_http_info(owner, repo, interaction_restrictions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InteractionsApi.interactions_set_restrictions_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling InteractionsApi.interactions_set_restrictions_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling InteractionsApi.interactions_set_restrictions_for_repo"
      end
      # verify the required parameter 'interaction_restrictions' is set
      if @api_client.config.client_side_validation && interaction_restrictions.nil?
        fail ArgumentError, "Missing the required parameter 'interaction_restrictions' when calling InteractionsApi.interactions_set_restrictions_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/interaction-limits'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(interaction_restrictions)

      # return_type
      return_type = opts[:debug_return_type] || 'InteractionLimits'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InteractionsApi.interactions_set_restrictions_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InteractionsApi#interactions_set_restrictions_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
