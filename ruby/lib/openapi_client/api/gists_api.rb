=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class GistsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check if a gist is starred
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gists_check_is_starred(gist_id, opts = {})
      gists_check_is_starred_with_http_info(gist_id, opts)
      nil
    end

    # Check if a gist is starred
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gists_check_is_starred_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_check_is_starred ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_check_is_starred"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/star'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_check_is_starred",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_check_is_starred\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a gist
    # Allows you to add a new gist with one or more files.  **Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
    # @param gists_create_request [GistsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GistSimple]
    def gists_create(gists_create_request, opts = {})
      data, _status_code, _headers = gists_create_with_http_info(gists_create_request, opts)
      data
    end

    # Create a gist
    # Allows you to add a new gist with one or more files.  **Note:** Don&#39;t name your files \&quot;gistfile\&quot; with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
    # @param gists_create_request [GistsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GistSimple, Integer, Hash)>] GistSimple data, response status code and response headers
    def gists_create_with_http_info(gists_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_create ...'
      end
      # verify the required parameter 'gists_create_request' is set
      if @api_client.config.client_side_validation && gists_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'gists_create_request' when calling GistsApi.gists_create"
      end
      # resource path
      local_var_path = '/gists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(gists_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GistSimple'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param gists_create_comment_request [GistsCreateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GistComment]
    def gists_create_comment(gist_id, gists_create_comment_request, opts = {})
      data, _status_code, _headers = gists_create_comment_with_http_info(gist_id, gists_create_comment_request, opts)
      data
    end

    # Create a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param gists_create_comment_request [GistsCreateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GistComment, Integer, Hash)>] GistComment data, response status code and response headers
    def gists_create_comment_with_http_info(gist_id, gists_create_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_create_comment ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_create_comment"
      end
      # verify the required parameter 'gists_create_comment_request' is set
      if @api_client.config.client_side_validation && gists_create_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'gists_create_comment_request' when calling GistsApi.gists_create_comment"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/comments'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(gists_create_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GistComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_create_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_create_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gists_delete(gist_id, opts = {})
      gists_delete_with_http_info(gist_id, opts)
      nil
    end

    # Delete a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gists_delete_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_delete ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_delete"
      end
      # resource path
      local_var_path = '/gists/{gist_id}'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gists_delete_comment(gist_id, comment_id, opts = {})
      gists_delete_comment_with_http_info(gist_id, comment_id, opts)
      nil
    end

    # Delete a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gists_delete_comment_with_http_info(gist_id, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_delete_comment ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_delete_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling GistsApi.gists_delete_comment"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/comments/{comment_id}'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_delete_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fork a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [BaseGist]
    def gists_fork(gist_id, opts = {})
      data, _status_code, _headers = gists_fork_with_http_info(gist_id, opts)
      data
    end

    # Fork a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseGist, Integer, Hash)>] BaseGist data, response status code and response headers
    def gists_fork_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_fork ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_fork"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/forks'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseGist'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_fork",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_fork\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [GistSimple]
    def gists_get(gist_id, opts = {})
      data, _status_code, _headers = gists_get_with_http_info(gist_id, opts)
      data
    end

    # Get a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GistSimple, Integer, Hash)>] GistSimple data, response status code and response headers
    def gists_get_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_get ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_get"
      end
      # resource path
      local_var_path = '/gists/{gist_id}'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GistSimple'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [GistComment]
    def gists_get_comment(gist_id, comment_id, opts = {})
      data, _status_code, _headers = gists_get_comment_with_http_info(gist_id, comment_id, opts)
      data
    end

    # Get a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GistComment, Integer, Hash)>] GistComment data, response status code and response headers
    def gists_get_comment_with_http_info(gist_id, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_get_comment ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_get_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling GistsApi.gists_get_comment"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/comments/{comment_id}'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GistComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_get_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a gist revision
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param sha [String] 
    # @param [Hash] opts the optional parameters
    # @return [GistSimple]
    def gists_get_revision(gist_id, sha, opts = {})
      data, _status_code, _headers = gists_get_revision_with_http_info(gist_id, sha, opts)
      data
    end

    # Get a gist revision
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param sha [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GistSimple, Integer, Hash)>] GistSimple data, response status code and response headers
    def gists_get_revision_with_http_info(gist_id, sha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_get_revision ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_get_revision"
      end
      # verify the required parameter 'sha' is set
      if @api_client.config.client_side_validation && sha.nil?
        fail ArgumentError, "Missing the required parameter 'sha' when calling GistsApi.gists_get_revision"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/{sha}'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s)).sub('{' + 'sha' + '}', CGI.escape(sha.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GistSimple'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_get_revision",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_get_revision\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List gists for the authenticated user
    # Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<BaseGist>]
    def gists_list(opts = {})
      data, _status_code, _headers = gists_list_with_http_info(opts)
      data
    end

    # List gists for the authenticated user
    # Lists the authenticated user&#39;s gists or if called anonymously, this endpoint returns all public gists:
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<BaseGist>, Integer, Hash)>] Array<BaseGist> data, response status code and response headers
    def gists_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_list ...'
      end
      # resource path
      local_var_path = '/gists'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BaseGist>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List gist comments
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<GistComment>]
    def gists_list_comments(gist_id, opts = {})
      data, _status_code, _headers = gists_list_comments_with_http_info(gist_id, opts)
      data
    end

    # List gist comments
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<GistComment>, Integer, Hash)>] Array<GistComment> data, response status code and response headers
    def gists_list_comments_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_list_comments ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_list_comments"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/comments'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GistComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_list_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_list_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List gist commits
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<GistCommit>]
    def gists_list_commits(gist_id, opts = {})
      data, _status_code, _headers = gists_list_commits_with_http_info(gist_id, opts)
      data
    end

    # List gist commits
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<GistCommit>, Integer, Hash)>] Array<GistCommit> data, response status code and response headers
    def gists_list_commits_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_list_commits ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_list_commits"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/commits'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GistCommit>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_list_commits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_list_commits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List gists for a user
    # Lists public gists for the specified user:
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<BaseGist>]
    def gists_list_for_user(username, opts = {})
      data, _status_code, _headers = gists_list_for_user_with_http_info(username, opts)
      data
    end

    # List gists for a user
    # Lists public gists for the specified user:
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<BaseGist>, Integer, Hash)>] Array<BaseGist> data, response status code and response headers
    def gists_list_for_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_list_for_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling GistsApi.gists_list_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/gists'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BaseGist>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_list_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_list_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List gist forks
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<GistSimple>]
    def gists_list_forks(gist_id, opts = {})
      data, _status_code, _headers = gists_list_forks_with_http_info(gist_id, opts)
      data
    end

    # List gist forks
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<GistSimple>, Integer, Hash)>] Array<GistSimple> data, response status code and response headers
    def gists_list_forks_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_list_forks ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_list_forks"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/forks'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GistSimple>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_list_forks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_list_forks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List public gists
    # List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<BaseGist>]
    def gists_list_public(opts = {})
      data, _status_code, _headers = gists_list_public_with_http_info(opts)
      data
    end

    # List public gists
    # List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<BaseGist>, Integer, Hash)>] Array<BaseGist> data, response status code and response headers
    def gists_list_public_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_list_public ...'
      end
      # resource path
      local_var_path = '/gists/public'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BaseGist>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_list_public",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_list_public\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List starred gists
    # List the authenticated user's starred gists:
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<BaseGist>]
    def gists_list_starred(opts = {})
      data, _status_code, _headers = gists_list_starred_with_http_info(opts)
      data
    end

    # List starred gists
    # List the authenticated user&#39;s starred gists:
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<BaseGist>, Integer, Hash)>] Array<BaseGist> data, response status code and response headers
    def gists_list_starred_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_list_starred ...'
      end
      # resource path
      local_var_path = '/gists/starred'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BaseGist>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_list_starred",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_list_starred\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Star a gist
    # Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gists_star(gist_id, opts = {})
      gists_star_with_http_info(gist_id, opts)
      nil
    end

    # Star a gist
    # Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gists_star_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_star ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_star"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/star'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_star",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_star\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unstar a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gists_unstar(gist_id, opts = {})
      gists_unstar_with_http_info(gist_id, opts)
      nil
    end

    # Unstar a gist
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gists_unstar_with_http_info(gist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_unstar ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_unstar"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/star'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_unstar",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_unstar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a gist
    # Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
    # @param gist_id [String] The unique identifier of the gist.
    # @param gists_update_request [GistsUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GistSimple]
    def gists_update(gist_id, gists_update_request, opts = {})
      data, _status_code, _headers = gists_update_with_http_info(gist_id, gists_update_request, opts)
      data
    end

    # Update a gist
    # Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren&#39;t explicitly changed during an edit are unchanged.
    # @param gist_id [String] The unique identifier of the gist.
    # @param gists_update_request [GistsUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GistSimple, Integer, Hash)>] GistSimple data, response status code and response headers
    def gists_update_with_http_info(gist_id, gists_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_update ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_update"
      end
      # resource path
      local_var_path = '/gists/{gist_id}'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(gists_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GistSimple'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param gists_create_comment_request [GistsCreateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GistComment]
    def gists_update_comment(gist_id, comment_id, gists_create_comment_request, opts = {})
      data, _status_code, _headers = gists_update_comment_with_http_info(gist_id, comment_id, gists_create_comment_request, opts)
      data
    end

    # Update a gist comment
    # 
    # @param gist_id [String] The unique identifier of the gist.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param gists_create_comment_request [GistsCreateCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GistComment, Integer, Hash)>] GistComment data, response status code and response headers
    def gists_update_comment_with_http_info(gist_id, comment_id, gists_create_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GistsApi.gists_update_comment ...'
      end
      # verify the required parameter 'gist_id' is set
      if @api_client.config.client_side_validation && gist_id.nil?
        fail ArgumentError, "Missing the required parameter 'gist_id' when calling GistsApi.gists_update_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling GistsApi.gists_update_comment"
      end
      # verify the required parameter 'gists_create_comment_request' is set
      if @api_client.config.client_side_validation && gists_create_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'gists_create_comment_request' when calling GistsApi.gists_update_comment"
      end
      # resource path
      local_var_path = '/gists/{gist_id}/comments/{comment_id}'.sub('{' + 'gist_id' + '}', CGI.escape(gist_id.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(gists_create_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GistComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GistsApi.gists_update_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GistsApi#gists_update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
