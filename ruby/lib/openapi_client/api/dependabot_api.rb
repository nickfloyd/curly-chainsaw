=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class DependabotApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_add_selected_repo_to_org_secret(org, secret_name, repository_id, opts = {})
      dependabot_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_add_selected_repo_to_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling DependabotApi.dependabot_add_selected_repo_to_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_add_selected_repo_to_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_add_selected_repo_to_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_org_secret_request [DependabotCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dependabot_create_or_update_org_secret(org, secret_name, dependabot_create_or_update_org_secret_request, opts = {})
      data, _status_code, _headers = dependabot_create_or_update_org_secret_with_http_info(org, secret_name, dependabot_create_or_update_org_secret_request, opts)
      data
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_org_secret_request [DependabotCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def dependabot_create_or_update_org_secret_with_http_info(org, secret_name, dependabot_create_or_update_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_create_or_update_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_create_or_update_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_create_or_update_org_secret"
      end
      # verify the required parameter 'dependabot_create_or_update_org_secret_request' is set
      if @api_client.config.client_side_validation && dependabot_create_or_update_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'dependabot_create_or_update_org_secret_request' when calling DependabotApi.dependabot_create_or_update_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dependabot_create_or_update_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_create_or_update_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_create_or_update_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_repo_secret_request [DependabotCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dependabot_create_or_update_repo_secret(owner, repo, secret_name, dependabot_create_or_update_repo_secret_request, opts = {})
      data, _status_code, _headers = dependabot_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, dependabot_create_or_update_repo_secret_request, opts)
      data
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_repo_secret_request [DependabotCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def dependabot_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, dependabot_create_or_update_repo_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_create_or_update_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # verify the required parameter 'dependabot_create_or_update_repo_secret_request' is set
      if @api_client.config.client_side_validation && dependabot_create_or_update_repo_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'dependabot_create_or_update_repo_secret_request' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dependabot_create_or_update_repo_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_create_or_update_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_create_or_update_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_delete_org_secret(org, secret_name, opts = {})
      dependabot_delete_org_secret_with_http_info(org, secret_name, opts)
      nil
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_delete_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_delete_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_delete_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_delete_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_delete_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_delete_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_delete_repo_secret(owner, repo, secret_name, opts = {})
      dependabot_delete_repo_secret_with_http_info(owner, repo, secret_name, opts)
      nil
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_delete_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_delete_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_delete_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_delete_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_delete_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_delete_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_delete_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [DependabotPublicKey]
    def dependabot_get_org_public_key(org, opts = {})
      data, _status_code, _headers = dependabot_get_org_public_key_with_http_info(org, opts)
      data
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotPublicKey, Integer, Hash)>] DependabotPublicKey data, response status code and response headers
    def dependabot_get_org_public_key_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_org_public_key ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_get_org_public_key"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/public-key'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_org_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_org_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [DependabotSecretForAnOrganization]
    def dependabot_get_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = dependabot_get_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotSecretForAnOrganization, Integer, Hash)>] DependabotSecretForAnOrganization data, response status code and response headers
    def dependabot_get_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_get_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_get_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotSecretForAnOrganization'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [DependabotPublicKey]
    def dependabot_get_repo_public_key(owner, repo, opts = {})
      data, _status_code, _headers = dependabot_get_repo_public_key_with_http_info(owner, repo, opts)
      data
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotPublicKey, Integer, Hash)>] DependabotPublicKey data, response status code and response headers
    def dependabot_get_repo_public_key_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_repo_public_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_get_repo_public_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_get_repo_public_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/public-key'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_repo_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_repo_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [DependabotSecret]
    def dependabot_get_repo_secret(owner, repo, secret_name, opts = {})
      data, _status_code, _headers = dependabot_get_repo_secret_with_http_info(owner, repo, secret_name, opts)
      data
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotSecret, Integer, Hash)>] DependabotSecret data, response status code and response headers
    def dependabot_get_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_get_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_get_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_get_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [DependabotListOrgSecrets200Response]
    def dependabot_list_org_secrets(org, opts = {})
      data, _status_code, _headers = dependabot_list_org_secrets_with_http_info(org, opts)
      data
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(DependabotListOrgSecrets200Response, Integer, Hash)>] DependabotListOrgSecrets200Response data, response status code and response headers
    def dependabot_list_org_secrets_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_org_secrets ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_list_org_secrets"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotListOrgSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_org_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_org_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [DependabotListRepoSecrets200Response]
    def dependabot_list_repo_secrets(owner, repo, opts = {})
      data, _status_code, _headers = dependabot_list_repo_secrets_with_http_info(owner, repo, opts)
      data
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(DependabotListRepoSecrets200Response, Integer, Hash)>] DependabotListRepoSecrets200Response data, response status code and response headers
    def dependabot_list_repo_secrets_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_repo_secrets ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_list_repo_secrets"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_list_repo_secrets"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotListRepoSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_repo_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_repo_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [ActionsListSelectedReposForOrgSecret200Response]
    def dependabot_list_selected_repos_for_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = dependabot_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(ActionsListSelectedReposForOrgSecret200Response, Integer, Hash)>] ActionsListSelectedReposForOrgSecret200Response data, response status code and response headers
    def dependabot_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_list_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_list_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedReposForOrgSecret200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_remove_selected_repo_from_org_secret(org, secret_name, repository_id, opts = {})
      dependabot_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_remove_selected_repo_from_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling DependabotApi.dependabot_remove_selected_repo_from_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_remove_selected_repo_from_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_remove_selected_repo_from_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_set_selected_repos_for_org_secret_request [DependabotSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_set_selected_repos_for_org_secret(org, secret_name, dependabot_set_selected_repos_for_org_secret_request, opts = {})
      dependabot_set_selected_repos_for_org_secret_with_http_info(org, secret_name, dependabot_set_selected_repos_for_org_secret_request, opts)
      nil
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_set_selected_repos_for_org_secret_request [DependabotSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_set_selected_repos_for_org_secret_with_http_info(org, secret_name, dependabot_set_selected_repos_for_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_set_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'dependabot_set_selected_repos_for_org_secret_request' is set
      if @api_client.config.client_side_validation && dependabot_set_selected_repos_for_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'dependabot_set_selected_repos_for_org_secret_request' when calling DependabotApi.dependabot_set_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dependabot_set_selected_repos_for_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_set_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_set_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
