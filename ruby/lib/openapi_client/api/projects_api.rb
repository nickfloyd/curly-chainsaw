=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add project collaborator
    # Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
    # @param project_id [Integer] The unique identifier of the project.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectsAddCollaboratorRequest] :projects_add_collaborator_request 
    # @return [nil]
    def projects_add_collaborator(project_id, username, opts = {})
      projects_add_collaborator_with_http_info(project_id, username, opts)
      nil
    end

    # Add project collaborator
    # Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project &#x60;admin&#x60; to add a collaborator.
    # @param project_id [Integer] The unique identifier of the project.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectsAddCollaboratorRequest] :projects_add_collaborator_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def projects_add_collaborator_with_http_info(project_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_add_collaborator ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_add_collaborator"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling ProjectsApi.projects_add_collaborator"
      end
      # resource path
      local_var_path = '/projects/{project_id}/collaborators/{username}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'projects_add_collaborator_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_add_collaborator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_add_collaborator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a project card
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param projects_create_card_request [ProjectsCreateCardRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ProjectCard]
    def projects_create_card(column_id, projects_create_card_request, opts = {})
      data, _status_code, _headers = projects_create_card_with_http_info(column_id, projects_create_card_request, opts)
      data
    end

    # Create a project card
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param projects_create_card_request [ProjectsCreateCardRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectCard, Integer, Hash)>] ProjectCard data, response status code and response headers
    def projects_create_card_with_http_info(column_id, projects_create_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_create_card ...'
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling ProjectsApi.projects_create_card"
      end
      # verify the required parameter 'projects_create_card_request' is set
      if @api_client.config.client_side_validation && projects_create_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_create_card_request' when calling ProjectsApi.projects_create_card"
      end
      # resource path
      local_var_path = '/projects/columns/{column_id}/cards'.sub('{' + 'column_id' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_create_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectCard'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_create_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_create_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a project column
    # 
    # @param project_id [Integer] The unique identifier of the project.
    # @param projects_update_column_request [ProjectsUpdateColumnRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ProjectColumn]
    def projects_create_column(project_id, projects_update_column_request, opts = {})
      data, _status_code, _headers = projects_create_column_with_http_info(project_id, projects_update_column_request, opts)
      data
    end

    # Create a project column
    # 
    # @param project_id [Integer] The unique identifier of the project.
    # @param projects_update_column_request [ProjectsUpdateColumnRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectColumn, Integer, Hash)>] ProjectColumn data, response status code and response headers
    def projects_create_column_with_http_info(project_id, projects_update_column_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_create_column ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_create_column"
      end
      # verify the required parameter 'projects_update_column_request' is set
      if @api_client.config.client_side_validation && projects_update_column_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_update_column_request' when calling ProjectsApi.projects_create_column"
      end
      # resource path
      local_var_path = '/projects/{project_id}/columns'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_update_column_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectColumn'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_create_column",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_create_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user project
    # Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    # @param projects_create_for_authenticated_user_request [ProjectsCreateForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def projects_create_for_authenticated_user(projects_create_for_authenticated_user_request, opts = {})
      data, _status_code, _headers = projects_create_for_authenticated_user_with_http_info(projects_create_for_authenticated_user_request, opts)
      data
    end

    # Create a user project
    # Creates a user project board. Returns a &#x60;410 Gone&#x60; status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
    # @param projects_create_for_authenticated_user_request [ProjectsCreateForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def projects_create_for_authenticated_user_with_http_info(projects_create_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_create_for_authenticated_user ...'
      end
      # verify the required parameter 'projects_create_for_authenticated_user_request' is set
      if @api_client.config.client_side_validation && projects_create_for_authenticated_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_create_for_authenticated_user_request' when calling ProjectsApi.projects_create_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_create_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_create_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_create_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an organization project
    # Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param projects_create_for_org_request [ProjectsCreateForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def projects_create_for_org(org, projects_create_for_org_request, opts = {})
      data, _status_code, _headers = projects_create_for_org_with_http_info(org, projects_create_for_org_request, opts)
      data
    end

    # Create an organization project
    # Creates an organization project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param projects_create_for_org_request [ProjectsCreateForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def projects_create_for_org_with_http_info(org, projects_create_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_create_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ProjectsApi.projects_create_for_org"
      end
      # verify the required parameter 'projects_create_for_org_request' is set
      if @api_client.config.client_side_validation && projects_create_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_create_for_org_request' when calling ProjectsApi.projects_create_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/projects'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_create_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_create_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_create_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a repository project
    # Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param projects_create_for_org_request [ProjectsCreateForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def projects_create_for_repo(owner, repo, projects_create_for_org_request, opts = {})
      data, _status_code, _headers = projects_create_for_repo_with_http_info(owner, repo, projects_create_for_org_request, opts)
      data
    end

    # Create a repository project
    # Creates a repository project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param projects_create_for_org_request [ProjectsCreateForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def projects_create_for_repo_with_http_info(owner, repo, projects_create_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_create_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ProjectsApi.projects_create_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ProjectsApi.projects_create_for_repo"
      end
      # verify the required parameter 'projects_create_for_org_request' is set
      if @api_client.config.client_side_validation && projects_create_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_create_for_org_request' when calling ProjectsApi.projects_create_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/projects'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_create_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_create_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_create_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a project
    # Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def projects_delete(project_id, opts = {})
      projects_delete_with_http_info(project_id, opts)
      nil
    end

    # Delete a project
    # Deletes a project board. Returns a &#x60;404 Not Found&#x60; status if projects are disabled.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def projects_delete_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_delete"
      end
      # resource path
      local_var_path = '/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def projects_delete_card(card_id, opts = {})
      projects_delete_card_with_http_info(card_id, opts)
      nil
    end

    # Delete a project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def projects_delete_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_delete_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling ProjectsApi.projects_delete_card"
      end
      # resource path
      local_var_path = '/projects/columns/cards/{card_id}'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_delete_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_delete_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def projects_delete_column(column_id, opts = {})
      projects_delete_column_with_http_info(column_id, opts)
      nil
    end

    # Delete a project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def projects_delete_column_with_http_info(column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_delete_column ...'
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling ProjectsApi.projects_delete_column"
      end
      # resource path
      local_var_path = '/projects/columns/{column_id}'.sub('{' + 'column_id' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_delete_column",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_delete_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a project
    # Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def projects_get(project_id, opts = {})
      data, _status_code, _headers = projects_get_with_http_info(project_id, opts)
      data
    end

    # Get a project
    # Gets a project by its &#x60;id&#x60;. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def projects_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_get"
      end
      # resource path
      local_var_path = '/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param [Hash] opts the optional parameters
    # @return [ProjectCard]
    def projects_get_card(card_id, opts = {})
      data, _status_code, _headers = projects_get_card_with_http_info(card_id, opts)
      data
    end

    # Get a project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectCard, Integer, Hash)>] ProjectCard data, response status code and response headers
    def projects_get_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling ProjectsApi.projects_get_card"
      end
      # resource path
      local_var_path = '/projects/columns/cards/{card_id}'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectCard'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_get_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param [Hash] opts the optional parameters
    # @return [ProjectColumn]
    def projects_get_column(column_id, opts = {})
      data, _status_code, _headers = projects_get_column_with_http_info(column_id, opts)
      data
    end

    # Get a project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectColumn, Integer, Hash)>] ProjectColumn data, response status code and response headers
    def projects_get_column_with_http_info(column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get_column ...'
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling ProjectsApi.projects_get_column"
      end
      # resource path
      local_var_path = '/projects/columns/{column_id}'.sub('{' + 'column_id' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectColumn'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_get_column",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get project permission for a user
    # Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
    # @param project_id [Integer] The unique identifier of the project.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [ProjectCollaboratorPermission]
    def projects_get_permission_for_user(project_id, username, opts = {})
      data, _status_code, _headers = projects_get_permission_for_user_with_http_info(project_id, username, opts)
      data
    end

    # Get project permission for a user
    # Returns the collaborator&#39;s permission level for an organization project. Possible values for the &#x60;permission&#x60; key: &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, &#x60;none&#x60;. You must be an organization owner or a project &#x60;admin&#x60; to review a user&#39;s permission level.
    # @param project_id [Integer] The unique identifier of the project.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectCollaboratorPermission, Integer, Hash)>] ProjectCollaboratorPermission data, response status code and response headers
    def projects_get_permission_for_user_with_http_info(project_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get_permission_for_user ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_get_permission_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling ProjectsApi.projects_get_permission_for_user"
      end
      # resource path
      local_var_path = '/projects/{project_id}/collaborators/{username}/permission'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectCollaboratorPermission'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_get_permission_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get_permission_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List project cards
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :archived_state Filters the project cards that are returned by the card&#39;s state. (default to 'not_archived')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<ProjectCard>]
    def projects_list_cards(column_id, opts = {})
      data, _status_code, _headers = projects_list_cards_with_http_info(column_id, opts)
      data
    end

    # List project cards
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :archived_state Filters the project cards that are returned by the card&#39;s state. (default to 'not_archived')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<ProjectCard>, Integer, Hash)>] Array<ProjectCard> data, response status code and response headers
    def projects_list_cards_with_http_info(column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_list_cards ...'
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling ProjectsApi.projects_list_cards"
      end
      allowable_values = ["all", "archived", "not_archived"]
      if @api_client.config.client_side_validation && opts[:'archived_state'] && !allowable_values.include?(opts[:'archived_state'])
        fail ArgumentError, "invalid value for \"archived_state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/projects/columns/{column_id}/cards'.sub('{' + 'column_id' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'archived_state'] = opts[:'archived_state'] if !opts[:'archived_state'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProjectCard>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_list_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List project collaborators
    # Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :affiliation Filters the collaborators by their affiliation. &#x60;outside&#x60; means outside collaborators of a project that are not a member of the project&#39;s organization. &#x60;direct&#x60; means collaborators with permissions to a project, regardless of organization membership status. &#x60;all&#x60; means all collaborators the authenticated user can see. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<SimpleUser1>]
    def projects_list_collaborators(project_id, opts = {})
      data, _status_code, _headers = projects_list_collaborators_with_http_info(project_id, opts)
      data
    end

    # List project collaborators
    # Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project &#x60;admin&#x60; to list collaborators.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :affiliation Filters the collaborators by their affiliation. &#x60;outside&#x60; means outside collaborators of a project that are not a member of the project&#39;s organization. &#x60;direct&#x60; means collaborators with permissions to a project, regardless of organization membership status. &#x60;all&#x60; means all collaborators the authenticated user can see. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<SimpleUser1>, Integer, Hash)>] Array<SimpleUser1> data, response status code and response headers
    def projects_list_collaborators_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_list_collaborators ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_list_collaborators"
      end
      allowable_values = ["outside", "direct", "all"]
      if @api_client.config.client_side_validation && opts[:'affiliation'] && !allowable_values.include?(opts[:'affiliation'])
        fail ArgumentError, "invalid value for \"affiliation\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/projects/{project_id}/collaborators'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'affiliation'] = opts[:'affiliation'] if !opts[:'affiliation'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser1>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_list_collaborators",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list_collaborators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List project columns
    # 
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<ProjectColumn>]
    def projects_list_columns(project_id, opts = {})
      data, _status_code, _headers = projects_list_columns_with_http_info(project_id, opts)
      data
    end

    # List project columns
    # 
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<ProjectColumn>, Integer, Hash)>] Array<ProjectColumn> data, response status code and response headers
    def projects_list_columns_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_list_columns ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_list_columns"
      end
      # resource path
      local_var_path = '/projects/{project_id}/columns'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProjectColumn>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_list_columns",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization projects
    # Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Project>]
    def projects_list_for_org(org, opts = {})
      data, _status_code, _headers = projects_list_for_org_with_http_info(org, opts)
      data
    end

    # List organization projects
    # Lists the projects in an organization. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Project>, Integer, Hash)>] Array<Project> data, response status code and response headers
    def projects_list_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_list_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ProjectsApi.projects_list_for_org"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/projects'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Project>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_list_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository projects
    # Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Project>]
    def projects_list_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = projects_list_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List repository projects
    # Lists the projects in a repository. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Project>, Integer, Hash)>] Array<Project> data, response status code and response headers
    def projects_list_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_list_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ProjectsApi.projects_list_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ProjectsApi.projects_list_for_repo"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/projects'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Project>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_list_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user projects
    # 
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Project>]
    def projects_list_for_user(username, opts = {})
      data, _status_code, _headers = projects_list_for_user_with_http_info(username, opts)
      data
    end

    # List user projects
    # 
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (default to 'open')
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Project>, Integer, Hash)>] Array<Project> data, response status code and response headers
    def projects_list_for_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_list_for_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling ProjectsApi.projects_list_for_user"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/{username}/projects'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Project>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_list_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param projects_move_card_request [ProjectsMoveCardRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def projects_move_card(card_id, projects_move_card_request, opts = {})
      data, _status_code, _headers = projects_move_card_with_http_info(card_id, projects_move_card_request, opts)
      data
    end

    # Move a project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param projects_move_card_request [ProjectsMoveCardRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def projects_move_card_with_http_info(card_id, projects_move_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_move_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling ProjectsApi.projects_move_card"
      end
      # verify the required parameter 'projects_move_card_request' is set
      if @api_client.config.client_side_validation && projects_move_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_move_card_request' when calling ProjectsApi.projects_move_card"
      end
      # resource path
      local_var_path = '/projects/columns/cards/{card_id}/moves'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_move_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_move_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_move_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param projects_move_column_request [ProjectsMoveColumnRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def projects_move_column(column_id, projects_move_column_request, opts = {})
      data, _status_code, _headers = projects_move_column_with_http_info(column_id, projects_move_column_request, opts)
      data
    end

    # Move a project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param projects_move_column_request [ProjectsMoveColumnRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def projects_move_column_with_http_info(column_id, projects_move_column_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_move_column ...'
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling ProjectsApi.projects_move_column"
      end
      # verify the required parameter 'projects_move_column_request' is set
      if @api_client.config.client_side_validation && projects_move_column_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_move_column_request' when calling ProjectsApi.projects_move_column"
      end
      # resource path
      local_var_path = '/projects/columns/{column_id}/moves'.sub('{' + 'column_id' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_move_column_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_move_column",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_move_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove user as a collaborator
    # Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
    # @param project_id [Integer] The unique identifier of the project.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def projects_remove_collaborator(project_id, username, opts = {})
      projects_remove_collaborator_with_http_info(project_id, username, opts)
      nil
    end

    # Remove user as a collaborator
    # Removes a collaborator from an organization project. You must be an organization owner or a project &#x60;admin&#x60; to remove a collaborator.
    # @param project_id [Integer] The unique identifier of the project.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def projects_remove_collaborator_with_http_info(project_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_remove_collaborator ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_remove_collaborator"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling ProjectsApi.projects_remove_collaborator"
      end
      # resource path
      local_var_path = '/projects/{project_id}/collaborators/{username}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_remove_collaborator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_remove_collaborator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a project
    # Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectsUpdateRequest] :projects_update_request 
    # @return [Project]
    def projects_update(project_id, opts = {})
      data, _status_code, _headers = projects_update_with_http_info(project_id, opts)
      data
    end

    # Update a project
    # Updates a project board&#39;s information. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
    # @param project_id [Integer] The unique identifier of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectsUpdateRequest] :projects_update_request 
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def projects_update_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_update ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_update"
      end
      # resource path
      local_var_path = '/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'projects_update_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectsUpdateCardRequest] :projects_update_card_request 
    # @return [ProjectCard]
    def projects_update_card(card_id, opts = {})
      data, _status_code, _headers = projects_update_card_with_http_info(card_id, opts)
      data
    end

    # Update an existing project card
    # 
    # @param card_id [Integer] The unique identifier of the card.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectsUpdateCardRequest] :projects_update_card_request 
    # @return [Array<(ProjectCard, Integer, Hash)>] ProjectCard data, response status code and response headers
    def projects_update_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_update_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling ProjectsApi.projects_update_card"
      end
      # resource path
      local_var_path = '/projects/columns/cards/{card_id}'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'projects_update_card_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectCard'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_update_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_update_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param projects_update_column_request [ProjectsUpdateColumnRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ProjectColumn]
    def projects_update_column(column_id, projects_update_column_request, opts = {})
      data, _status_code, _headers = projects_update_column_with_http_info(column_id, projects_update_column_request, opts)
      data
    end

    # Update an existing project column
    # 
    # @param column_id [Integer] The unique identifier of the column.
    # @param projects_update_column_request [ProjectsUpdateColumnRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectColumn, Integer, Hash)>] ProjectColumn data, response status code and response headers
    def projects_update_column_with_http_info(column_id, projects_update_column_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_update_column ...'
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling ProjectsApi.projects_update_column"
      end
      # verify the required parameter 'projects_update_column_request' is set
      if @api_client.config.client_side_validation && projects_update_column_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_update_column_request' when calling ProjectsApi.projects_update_column"
      end
      # resource path
      local_var_path = '/projects/columns/{column_id}'.sub('{' + 'column_id' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_update_column_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectColumn'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_update_column",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_update_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
