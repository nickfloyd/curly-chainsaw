=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class ReactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create reaction for a commit comment
    # Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reactions_create_for_commit_comment_request [ReactionsCreateForCommitCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_commit_comment(owner, repo, comment_id, reactions_create_for_commit_comment_request, opts = {})
      data, _status_code, _headers = reactions_create_for_commit_comment_with_http_info(owner, repo, comment_id, reactions_create_for_commit_comment_request, opts)
      data
    end

    # Create reaction for a commit comment
    # Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reactions_create_for_commit_comment_request [ReactionsCreateForCommitCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_commit_comment_with_http_info(owner, repo, comment_id, reactions_create_for_commit_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_commit_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_create_for_commit_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_create_for_commit_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_create_for_commit_comment"
      end
      # verify the required parameter 'reactions_create_for_commit_comment_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_commit_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_commit_comment_request' when calling ReactionsApi.reactions_create_for_commit_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/comments/{comment_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_commit_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_commit_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_commit_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for an issue
    # Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param reactions_create_for_issue_request [ReactionsCreateForIssueRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_issue(owner, repo, issue_number, reactions_create_for_issue_request, opts = {})
      data, _status_code, _headers = reactions_create_for_issue_with_http_info(owner, repo, issue_number, reactions_create_for_issue_request, opts)
      data
    end

    # Create reaction for an issue
    # Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param reactions_create_for_issue_request [ReactionsCreateForIssueRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_issue_with_http_info(owner, repo, issue_number, reactions_create_for_issue_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_issue ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_create_for_issue"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_create_for_issue"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling ReactionsApi.reactions_create_for_issue"
      end
      # verify the required parameter 'reactions_create_for_issue_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_issue_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_issue_request' when calling ReactionsApi.reactions_create_for_issue"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_issue_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_issue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for an issue comment
    # Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reactions_create_for_issue_comment_request [ReactionsCreateForIssueCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_issue_comment(owner, repo, comment_id, reactions_create_for_issue_comment_request, opts = {})
      data, _status_code, _headers = reactions_create_for_issue_comment_with_http_info(owner, repo, comment_id, reactions_create_for_issue_comment_request, opts)
      data
    end

    # Create reaction for an issue comment
    # Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reactions_create_for_issue_comment_request [ReactionsCreateForIssueCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_issue_comment_with_http_info(owner, repo, comment_id, reactions_create_for_issue_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_issue_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_create_for_issue_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_create_for_issue_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_create_for_issue_comment"
      end
      # verify the required parameter 'reactions_create_for_issue_comment_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_issue_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_issue_comment_request' when calling ReactionsApi.reactions_create_for_issue_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_issue_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_issue_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_issue_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for a pull request review comment
    # Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reactions_create_for_pull_request_review_comment_request [ReactionsCreateForPullRequestReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_pull_request_review_comment(owner, repo, comment_id, reactions_create_for_pull_request_review_comment_request, opts = {})
      data, _status_code, _headers = reactions_create_for_pull_request_review_comment_with_http_info(owner, repo, comment_id, reactions_create_for_pull_request_review_comment_request, opts)
      data
    end

    # Create reaction for a pull request review comment
    # Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reactions_create_for_pull_request_review_comment_request [ReactionsCreateForPullRequestReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_pull_request_review_comment_with_http_info(owner, repo, comment_id, reactions_create_for_pull_request_review_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_pull_request_review_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_create_for_pull_request_review_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_create_for_pull_request_review_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_create_for_pull_request_review_comment"
      end
      # verify the required parameter 'reactions_create_for_pull_request_review_comment_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_pull_request_review_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_pull_request_review_comment_request' when calling ReactionsApi.reactions_create_for_pull_request_review_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_pull_request_review_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_pull_request_review_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_pull_request_review_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for a release
    # Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param release_id [Integer] The unique identifier of the release.
    # @param reactions_create_for_release_request [ReactionsCreateForReleaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_release(owner, repo, release_id, reactions_create_for_release_request, opts = {})
      data, _status_code, _headers = reactions_create_for_release_with_http_info(owner, repo, release_id, reactions_create_for_release_request, opts)
      data
    end

    # Create reaction for a release
    # Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a &#x60;Status: 200 OK&#x60; means that you already added the reaction type to this release.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param release_id [Integer] The unique identifier of the release.
    # @param reactions_create_for_release_request [ReactionsCreateForReleaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_release_with_http_info(owner, repo, release_id, reactions_create_for_release_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_release ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_create_for_release"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_create_for_release"
      end
      # verify the required parameter 'release_id' is set
      if @api_client.config.client_side_validation && release_id.nil?
        fail ArgumentError, "Missing the required parameter 'release_id' when calling ReactionsApi.reactions_create_for_release"
      end
      # verify the required parameter 'reactions_create_for_release_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_release_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_release_request' when calling ReactionsApi.reactions_create_for_release"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/releases/{release_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'release_id' + '}', CGI.escape(release_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_release_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_release",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_release\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for a team discussion comment
    # Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param reactions_create_for_team_discussion_comment_in_org_request [ReactionsCreateForTeamDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_team_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, reactions_create_for_team_discussion_comment_in_org_request, opts = {})
      data, _status_code, _headers = reactions_create_for_team_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, reactions_create_for_team_discussion_comment_in_org_request, opts)
      data
    end

    # Create reaction for a team discussion comment
    # Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param reactions_create_for_team_discussion_comment_in_org_request [ReactionsCreateForTeamDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_team_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, reactions_create_for_team_discussion_comment_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_team_discussion_comment_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ReactionsApi.reactions_create_for_team_discussion_comment_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling ReactionsApi.reactions_create_for_team_discussion_comment_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_create_for_team_discussion_comment_in_org"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling ReactionsApi.reactions_create_for_team_discussion_comment_in_org"
      end
      # verify the required parameter 'reactions_create_for_team_discussion_comment_in_org_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_team_discussion_comment_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_team_discussion_comment_in_org_request' when calling ReactionsApi.reactions_create_for_team_discussion_comment_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_team_discussion_comment_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_team_discussion_comment_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_team_discussion_comment_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for a team discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param reactions_create_for_team_discussion_comment_in_org_request [ReactionsCreateForTeamDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_team_discussion_comment_legacy(team_id, discussion_number, comment_number, reactions_create_for_team_discussion_comment_in_org_request, opts = {})
      data, _status_code, _headers = reactions_create_for_team_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, reactions_create_for_team_discussion_comment_in_org_request, opts)
      data
    end

    # Create reaction for a team discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\&quot; endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param reactions_create_for_team_discussion_comment_in_org_request [ReactionsCreateForTeamDiscussionCommentInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_team_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, reactions_create_for_team_discussion_comment_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_team_discussion_comment_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling ReactionsApi.reactions_create_for_team_discussion_comment_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_create_for_team_discussion_comment_legacy"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling ReactionsApi.reactions_create_for_team_discussion_comment_legacy"
      end
      # verify the required parameter 'reactions_create_for_team_discussion_comment_in_org_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_team_discussion_comment_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_team_discussion_comment_in_org_request' when calling ReactionsApi.reactions_create_for_team_discussion_comment_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_team_discussion_comment_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_team_discussion_comment_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_team_discussion_comment_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for a team discussion
    # Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param reactions_create_for_team_discussion_in_org_request [ReactionsCreateForTeamDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_team_discussion_in_org(org, team_slug, discussion_number, reactions_create_for_team_discussion_in_org_request, opts = {})
      data, _status_code, _headers = reactions_create_for_team_discussion_in_org_with_http_info(org, team_slug, discussion_number, reactions_create_for_team_discussion_in_org_request, opts)
      data
    end

    # Create reaction for a team discussion
    # Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param reactions_create_for_team_discussion_in_org_request [ReactionsCreateForTeamDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_team_discussion_in_org_with_http_info(org, team_slug, discussion_number, reactions_create_for_team_discussion_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_team_discussion_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ReactionsApi.reactions_create_for_team_discussion_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling ReactionsApi.reactions_create_for_team_discussion_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_create_for_team_discussion_in_org"
      end
      # verify the required parameter 'reactions_create_for_team_discussion_in_org_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_team_discussion_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_team_discussion_in_org_request' when calling ReactionsApi.reactions_create_for_team_discussion_in_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_team_discussion_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_team_discussion_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_team_discussion_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create reaction for a team discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param reactions_create_for_team_discussion_in_org_request [ReactionsCreateForTeamDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def reactions_create_for_team_discussion_legacy(team_id, discussion_number, reactions_create_for_team_discussion_in_org_request, opts = {})
      data, _status_code, _headers = reactions_create_for_team_discussion_legacy_with_http_info(team_id, discussion_number, reactions_create_for_team_discussion_in_org_request, opts)
      data
    end

    # Create reaction for a team discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create reaction for a team discussion&#x60;](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param reactions_create_for_team_discussion_in_org_request [ReactionsCreateForTeamDiscussionInOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Integer, Hash)>] Reaction data, response status code and response headers
    def reactions_create_for_team_discussion_legacy_with_http_info(team_id, discussion_number, reactions_create_for_team_discussion_in_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_create_for_team_discussion_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling ReactionsApi.reactions_create_for_team_discussion_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_create_for_team_discussion_legacy"
      end
      # verify the required parameter 'reactions_create_for_team_discussion_in_org_request' is set
      if @api_client.config.client_side_validation && reactions_create_for_team_discussion_in_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_create_for_team_discussion_in_org_request' when calling ReactionsApi.reactions_create_for_team_discussion_legacy"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/reactions'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reactions_create_for_team_discussion_in_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_create_for_team_discussion_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_create_for_team_discussion_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a commit comment reaction
    # **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactions_delete_for_commit_comment(owner, repo, comment_id, reaction_id, opts = {})
      reactions_delete_for_commit_comment_with_http_info(owner, repo, comment_id, reaction_id, opts)
      nil
    end

    # Delete a commit comment reaction
    # **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reactions_delete_for_commit_comment_with_http_info(owner, repo, comment_id, reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_delete_for_commit_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_delete_for_commit_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_delete_for_commit_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_delete_for_commit_comment"
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling ReactionsApi.reactions_delete_for_commit_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s)).sub('{' + 'reaction_id' + '}', CGI.escape(reaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_delete_for_commit_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_delete_for_commit_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an issue reaction
    # **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.  Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactions_delete_for_issue(owner, repo, issue_number, reaction_id, opts = {})
      reactions_delete_for_issue_with_http_info(owner, repo, issue_number, reaction_id, opts)
      nil
    end

    # Delete an issue reaction
    # **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reactions_delete_for_issue_with_http_info(owner, repo, issue_number, reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_delete_for_issue ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_delete_for_issue"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_delete_for_issue"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling ReactionsApi.reactions_delete_for_issue"
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling ReactionsApi.reactions_delete_for_issue"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s)).sub('{' + 'reaction_id' + '}', CGI.escape(reaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_delete_for_issue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_delete_for_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an issue comment reaction
    # **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactions_delete_for_issue_comment(owner, repo, comment_id, reaction_id, opts = {})
      reactions_delete_for_issue_comment_with_http_info(owner, repo, comment_id, reaction_id, opts)
      nil
    end

    # Delete an issue comment reaction
    # **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reactions_delete_for_issue_comment_with_http_info(owner, repo, comment_id, reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_delete_for_issue_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_delete_for_issue_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_delete_for_issue_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_delete_for_issue_comment"
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling ReactionsApi.reactions_delete_for_issue_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s)).sub('{' + 'reaction_id' + '}', CGI.escape(reaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_delete_for_issue_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_delete_for_issue_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a pull request comment reaction
    # **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`  Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactions_delete_for_pull_request_comment(owner, repo, comment_id, reaction_id, opts = {})
      reactions_delete_for_pull_request_comment_with_http_info(owner, repo, comment_id, reaction_id, opts)
      nil
    end

    # Delete a pull request comment reaction
    # **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.&#x60;  Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reactions_delete_for_pull_request_comment_with_http_info(owner, repo, comment_id, reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_delete_for_pull_request_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_delete_for_pull_request_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_delete_for_pull_request_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_delete_for_pull_request_comment"
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling ReactionsApi.reactions_delete_for_pull_request_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s)).sub('{' + 'reaction_id' + '}', CGI.escape(reaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_delete_for_pull_request_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_delete_for_pull_request_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a release reaction
    # **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.  Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param release_id [Integer] The unique identifier of the release.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactions_delete_for_release(owner, repo, release_id, reaction_id, opts = {})
      reactions_delete_for_release_with_http_info(owner, repo, release_id, reaction_id, opts)
      nil
    end

    # Delete a release reaction
    # **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param release_id [Integer] The unique identifier of the release.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reactions_delete_for_release_with_http_info(owner, repo, release_id, reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_delete_for_release ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_delete_for_release"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_delete_for_release"
      end
      # verify the required parameter 'release_id' is set
      if @api_client.config.client_side_validation && release_id.nil?
        fail ArgumentError, "Missing the required parameter 'release_id' when calling ReactionsApi.reactions_delete_for_release"
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling ReactionsApi.reactions_delete_for_release"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'release_id' + '}', CGI.escape(release_id.to_s)).sub('{' + 'reaction_id' + '}', CGI.escape(reaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_delete_for_release",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_delete_for_release\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete team discussion reaction
    # **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactions_delete_for_team_discussion(org, team_slug, discussion_number, reaction_id, opts = {})
      reactions_delete_for_team_discussion_with_http_info(org, team_slug, discussion_number, reaction_id, opts)
      nil
    end

    # Delete team discussion reaction
    # **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reactions_delete_for_team_discussion_with_http_info(org, team_slug, discussion_number, reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_delete_for_team_discussion ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ReactionsApi.reactions_delete_for_team_discussion"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling ReactionsApi.reactions_delete_for_team_discussion"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_delete_for_team_discussion"
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling ReactionsApi.reactions_delete_for_team_discussion"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'reaction_id' + '}', CGI.escape(reaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_delete_for_team_discussion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_delete_for_team_discussion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete team discussion comment reaction
    # **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactions_delete_for_team_discussion_comment(org, team_slug, discussion_number, comment_number, reaction_id, opts = {})
      reactions_delete_for_team_discussion_comment_with_http_info(org, team_slug, discussion_number, comment_number, reaction_id, opts)
      nil
    end

    # Delete team discussion comment reaction
    # **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param reaction_id [Integer] The unique identifier of the reaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reactions_delete_for_team_discussion_comment_with_http_info(org, team_slug, discussion_number, comment_number, reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_delete_for_team_discussion_comment ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ReactionsApi.reactions_delete_for_team_discussion_comment"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling ReactionsApi.reactions_delete_for_team_discussion_comment"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_delete_for_team_discussion_comment"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling ReactionsApi.reactions_delete_for_team_discussion_comment"
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling ReactionsApi.reactions_delete_for_team_discussion_comment"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s)).sub('{' + 'reaction_id' + '}', CGI.escape(reaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_delete_for_team_discussion_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_delete_for_team_discussion_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for a commit comment
    # List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_commit_comment(owner, repo, comment_id, opts = {})
      data, _status_code, _headers = reactions_list_for_commit_comment_with_http_info(owner, repo, comment_id, opts)
      data
    end

    # List reactions for a commit comment
    # List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_commit_comment_with_http_info(owner, repo, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_commit_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_list_for_commit_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_list_for_commit_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_list_for_commit_comment"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/comments/{comment_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_commit_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_commit_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for an issue
    # List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_issue(owner, repo, issue_number, opts = {})
      data, _status_code, _headers = reactions_list_for_issue_with_http_info(owner, repo, issue_number, opts)
      data
    end

    # List reactions for an issue
    # List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param issue_number [Integer] The number that identifies the issue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_issue_with_http_info(owner, repo, issue_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_issue ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_list_for_issue"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_list_for_issue"
      end
      # verify the required parameter 'issue_number' is set
      if @api_client.config.client_side_validation && issue_number.nil?
        fail ArgumentError, "Missing the required parameter 'issue_number' when calling ReactionsApi.reactions_list_for_issue"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/{issue_number}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'issue_number' + '}', CGI.escape(issue_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_issue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for an issue comment
    # List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_issue_comment(owner, repo, comment_id, opts = {})
      data, _status_code, _headers = reactions_list_for_issue_comment_with_http_info(owner, repo, comment_id, opts)
      data
    end

    # List reactions for an issue comment
    # List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_issue_comment_with_http_info(owner, repo, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_issue_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_list_for_issue_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_list_for_issue_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_list_for_issue_comment"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_issue_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_issue_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for a pull request review comment
    # List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_pull_request_review_comment(owner, repo, comment_id, opts = {})
      data, _status_code, _headers = reactions_list_for_pull_request_review_comment_with_http_info(owner, repo, comment_id, opts)
      data
    end

    # List reactions for a pull request review comment
    # List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_pull_request_review_comment_with_http_info(owner, repo, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_pull_request_review_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_list_for_pull_request_review_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_list_for_pull_request_review_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReactionsApi.reactions_list_for_pull_request_review_comment"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_pull_request_review_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_pull_request_review_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for a release
    # List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param release_id [Integer] The unique identifier of the release.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_release(owner, repo, release_id, opts = {})
      data, _status_code, _headers = reactions_list_for_release_with_http_info(owner, repo, release_id, opts)
      data
    end

    # List reactions for a release
    # List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param release_id [Integer] The unique identifier of the release.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_release_with_http_info(owner, repo, release_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_release ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReactionsApi.reactions_list_for_release"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ReactionsApi.reactions_list_for_release"
      end
      # verify the required parameter 'release_id' is set
      if @api_client.config.client_side_validation && release_id.nil?
        fail ArgumentError, "Missing the required parameter 'release_id' when calling ReactionsApi.reactions_list_for_release"
      end
      allowable_values = ["+1", "laugh", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/releases/{release_id}/reactions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'release_id' + '}', CGI.escape(release_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_release",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_release\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for a team discussion comment
    # List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_team_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, opts = {})
      data, _status_code, _headers = reactions_list_for_team_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, opts)
      data
    end

    # List reactions for a team discussion comment
    # List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_team_discussion_comment_in_org_with_http_info(org, team_slug, discussion_number, comment_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_team_discussion_comment_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ReactionsApi.reactions_list_for_team_discussion_comment_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling ReactionsApi.reactions_list_for_team_discussion_comment_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_list_for_team_discussion_comment_in_org"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling ReactionsApi.reactions_list_for_team_discussion_comment_in_org"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_team_discussion_comment_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_team_discussion_comment_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for a team discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_team_discussion_comment_legacy(team_id, discussion_number, comment_number, opts = {})
      data, _status_code, _headers = reactions_list_for_team_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, opts)
      data
    end

    # List reactions for a team discussion comment (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion comment&#x60;](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param comment_number [Integer] The number that identifies the comment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_team_discussion_comment_legacy_with_http_info(team_id, discussion_number, comment_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_team_discussion_comment_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling ReactionsApi.reactions_list_for_team_discussion_comment_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_list_for_team_discussion_comment_legacy"
      end
      # verify the required parameter 'comment_number' is set
      if @api_client.config.client_side_validation && comment_number.nil?
        fail ArgumentError, "Missing the required parameter 'comment_number' when calling ReactionsApi.reactions_list_for_team_discussion_comment_legacy"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s)).sub('{' + 'comment_number' + '}', CGI.escape(comment_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_team_discussion_comment_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_team_discussion_comment_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for a team discussion
    # List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_team_discussion_in_org(org, team_slug, discussion_number, opts = {})
      data, _status_code, _headers = reactions_list_for_team_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts)
      data
    end

    # List reactions for a team discussion
    # List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_team_discussion_in_org_with_http_info(org, team_slug, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_team_discussion_in_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ReactionsApi.reactions_list_for_team_discussion_in_org"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling ReactionsApi.reactions_list_for_team_discussion_in_org"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_list_for_team_discussion_in_org"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_team_discussion_in_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_team_discussion_in_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reactions for a team discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Reaction>]
    def reactions_list_for_team_discussion_legacy(team_id, discussion_number, opts = {})
      data, _status_code, _headers = reactions_list_for_team_discussion_legacy_with_http_info(team_id, discussion_number, opts)
      data
    end

    # List reactions for a team discussion (Legacy)
    # **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion&#x60;](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    # @param team_id [Integer] The unique identifier of the team.
    # @param discussion_number [Integer] The number that identifies the discussion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Reaction>, Integer, Hash)>] Array<Reaction> data, response status code and response headers
    def reactions_list_for_team_discussion_legacy_with_http_info(team_id, discussion_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReactionsApi.reactions_list_for_team_discussion_legacy ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling ReactionsApi.reactions_list_for_team_discussion_legacy"
      end
      # verify the required parameter 'discussion_number' is set
      if @api_client.config.client_side_validation && discussion_number.nil?
        fail ArgumentError, "Missing the required parameter 'discussion_number' when calling ReactionsApi.reactions_list_for_team_discussion_legacy"
      end
      allowable_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]
      if @api_client.config.client_side_validation && opts[:'content'] && !allowable_values.include?(opts[:'content'])
        fail ArgumentError, "invalid value for \"content\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/teams/{team_id}/discussions/{discussion_number}/reactions'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s)).sub('{' + 'discussion_number' + '}', CGI.escape(discussion_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Reaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReactionsApi.reactions_list_for_team_discussion_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReactionsApi#reactions_list_for_team_discussion_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
