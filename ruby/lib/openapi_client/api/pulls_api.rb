=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class PullsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check if a pull request has been merged
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pulls_check_if_merged(owner, repo, pull_number, opts = {})
      pulls_check_if_merged_with_http_info(owner, repo, pull_number, opts)
      nil
    end

    # Check if a pull request has been merged
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pulls_check_if_merged_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_check_if_merged ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_check_if_merged"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_check_if_merged"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_check_if_merged"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/merge'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_check_if_merged",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_check_if_merged\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a pull request
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pulls_create_request [PullsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequest]
    def pulls_create(owner, repo, pulls_create_request, opts = {})
      data, _status_code, _headers = pulls_create_with_http_info(owner, repo, pulls_create_request, opts)
      data
    end

    # Create a pull request
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\&quot; for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pulls_create_request [PullsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequest, Integer, Hash)>] PullRequest data, response status code and response headers
    def pulls_create_with_http_info(owner, repo, pulls_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_create ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_create"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_create"
      end
      # verify the required parameter 'pulls_create_request' is set
      if @api_client.config.client_side_validation && pulls_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_create_request' when calling PullsApi.pulls_create"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a reply for a review comment
    # Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param pulls_create_reply_for_review_comment_request [PullsCreateReplyForReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReviewComment]
    def pulls_create_reply_for_review_comment(owner, repo, pull_number, comment_id, pulls_create_reply_for_review_comment_request, opts = {})
      data, _status_code, _headers = pulls_create_reply_for_review_comment_with_http_info(owner, repo, pull_number, comment_id, pulls_create_reply_for_review_comment_request, opts)
      data
    end

    # Create a reply for a review comment
    # Creates a reply to a review comment for a pull request. For the &#x60;comment_id&#x60;, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param pulls_create_reply_for_review_comment_request [PullsCreateReplyForReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReviewComment, Integer, Hash)>] PullRequestReviewComment data, response status code and response headers
    def pulls_create_reply_for_review_comment_with_http_info(owner, repo, pull_number, comment_id, pulls_create_reply_for_review_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_create_reply_for_review_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_create_reply_for_review_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_create_reply_for_review_comment"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_create_reply_for_review_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling PullsApi.pulls_create_reply_for_review_comment"
      end
      # verify the required parameter 'pulls_create_reply_for_review_comment_request' is set
      if @api_client.config.client_side_validation && pulls_create_reply_for_review_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_create_reply_for_review_comment_request' when calling PullsApi.pulls_create_reply_for_review_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_create_reply_for_review_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReviewComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_create_reply_for_review_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_create_reply_for_review_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a review for a pull request
    # This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see \"[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request).\"  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.  The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsCreateReviewRequest] :pulls_create_review_request 
    # @return [PullRequestReview]
    def pulls_create_review(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_create_review_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # Create a review for a pull request
    # This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  Pull request reviews created in the &#x60;PENDING&#x60; state are not submitted and therefore do not include the &#x60;submitted_at&#x60; property in the response. To create a pending review for a pull request, leave the &#x60;event&#x60; parameter blank. For more information about submitting a &#x60;PENDING&#x60; review, see \&quot;[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request).\&quot;  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the &#x60;application/vnd.github.v3.diff&#x60; [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the &#x60;Accept&#x60; header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.  The &#x60;position&#x60; value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsCreateReviewRequest] :pulls_create_review_request 
    # @return [Array<(PullRequestReview, Integer, Hash)>] PullRequestReview data, response status code and response headers
    def pulls_create_review_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_create_review ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_create_review"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_create_review"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_create_review"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pulls_create_review_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReview'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_create_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_create_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a review comment for a pull request
    #  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.  The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.  **Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param pulls_create_review_comment_request [PullsCreateReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReviewComment]
    def pulls_create_review_comment(owner, repo, pull_number, pulls_create_review_comment_request, opts = {})
      data, _status_code, _headers = pulls_create_review_comment_with_http_info(owner, repo, pull_number, pulls_create_review_comment_request, opts)
      data
    end

    # Create a review comment for a pull request
    #  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \&quot;[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\&quot; We recommend creating a review comment using &#x60;line&#x60;, &#x60;side&#x60;, and optionally &#x60;start_line&#x60; and &#x60;start_side&#x60; if your comment applies to more than one line in the pull request diff.  The &#x60;position&#x60; parameter is deprecated. If you use &#x60;position&#x60;, the &#x60;line&#x60;, &#x60;side&#x60;, &#x60;start_line&#x60;, and &#x60;start_side&#x60; parameters are not required.  **Note:** The position value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param pulls_create_review_comment_request [PullsCreateReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReviewComment, Integer, Hash)>] PullRequestReviewComment data, response status code and response headers
    def pulls_create_review_comment_with_http_info(owner, repo, pull_number, pulls_create_review_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_create_review_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_create_review_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_create_review_comment"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_create_review_comment"
      end
      # verify the required parameter 'pulls_create_review_comment_request' is set
      if @api_client.config.client_side_validation && pulls_create_review_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_create_review_comment_request' when calling PullsApi.pulls_create_review_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_create_review_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReviewComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_create_review_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_create_review_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a pending review for a pull request
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReview]
    def pulls_delete_pending_review(owner, repo, pull_number, review_id, opts = {})
      data, _status_code, _headers = pulls_delete_pending_review_with_http_info(owner, repo, pull_number, review_id, opts)
      data
    end

    # Delete a pending review for a pull request
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReview, Integer, Hash)>] PullRequestReview data, response status code and response headers
    def pulls_delete_pending_review_with_http_info(owner, repo, pull_number, review_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_delete_pending_review ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_delete_pending_review"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_delete_pending_review"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_delete_pending_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling PullsApi.pulls_delete_pending_review"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s)).sub('{' + 'review_id' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReview'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_delete_pending_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_delete_pending_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a review comment for a pull request
    # Deletes a review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pulls_delete_review_comment(owner, repo, comment_id, opts = {})
      pulls_delete_review_comment_with_http_info(owner, repo, comment_id, opts)
      nil
    end

    # Delete a review comment for a pull request
    # Deletes a review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pulls_delete_review_comment_with_http_info(owner, repo, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_delete_review_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_delete_review_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_delete_review_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling PullsApi.pulls_delete_review_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_delete_review_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_delete_review_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dismiss a review for a pull request
    # **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param pulls_dismiss_review_request [PullsDismissReviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReview]
    def pulls_dismiss_review(owner, repo, pull_number, review_id, pulls_dismiss_review_request, opts = {})
      data, _status_code, _headers = pulls_dismiss_review_with_http_info(owner, repo, pull_number, review_id, pulls_dismiss_review_request, opts)
      data
    end

    # Dismiss a review for a pull request
    # **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param pulls_dismiss_review_request [PullsDismissReviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReview, Integer, Hash)>] PullRequestReview data, response status code and response headers
    def pulls_dismiss_review_with_http_info(owner, repo, pull_number, review_id, pulls_dismiss_review_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_dismiss_review ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_dismiss_review"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_dismiss_review"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_dismiss_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling PullsApi.pulls_dismiss_review"
      end
      # verify the required parameter 'pulls_dismiss_review_request' is set
      if @api_client.config.client_side_validation && pulls_dismiss_review_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_dismiss_review_request' when calling PullsApi.pulls_dismiss_review"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s)).sub('{' + 'review_id' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_dismiss_review_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReview'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_dismiss_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_dismiss_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a pull request
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".  The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.  The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit. *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch. *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @return [PullRequest]
    def pulls_get(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_get_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # Get a pull request
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the &#x60;mergeable&#x60; key. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.  The value of the &#x60;mergeable&#x60; attribute can be &#x60;true&#x60;, &#x60;false&#x60;, or &#x60;null&#x60;. If the value is &#x60;null&#x60;, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-&#x60;null&#x60; value for the &#x60;mergeable&#x60; attribute in the response. If &#x60;mergeable&#x60; is &#x60;true&#x60;, then &#x60;merge_commit_sha&#x60; will be the SHA of the _test_ merge commit.  The value of the &#x60;merge_commit_sha&#x60; attribute changes depending on the state of the pull request. Before merging a pull request, the &#x60;merge_commit_sha&#x60; attribute holds the SHA of the _test_ merge commit. After merging a pull request, the &#x60;merge_commit_sha&#x60; attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), &#x60;merge_commit_sha&#x60; represents the SHA of the merge commit. *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), &#x60;merge_commit_sha&#x60; represents the SHA of the squashed commit on the base branch. *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), &#x60;merge_commit_sha&#x60; represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequest, Integer, Hash)>] PullRequest data, response status code and response headers
    def pulls_get_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_get ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_get"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_get"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_get"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a review for a pull request
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReview]
    def pulls_get_review(owner, repo, pull_number, review_id, opts = {})
      data, _status_code, _headers = pulls_get_review_with_http_info(owner, repo, pull_number, review_id, opts)
      data
    end

    # Get a review for a pull request
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReview, Integer, Hash)>] PullRequestReview data, response status code and response headers
    def pulls_get_review_with_http_info(owner, repo, pull_number, review_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_get_review ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_get_review"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_get_review"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_get_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling PullsApi.pulls_get_review"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s)).sub('{' + 'review_id' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReview'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_get_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_get_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a review comment for a pull request
    # Provides details for a review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReviewComment]
    def pulls_get_review_comment(owner, repo, comment_id, opts = {})
      data, _status_code, _headers = pulls_get_review_comment_with_http_info(owner, repo, comment_id, opts)
      data
    end

    # Get a review comment for a pull request
    # Provides details for a review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReviewComment, Integer, Hash)>] PullRequestReviewComment data, response status code and response headers
    def pulls_get_review_comment_with_http_info(owner, repo, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_get_review_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_get_review_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_get_review_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling PullsApi.pulls_get_review_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReviewComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_get_review_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_get_review_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pull requests
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (default to 'open')
    # @option opts [String] :head Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;.
    # @option opts [String] :base Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;.
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (default to 'created')
    # @option opts [String] :direction The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<PullRequestSimple>]
    def pulls_list(owner, repo, opts = {})
      data, _status_code, _headers = pulls_list_with_http_info(owner, repo, opts)
      data
    end

    # List pull requests
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (default to 'open')
    # @option opts [String] :head Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;.
    # @option opts [String] :base Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;.
    # @option opts [String] :sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (default to 'created')
    # @option opts [String] :direction The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<PullRequestSimple>, Integer, Hash)>] Array<PullRequestSimple> data, response status code and response headers
    def pulls_list_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list"
      end
      allowable_values = ["open", "closed", "all"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated", "popularity", "long-running"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'head'] = opts[:'head'] if !opts[:'head'].nil?
      query_params[:'base'] = opts[:'base'] if !opts[:'base'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PullRequestSimple>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List comments for a pull request review
    # List comments for a specific pull request review.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<LegacyReviewComment>]
    def pulls_list_comments_for_review(owner, repo, pull_number, review_id, opts = {})
      data, _status_code, _headers = pulls_list_comments_for_review_with_http_info(owner, repo, pull_number, review_id, opts)
      data
    end

    # List comments for a pull request review
    # List comments for a specific pull request review.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<LegacyReviewComment>, Integer, Hash)>] Array<LegacyReviewComment> data, response status code and response headers
    def pulls_list_comments_for_review_with_http_info(owner, repo, pull_number, review_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list_comments_for_review ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list_comments_for_review"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list_comments_for_review"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_list_comments_for_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling PullsApi.pulls_list_comments_for_review"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s)).sub('{' + 'review_id' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LegacyReviewComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list_comments_for_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list_comments_for_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List commits on a pull request
    # Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<Commit>]
    def pulls_list_commits(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_list_commits_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # List commits on a pull request
    # Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<Commit>, Integer, Hash)>] Array<Commit> data, response status code and response headers
    def pulls_list_commits_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list_commits ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list_commits"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list_commits"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_list_commits"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/commits'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Commit>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list_commits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list_commits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pull requests files
    # **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<DiffEntry>]
    def pulls_list_files(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_list_files_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # List pull requests files
    # **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<DiffEntry>, Integer, Hash)>] Array<DiffEntry> data, response status code and response headers
    def pulls_list_files_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list_files ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list_files"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list_files"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_list_files"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/files'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DiffEntry>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all requested reviewers for a pull request
    # Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReviewRequest]
    def pulls_list_requested_reviewers(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_list_requested_reviewers_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # Get all requested reviewers for a pull request
    # Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReviewRequest, Integer, Hash)>] PullRequestReviewRequest data, response status code and response headers
    def pulls_list_requested_reviewers_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list_requested_reviewers ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list_requested_reviewers"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list_requested_reviewers"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_list_requested_reviewers"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReviewRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list_requested_reviewers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list_requested_reviewers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List review comments on a pull request
    # Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The property to sort the results by. &#x60;created&#x60; means when the repository was starred. &#x60;updated&#x60; means when the repository was last pushed to. (default to 'created')
    # @option opts [String] :direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter.
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<PullRequestReviewComment>]
    def pulls_list_review_comments(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_list_review_comments_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # List review comments on a pull request
    # Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The property to sort the results by. &#x60;created&#x60; means when the repository was starred. &#x60;updated&#x60; means when the repository was last pushed to. (default to 'created')
    # @option opts [String] :direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter.
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<PullRequestReviewComment>, Integer, Hash)>] Array<PullRequestReviewComment> data, response status code and response headers
    def pulls_list_review_comments_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list_review_comments ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list_review_comments"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list_review_comments"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_list_review_comments"
      end
      allowable_values = ["created", "updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PullRequestReviewComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list_review_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list_review_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List review comments in a repository
    # Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort 
    # @option opts [String] :direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter.
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<PullRequestReviewComment>]
    def pulls_list_review_comments_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = pulls_list_review_comments_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List review comments in a repository
    # Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort 
    # @option opts [String] :direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter.
    # @option opts [Time] :since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<PullRequestReviewComment>, Integer, Hash)>] Array<PullRequestReviewComment> data, response status code and response headers
    def pulls_list_review_comments_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list_review_comments_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list_review_comments_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list_review_comments_for_repo"
      end
      allowable_values = ["created", "updated", "created_at"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/comments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PullRequestReviewComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list_review_comments_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list_review_comments_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reviews for a pull request
    # The list of reviews returns in chronological order.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<PullRequestReview>]
    def pulls_list_reviews(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_list_reviews_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # List reviews for a pull request
    # The list of reviews returns in chronological order.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(Array<PullRequestReview>, Integer, Hash)>] Array<PullRequestReview> data, response status code and response headers
    def pulls_list_reviews_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_list_reviews ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_list_reviews"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_list_reviews"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_list_reviews"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PullRequestReview>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_list_reviews",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_list_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge a pull request
    # This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsMergeRequest] :pulls_merge_request 
    # @return [PullRequestMergeResult]
    def pulls_merge(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_merge_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # Merge a pull request
    # This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsMergeRequest] :pulls_merge_request 
    # @return [Array<(PullRequestMergeResult, Integer, Hash)>] PullRequestMergeResult data, response status code and response headers
    def pulls_merge_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_merge ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_merge"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_merge"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_merge"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/merge'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pulls_merge_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestMergeResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_merge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_merge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove requested reviewers from a pull request
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param pulls_remove_requested_reviewers_request [PullsRemoveRequestedReviewersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequestSimple]
    def pulls_remove_requested_reviewers(owner, repo, pull_number, pulls_remove_requested_reviewers_request, opts = {})
      data, _status_code, _headers = pulls_remove_requested_reviewers_with_http_info(owner, repo, pull_number, pulls_remove_requested_reviewers_request, opts)
      data
    end

    # Remove requested reviewers from a pull request
    # 
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param pulls_remove_requested_reviewers_request [PullsRemoveRequestedReviewersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestSimple, Integer, Hash)>] PullRequestSimple data, response status code and response headers
    def pulls_remove_requested_reviewers_with_http_info(owner, repo, pull_number, pulls_remove_requested_reviewers_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_remove_requested_reviewers ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_remove_requested_reviewers"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_remove_requested_reviewers"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_remove_requested_reviewers"
      end
      # verify the required parameter 'pulls_remove_requested_reviewers_request' is set
      if @api_client.config.client_side_validation && pulls_remove_requested_reviewers_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_remove_requested_reviewers_request' when calling PullsApi.pulls_remove_requested_reviewers"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_remove_requested_reviewers_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestSimple'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_remove_requested_reviewers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_remove_requested_reviewers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request reviewers for a pull request
    # This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsRequestReviewersRequest] :pulls_request_reviewers_request 
    # @return [PullRequestSimple]
    def pulls_request_reviewers(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_request_reviewers_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # Request reviewers for a pull request
    # This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsRequestReviewersRequest] :pulls_request_reviewers_request 
    # @return [Array<(PullRequestSimple, Integer, Hash)>] PullRequestSimple data, response status code and response headers
    def pulls_request_reviewers_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_request_reviewers ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_request_reviewers"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_request_reviewers"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_request_reviewers"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pulls_request_reviewers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestSimple'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_request_reviewers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_request_reviewers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submit a review for a pull request
    # Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see \"[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request).\"
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param pulls_submit_review_request [PullsSubmitReviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReview]
    def pulls_submit_review(owner, repo, pull_number, review_id, pulls_submit_review_request, opts = {})
      data, _status_code, _headers = pulls_submit_review_with_http_info(owner, repo, pull_number, review_id, pulls_submit_review_request, opts)
      data
    end

    # Submit a review for a pull request
    # Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see \&quot;[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request).\&quot;
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param pulls_submit_review_request [PullsSubmitReviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReview, Integer, Hash)>] PullRequestReview data, response status code and response headers
    def pulls_submit_review_with_http_info(owner, repo, pull_number, review_id, pulls_submit_review_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_submit_review ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_submit_review"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_submit_review"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_submit_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling PullsApi.pulls_submit_review"
      end
      # verify the required parameter 'pulls_submit_review_request' is set
      if @api_client.config.client_side_validation && pulls_submit_review_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_submit_review_request' when calling PullsApi.pulls_submit_review"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s)).sub('{' + 'review_id' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_submit_review_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReview'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_submit_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_submit_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a pull request
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsUpdateRequest] :pulls_update_request 
    # @return [PullRequest]
    def pulls_update(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_update_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # Update a pull request
    # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsUpdateRequest] :pulls_update_request 
    # @return [Array<(PullRequest, Integer, Hash)>] PullRequest data, response status code and response headers
    def pulls_update_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_update ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_update"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_update"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_update"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pulls_update_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a pull request branch
    # Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsUpdateBranchRequest] :pulls_update_branch_request 
    # @return [ActivityMarkRepoNotificationsAsRead202Response]
    def pulls_update_branch(owner, repo, pull_number, opts = {})
      data, _status_code, _headers = pulls_update_branch_with_http_info(owner, repo, pull_number, opts)
      data
    end

    # Update a pull request branch
    # Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param [Hash] opts the optional parameters
    # @option opts [PullsUpdateBranchRequest] :pulls_update_branch_request 
    # @return [Array<(ActivityMarkRepoNotificationsAsRead202Response, Integer, Hash)>] ActivityMarkRepoNotificationsAsRead202Response data, response status code and response headers
    def pulls_update_branch_with_http_info(owner, repo, pull_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_update_branch ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_update_branch"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_update_branch"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_update_branch"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pulls_update_branch_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ActivityMarkRepoNotificationsAsRead202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_update_branch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_update_branch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a review for a pull request
    # Update the review summary comment with new text.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param pulls_update_review_request [PullsUpdateReviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReview]
    def pulls_update_review(owner, repo, pull_number, review_id, pulls_update_review_request, opts = {})
      data, _status_code, _headers = pulls_update_review_with_http_info(owner, repo, pull_number, review_id, pulls_update_review_request, opts)
      data
    end

    # Update a review for a pull request
    # Update the review summary comment with new text.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param pull_number [Integer] The number that identifies the pull request.
    # @param review_id [Integer] The unique identifier of the review.
    # @param pulls_update_review_request [PullsUpdateReviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReview, Integer, Hash)>] PullRequestReview data, response status code and response headers
    def pulls_update_review_with_http_info(owner, repo, pull_number, review_id, pulls_update_review_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_update_review ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_update_review"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_update_review"
      end
      # verify the required parameter 'pull_number' is set
      if @api_client.config.client_side_validation && pull_number.nil?
        fail ArgumentError, "Missing the required parameter 'pull_number' when calling PullsApi.pulls_update_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling PullsApi.pulls_update_review"
      end
      # verify the required parameter 'pulls_update_review_request' is set
      if @api_client.config.client_side_validation && pulls_update_review_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_update_review_request' when calling PullsApi.pulls_update_review"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'pull_number' + '}', CGI.escape(pull_number.to_s)).sub('{' + 'review_id' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_update_review_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReview'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_update_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_update_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a review comment for a pull request
    # Enables you to edit a review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param pulls_update_review_comment_request [PullsUpdateReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PullRequestReviewComment]
    def pulls_update_review_comment(owner, repo, comment_id, pulls_update_review_comment_request, opts = {})
      data, _status_code, _headers = pulls_update_review_comment_with_http_info(owner, repo, comment_id, pulls_update_review_comment_request, opts)
      data
    end

    # Update a review comment for a pull request
    # Enables you to edit a review comment.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository. The name is not case sensitive.
    # @param comment_id [Integer] The unique identifier of the comment.
    # @param pulls_update_review_comment_request [PullsUpdateReviewCommentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullRequestReviewComment, Integer, Hash)>] PullRequestReviewComment data, response status code and response headers
    def pulls_update_review_comment_with_http_info(owner, repo, comment_id, pulls_update_review_comment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PullsApi.pulls_update_review_comment ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PullsApi.pulls_update_review_comment"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PullsApi.pulls_update_review_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling PullsApi.pulls_update_review_comment"
      end
      # verify the required parameter 'pulls_update_review_comment_request' is set
      if @api_client.config.client_side_validation && pulls_update_review_comment_request.nil?
        fail ArgumentError, "Missing the required parameter 'pulls_update_review_comment_request' when calling PullsApi.pulls_update_review_comment"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pulls_update_review_comment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestReviewComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PullsApi.pulls_update_review_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PullsApi#pulls_update_review_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
