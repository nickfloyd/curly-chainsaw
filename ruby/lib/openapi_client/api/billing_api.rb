=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class BillingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get GitHub Actions billing for an enterprise
    # Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  The authenticated user must be an enterprise admin.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetGithubActionsBillingGhe200Response]
    def billing_get_github_actions_billing_ghe(enterprise, opts = {})
      data, _status_code, _headers = billing_get_github_actions_billing_ghe_with_http_info(enterprise, opts)
      data
    end

    # Get GitHub Actions billing for an enterprise
    # Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  The authenticated user must be an enterprise admin.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetGithubActionsBillingGhe200Response, Integer, Hash)>] BillingGetGithubActionsBillingGhe200Response data, response status code and response headers
    def billing_get_github_actions_billing_ghe_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_actions_billing_ghe ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling BillingApi.billing_get_github_actions_billing_ghe"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/settings/billing/actions'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubActionsBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_actions_billing_ghe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_actions_billing_ghe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions billing for an organization
    # Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Access tokens must have the `repo` or `admin:org` scope.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetGithubActionsBillingGhe200Response]
    def billing_get_github_actions_billing_org(org, opts = {})
      data, _status_code, _headers = billing_get_github_actions_billing_org_with_http_info(org, opts)
      data
    end

    # Get GitHub Actions billing for an organization
    # Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Access tokens must have the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetGithubActionsBillingGhe200Response, Integer, Hash)>] BillingGetGithubActionsBillingGhe200Response data, response status code and response headers
    def billing_get_github_actions_billing_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_actions_billing_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling BillingApi.billing_get_github_actions_billing_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/settings/billing/actions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubActionsBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_actions_billing_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_actions_billing_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions billing for a user
    # Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Access tokens must have the `user` scope.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetGithubActionsBillingGhe200Response]
    def billing_get_github_actions_billing_user(username, opts = {})
      data, _status_code, _headers = billing_get_github_actions_billing_user_with_http_info(username, opts)
      data
    end

    # Get GitHub Actions billing for a user
    # Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Access tokens must have the &#x60;user&#x60; scope.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetGithubActionsBillingGhe200Response, Integer, Hash)>] BillingGetGithubActionsBillingGhe200Response data, response status code and response headers
    def billing_get_github_actions_billing_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_actions_billing_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling BillingApi.billing_get_github_actions_billing_user"
      end
      # resource path
      local_var_path = '/users/{username}/settings/billing/actions'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubActionsBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_actions_billing_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_actions_billing_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Advanced Security active committers for an enterprise
    # Gets the GitHub Advanced Security active committers for an enterprise per repository.  Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.  The total number of repositories with committer information is tracked by the `total_count` field.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [BillingGetGithubAdvancedSecurityBillingGhe200Response]
    def billing_get_github_advanced_security_billing_ghe(enterprise, opts = {})
      data, _status_code, _headers = billing_get_github_advanced_security_billing_ghe_with_http_info(enterprise, opts)
      data
    end

    # Get GitHub Advanced Security active committers for an enterprise
    # Gets the GitHub Advanced Security active committers for an enterprise per repository.  Each distinct user login across all repositories is counted as a single Advanced Security seat, so the &#x60;total_advanced_security_committers&#x60; is not the sum of active_users for each repository.  The total number of repositories with committer information is tracked by the &#x60;total_count&#x60; field.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(BillingGetGithubAdvancedSecurityBillingGhe200Response, Integer, Hash)>] BillingGetGithubAdvancedSecurityBillingGhe200Response data, response status code and response headers
    def billing_get_github_advanced_security_billing_ghe_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_advanced_security_billing_ghe ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling BillingApi.billing_get_github_advanced_security_billing_ghe"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/settings/billing/advanced-security'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubAdvancedSecurityBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_advanced_security_billing_ghe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_advanced_security_billing_ghe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Advanced Security active committers for an organization
    # Gets the GitHub Advanced Security active committers for an organization per repository.  Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.  If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.  The total number of repositories with committer information is tracked by the `total_count` field.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [BillingGetGithubAdvancedSecurityBillingGhe200Response]
    def billing_get_github_advanced_security_billing_org(org, opts = {})
      data, _status_code, _headers = billing_get_github_advanced_security_billing_org_with_http_info(org, opts)
      data
    end

    # Get GitHub Advanced Security active committers for an organization
    # Gets the GitHub Advanced Security active committers for an organization per repository.  Each distinct user login across all repositories is counted as a single Advanced Security seat, so the &#x60;total_advanced_security_committers&#x60; is not the sum of advanced_security_committers for each repository.  If this organization defers to an enterprise for billing, the &#x60;total_advanced_security_committers&#x60; returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.  The total number of repositories with committer information is tracked by the &#x60;total_count&#x60; field.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @option opts [Integer] :page Page number of the results to fetch. (default to 1)
    # @return [Array<(BillingGetGithubAdvancedSecurityBillingGhe200Response, Integer, Hash)>] BillingGetGithubAdvancedSecurityBillingGhe200Response data, response status code and response headers
    def billing_get_github_advanced_security_billing_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_advanced_security_billing_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling BillingApi.billing_get_github_advanced_security_billing_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/settings/billing/advanced-security'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubAdvancedSecurityBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_advanced_security_billing_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_advanced_security_billing_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Packages billing for an enterprise
    # Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  The authenticated user must be an enterprise admin.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetGithubPackagesBillingGhe200Response]
    def billing_get_github_packages_billing_ghe(enterprise, opts = {})
      data, _status_code, _headers = billing_get_github_packages_billing_ghe_with_http_info(enterprise, opts)
      data
    end

    # Get GitHub Packages billing for an enterprise
    # Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \&quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\&quot;  The authenticated user must be an enterprise admin.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetGithubPackagesBillingGhe200Response, Integer, Hash)>] BillingGetGithubPackagesBillingGhe200Response data, response status code and response headers
    def billing_get_github_packages_billing_ghe_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_packages_billing_ghe ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling BillingApi.billing_get_github_packages_billing_ghe"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/settings/billing/packages'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubPackagesBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_packages_billing_ghe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_packages_billing_ghe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Packages billing for an organization
    # Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `repo` or `admin:org` scope.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetGithubPackagesBillingGhe200Response]
    def billing_get_github_packages_billing_org(org, opts = {})
      data, _status_code, _headers = billing_get_github_packages_billing_org_with_http_info(org, opts)
      data
    end

    # Get GitHub Packages billing for an organization
    # Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \&quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\&quot;  Access tokens must have the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetGithubPackagesBillingGhe200Response, Integer, Hash)>] BillingGetGithubPackagesBillingGhe200Response data, response status code and response headers
    def billing_get_github_packages_billing_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_packages_billing_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling BillingApi.billing_get_github_packages_billing_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/settings/billing/packages'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubPackagesBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_packages_billing_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_packages_billing_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Packages billing for a user
    # Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `user` scope.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetGithubPackagesBillingGhe200Response]
    def billing_get_github_packages_billing_user(username, opts = {})
      data, _status_code, _headers = billing_get_github_packages_billing_user_with_http_info(username, opts)
      data
    end

    # Get GitHub Packages billing for a user
    # Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \&quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\&quot;  Access tokens must have the &#x60;user&#x60; scope.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetGithubPackagesBillingGhe200Response, Integer, Hash)>] BillingGetGithubPackagesBillingGhe200Response data, response status code and response headers
    def billing_get_github_packages_billing_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_github_packages_billing_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling BillingApi.billing_get_github_packages_billing_user"
      end
      # resource path
      local_var_path = '/users/{username}/settings/billing/packages'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetGithubPackagesBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_github_packages_billing_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_github_packages_billing_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get shared storage billing for an enterprise
    # Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  The authenticated user must be an enterprise admin.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetSharedStorageBillingGhe200Response]
    def billing_get_shared_storage_billing_ghe(enterprise, opts = {})
      data, _status_code, _headers = billing_get_shared_storage_billing_ghe_with_http_info(enterprise, opts)
      data
    end

    # Get shared storage billing for an enterprise
    # Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \&quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\&quot;  The authenticated user must be an enterprise admin.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetSharedStorageBillingGhe200Response, Integer, Hash)>] BillingGetSharedStorageBillingGhe200Response data, response status code and response headers
    def billing_get_shared_storage_billing_ghe_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_shared_storage_billing_ghe ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling BillingApi.billing_get_shared_storage_billing_ghe"
      end
      # resource path
      local_var_path = '/enterprises/{enterprise}/settings/billing/shared-storage'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetSharedStorageBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_shared_storage_billing_ghe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_shared_storage_billing_ghe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get shared storage billing for an organization
    # Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `repo` or `admin:org` scope.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetSharedStorageBillingGhe200Response]
    def billing_get_shared_storage_billing_org(org, opts = {})
      data, _status_code, _headers = billing_get_shared_storage_billing_org_with_http_info(org, opts)
      data
    end

    # Get shared storage billing for an organization
    # Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \&quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\&quot;  Access tokens must have the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetSharedStorageBillingGhe200Response, Integer, Hash)>] BillingGetSharedStorageBillingGhe200Response data, response status code and response headers
    def billing_get_shared_storage_billing_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_shared_storage_billing_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling BillingApi.billing_get_shared_storage_billing_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/settings/billing/shared-storage'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetSharedStorageBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_shared_storage_billing_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_shared_storage_billing_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get shared storage billing for a user
    # Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `user` scope.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [BillingGetSharedStorageBillingGhe200Response]
    def billing_get_shared_storage_billing_user(username, opts = {})
      data, _status_code, _headers = billing_get_shared_storage_billing_user_with_http_info(username, opts)
      data
    end

    # Get shared storage billing for a user
    # Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \&quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\&quot;  Access tokens must have the &#x60;user&#x60; scope.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGetSharedStorageBillingGhe200Response, Integer, Hash)>] BillingGetSharedStorageBillingGhe200Response data, response status code and response headers
    def billing_get_shared_storage_billing_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_get_shared_storage_billing_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling BillingApi.billing_get_shared_storage_billing_user"
      end
      # resource path
      local_var_path = '/users/{username}/settings/billing/shared-storage'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGetSharedStorageBillingGhe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BillingApi.billing_get_shared_storage_billing_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_get_shared_storage_billing_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
