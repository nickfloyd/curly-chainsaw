/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { GitHubApp1 } from './gitHubApp1';
import { Issue1 } from './issue1';
import { IssueEventDismissedReview } from './issueEventDismissedReview';
import { IssueEventLabel } from './issueEventLabel';
import { IssueEventMilestone } from './issueEventMilestone';
import { IssueEventProjectCard } from './issueEventProjectCard';
import { IssueEventRename } from './issueEventRename';
import { SimpleUser } from './simpleUser';
import { Team } from './team';

/**
* Issue Event
*/
export class IssueEvent {
    'id': number;
    'nodeId': string;
    'url': string;
    'actor': SimpleUser | null;
    'event': string;
    'commitId': string | null;
    'commitUrl': string | null;
    'createdAt': Date;
    'issue'?: Issue1 | null;
    'label'?: IssueEventLabel;
    'assignee'?: SimpleUser | null;
    'assigner'?: SimpleUser | null;
    'reviewRequester'?: SimpleUser | null;
    'requestedReviewer'?: SimpleUser | null;
    'requestedTeam'?: Team;
    'dismissedReview'?: IssueEventDismissedReview;
    'milestone'?: IssueEventMilestone;
    'projectCard'?: IssueEventProjectCard;
    'rename'?: IssueEventRename;
    /**
    * How the author is associated with the repository.
    */
    'authorAssociation'?: IssueEvent.AuthorAssociationEnum;
    'lockReason'?: string | null;
    'performedViaGithubApp'?: GitHubApp1 | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "nodeId",
            "baseName": "node_id",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "actor",
            "baseName": "actor",
            "type": "SimpleUser"
        },
        {
            "name": "event",
            "baseName": "event",
            "type": "string"
        },
        {
            "name": "commitId",
            "baseName": "commit_id",
            "type": "string"
        },
        {
            "name": "commitUrl",
            "baseName": "commit_url",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "issue",
            "baseName": "issue",
            "type": "Issue1"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "IssueEventLabel"
        },
        {
            "name": "assignee",
            "baseName": "assignee",
            "type": "SimpleUser"
        },
        {
            "name": "assigner",
            "baseName": "assigner",
            "type": "SimpleUser"
        },
        {
            "name": "reviewRequester",
            "baseName": "review_requester",
            "type": "SimpleUser"
        },
        {
            "name": "requestedReviewer",
            "baseName": "requested_reviewer",
            "type": "SimpleUser"
        },
        {
            "name": "requestedTeam",
            "baseName": "requested_team",
            "type": "Team"
        },
        {
            "name": "dismissedReview",
            "baseName": "dismissed_review",
            "type": "IssueEventDismissedReview"
        },
        {
            "name": "milestone",
            "baseName": "milestone",
            "type": "IssueEventMilestone"
        },
        {
            "name": "projectCard",
            "baseName": "project_card",
            "type": "IssueEventProjectCard"
        },
        {
            "name": "rename",
            "baseName": "rename",
            "type": "IssueEventRename"
        },
        {
            "name": "authorAssociation",
            "baseName": "author_association",
            "type": "IssueEvent.AuthorAssociationEnum"
        },
        {
            "name": "lockReason",
            "baseName": "lock_reason",
            "type": "string"
        },
        {
            "name": "performedViaGithubApp",
            "baseName": "performed_via_github_app",
            "type": "GitHubApp1"
        }    ];

    static getAttributeTypeMap() {
        return IssueEvent.attributeTypeMap;
    }
}

export namespace IssueEvent {
    export enum AuthorAssociationEnum {
        Collaborator = <any> 'COLLABORATOR',
        Contributor = <any> 'CONTRIBUTOR',
        FirstTimer = <any> 'FIRST_TIMER',
        FirstTimeContributor = <any> 'FIRST_TIME_CONTRIBUTOR',
        Mannequin = <any> 'MANNEQUIN',
        Member = <any> 'MEMBER',
        None = <any> 'NONE',
        Owner = <any> 'OWNER'
    }
}
