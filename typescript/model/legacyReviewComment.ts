/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { LegacyReviewCommentLinks } from './legacyReviewCommentLinks';
import { ReactionRollup } from './reactionRollup';
import { SimpleUser } from './simpleUser';

/**
* Legacy Review Comment
*/
export class LegacyReviewComment {
    'url': string;
    'pullRequestReviewId': number | null;
    'id': number;
    'nodeId': string;
    'diffHunk': string;
    'path': string;
    'position': number | null;
    'originalPosition': number;
    'commitId': string;
    'originalCommitId': string;
    'inReplyToId'?: number;
    'user': SimpleUser | null;
    'body': string;
    'createdAt': Date;
    'updatedAt': Date;
    'htmlUrl': string;
    'pullRequestUrl': string;
    /**
    * How the author is associated with the repository.
    */
    'authorAssociation': LegacyReviewComment.AuthorAssociationEnum;
    'links': LegacyReviewCommentLinks;
    'bodyText'?: string;
    'bodyHtml'?: string;
    'reactions'?: ReactionRollup;
    /**
    * The side of the first line of the range for a multi-line comment.
    */
    'side'?: LegacyReviewComment.SideEnum = LegacyReviewComment.SideEnum.Right;
    /**
    * The side of the first line of the range for a multi-line comment.
    */
    'startSide'?: LegacyReviewComment.StartSideEnum = LegacyReviewComment.StartSideEnum.Right;
    /**
    * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    */
    'line'?: number;
    /**
    * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
    */
    'originalLine'?: number;
    /**
    * The first line of the range for a multi-line comment.
    */
    'startLine'?: number | null;
    /**
    * The original first line of the range for a multi-line comment.
    */
    'originalStartLine'?: number | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "pullRequestReviewId",
            "baseName": "pull_request_review_id",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "nodeId",
            "baseName": "node_id",
            "type": "string"
        },
        {
            "name": "diffHunk",
            "baseName": "diff_hunk",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "originalPosition",
            "baseName": "original_position",
            "type": "number"
        },
        {
            "name": "commitId",
            "baseName": "commit_id",
            "type": "string"
        },
        {
            "name": "originalCommitId",
            "baseName": "original_commit_id",
            "type": "string"
        },
        {
            "name": "inReplyToId",
            "baseName": "in_reply_to_id",
            "type": "number"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "SimpleUser"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "htmlUrl",
            "baseName": "html_url",
            "type": "string"
        },
        {
            "name": "pullRequestUrl",
            "baseName": "pull_request_url",
            "type": "string"
        },
        {
            "name": "authorAssociation",
            "baseName": "author_association",
            "type": "LegacyReviewComment.AuthorAssociationEnum"
        },
        {
            "name": "links",
            "baseName": "_links",
            "type": "LegacyReviewCommentLinks"
        },
        {
            "name": "bodyText",
            "baseName": "body_text",
            "type": "string"
        },
        {
            "name": "bodyHtml",
            "baseName": "body_html",
            "type": "string"
        },
        {
            "name": "reactions",
            "baseName": "reactions",
            "type": "ReactionRollup"
        },
        {
            "name": "side",
            "baseName": "side",
            "type": "LegacyReviewComment.SideEnum"
        },
        {
            "name": "startSide",
            "baseName": "start_side",
            "type": "LegacyReviewComment.StartSideEnum"
        },
        {
            "name": "line",
            "baseName": "line",
            "type": "number"
        },
        {
            "name": "originalLine",
            "baseName": "original_line",
            "type": "number"
        },
        {
            "name": "startLine",
            "baseName": "start_line",
            "type": "number"
        },
        {
            "name": "originalStartLine",
            "baseName": "original_start_line",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return LegacyReviewComment.attributeTypeMap;
    }
}

export namespace LegacyReviewComment {
    export enum AuthorAssociationEnum {
        Collaborator = <any> 'COLLABORATOR',
        Contributor = <any> 'CONTRIBUTOR',
        FirstTimer = <any> 'FIRST_TIMER',
        FirstTimeContributor = <any> 'FIRST_TIME_CONTRIBUTOR',
        Mannequin = <any> 'MANNEQUIN',
        Member = <any> 'MEMBER',
        None = <any> 'NONE',
        Owner = <any> 'OWNER'
    }
    export enum SideEnum {
        Left = <any> 'LEFT',
        Right = <any> 'RIGHT'
    }
    export enum StartSideEnum {
        Left = <any> 'LEFT',
        Right = <any> 'RIGHT'
    }
}
