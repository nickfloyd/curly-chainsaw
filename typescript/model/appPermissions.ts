/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* The permissions granted to the user-to-server access token.
*/
export class AppPermissions {
    /**
    * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
    */
    'actions'?: AppPermissions.ActionsEnum;
    /**
    * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
    */
    'administration'?: AppPermissions.AdministrationEnum;
    /**
    * The level of permission to grant the access token for checks on code.
    */
    'checks'?: AppPermissions.ChecksEnum;
    /**
    * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
    */
    'contents'?: AppPermissions.ContentsEnum;
    /**
    * The level of permission to grant the access token for deployments and deployment statuses.
    */
    'deployments'?: AppPermissions.DeploymentsEnum;
    /**
    * The level of permission to grant the access token for managing repository environments.
    */
    'environments'?: AppPermissions.EnvironmentsEnum;
    /**
    * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
    */
    'issues'?: AppPermissions.IssuesEnum;
    /**
    * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
    */
    'metadata'?: AppPermissions.MetadataEnum;
    /**
    * The level of permission to grant the access token for packages published to GitHub Packages.
    */
    'packages'?: AppPermissions.PackagesEnum;
    /**
    * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
    */
    'pages'?: AppPermissions.PagesEnum;
    /**
    * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
    */
    'pullRequests'?: AppPermissions.PullRequestsEnum;
    /**
    * The level of permission to grant the access token to manage the post-receive hooks for a repository.
    */
    'repositoryHooks'?: AppPermissions.RepositoryHooksEnum;
    /**
    * The level of permission to grant the access token to manage repository projects, columns, and cards.
    */
    'repositoryProjects'?: AppPermissions.RepositoryProjectsEnum;
    /**
    * The level of permission to grant the access token to view and manage secret scanning alerts.
    */
    'secretScanningAlerts'?: AppPermissions.SecretScanningAlertsEnum;
    /**
    * The level of permission to grant the access token to manage repository secrets.
    */
    'secrets'?: AppPermissions.SecretsEnum;
    /**
    * The level of permission to grant the access token to view and manage security events like code scanning alerts.
    */
    'securityEvents'?: AppPermissions.SecurityEventsEnum;
    /**
    * The level of permission to grant the access token to manage just a single file.
    */
    'singleFile'?: AppPermissions.SingleFileEnum;
    /**
    * The level of permission to grant the access token for commit statuses.
    */
    'statuses'?: AppPermissions.StatusesEnum;
    /**
    * The level of permission to grant the access token to manage Dependabot alerts.
    */
    'vulnerabilityAlerts'?: AppPermissions.VulnerabilityAlertsEnum;
    /**
    * The level of permission to grant the access token to update GitHub Actions workflow files.
    */
    'workflows'?: AppPermissions.WorkflowsEnum;
    /**
    * The level of permission to grant the access token for organization teams and members.
    */
    'members'?: AppPermissions.MembersEnum;
    /**
    * The level of permission to grant the access token to manage access to an organization.
    */
    'organizationAdministration'?: AppPermissions.OrganizationAdministrationEnum;
    /**
    * The level of permission to grant the access token to manage the post-receive hooks for an organization.
    */
    'organizationHooks'?: AppPermissions.OrganizationHooksEnum;
    /**
    * The level of permission to grant the access token for viewing an organization\'s plan.
    */
    'organizationPlan'?: AppPermissions.OrganizationPlanEnum;
    /**
    * The level of permission to grant the access token to manage organization projects and projects beta (where available).
    */
    'organizationProjects'?: AppPermissions.OrganizationProjectsEnum;
    /**
    * The level of permission to grant the access token for organization packages published to GitHub Packages.
    */
    'organizationPackages'?: AppPermissions.OrganizationPackagesEnum;
    /**
    * The level of permission to grant the access token to manage organization secrets.
    */
    'organizationSecrets'?: AppPermissions.OrganizationSecretsEnum;
    /**
    * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
    */
    'organizationSelfHostedRunners'?: AppPermissions.OrganizationSelfHostedRunnersEnum;
    /**
    * The level of permission to grant the access token to view and manage users blocked by the organization.
    */
    'organizationUserBlocking'?: AppPermissions.OrganizationUserBlockingEnum;
    /**
    * The level of permission to grant the access token to manage team discussions and related comments.
    */
    'teamDiscussions'?: AppPermissions.TeamDiscussionsEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "actions",
            "baseName": "actions",
            "type": "AppPermissions.ActionsEnum"
        },
        {
            "name": "administration",
            "baseName": "administration",
            "type": "AppPermissions.AdministrationEnum"
        },
        {
            "name": "checks",
            "baseName": "checks",
            "type": "AppPermissions.ChecksEnum"
        },
        {
            "name": "contents",
            "baseName": "contents",
            "type": "AppPermissions.ContentsEnum"
        },
        {
            "name": "deployments",
            "baseName": "deployments",
            "type": "AppPermissions.DeploymentsEnum"
        },
        {
            "name": "environments",
            "baseName": "environments",
            "type": "AppPermissions.EnvironmentsEnum"
        },
        {
            "name": "issues",
            "baseName": "issues",
            "type": "AppPermissions.IssuesEnum"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "AppPermissions.MetadataEnum"
        },
        {
            "name": "packages",
            "baseName": "packages",
            "type": "AppPermissions.PackagesEnum"
        },
        {
            "name": "pages",
            "baseName": "pages",
            "type": "AppPermissions.PagesEnum"
        },
        {
            "name": "pullRequests",
            "baseName": "pull_requests",
            "type": "AppPermissions.PullRequestsEnum"
        },
        {
            "name": "repositoryHooks",
            "baseName": "repository_hooks",
            "type": "AppPermissions.RepositoryHooksEnum"
        },
        {
            "name": "repositoryProjects",
            "baseName": "repository_projects",
            "type": "AppPermissions.RepositoryProjectsEnum"
        },
        {
            "name": "secretScanningAlerts",
            "baseName": "secret_scanning_alerts",
            "type": "AppPermissions.SecretScanningAlertsEnum"
        },
        {
            "name": "secrets",
            "baseName": "secrets",
            "type": "AppPermissions.SecretsEnum"
        },
        {
            "name": "securityEvents",
            "baseName": "security_events",
            "type": "AppPermissions.SecurityEventsEnum"
        },
        {
            "name": "singleFile",
            "baseName": "single_file",
            "type": "AppPermissions.SingleFileEnum"
        },
        {
            "name": "statuses",
            "baseName": "statuses",
            "type": "AppPermissions.StatusesEnum"
        },
        {
            "name": "vulnerabilityAlerts",
            "baseName": "vulnerability_alerts",
            "type": "AppPermissions.VulnerabilityAlertsEnum"
        },
        {
            "name": "workflows",
            "baseName": "workflows",
            "type": "AppPermissions.WorkflowsEnum"
        },
        {
            "name": "members",
            "baseName": "members",
            "type": "AppPermissions.MembersEnum"
        },
        {
            "name": "organizationAdministration",
            "baseName": "organization_administration",
            "type": "AppPermissions.OrganizationAdministrationEnum"
        },
        {
            "name": "organizationHooks",
            "baseName": "organization_hooks",
            "type": "AppPermissions.OrganizationHooksEnum"
        },
        {
            "name": "organizationPlan",
            "baseName": "organization_plan",
            "type": "AppPermissions.OrganizationPlanEnum"
        },
        {
            "name": "organizationProjects",
            "baseName": "organization_projects",
            "type": "AppPermissions.OrganizationProjectsEnum"
        },
        {
            "name": "organizationPackages",
            "baseName": "organization_packages",
            "type": "AppPermissions.OrganizationPackagesEnum"
        },
        {
            "name": "organizationSecrets",
            "baseName": "organization_secrets",
            "type": "AppPermissions.OrganizationSecretsEnum"
        },
        {
            "name": "organizationSelfHostedRunners",
            "baseName": "organization_self_hosted_runners",
            "type": "AppPermissions.OrganizationSelfHostedRunnersEnum"
        },
        {
            "name": "organizationUserBlocking",
            "baseName": "organization_user_blocking",
            "type": "AppPermissions.OrganizationUserBlockingEnum"
        },
        {
            "name": "teamDiscussions",
            "baseName": "team_discussions",
            "type": "AppPermissions.TeamDiscussionsEnum"
        }    ];

    static getAttributeTypeMap() {
        return AppPermissions.attributeTypeMap;
    }
}

export namespace AppPermissions {
    export enum ActionsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum AdministrationEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum ChecksEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum ContentsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum DeploymentsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum EnvironmentsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum IssuesEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum MetadataEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum PackagesEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum PagesEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum PullRequestsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum RepositoryHooksEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum RepositoryProjectsEnum {
        Read = <any> 'read',
        Write = <any> 'write',
        Admin = <any> 'admin'
    }
    export enum SecretScanningAlertsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum SecretsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum SecurityEventsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum SingleFileEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum StatusesEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum VulnerabilityAlertsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum WorkflowsEnum {
        Write = <any> 'write'
    }
    export enum MembersEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum OrganizationAdministrationEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum OrganizationHooksEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum OrganizationPlanEnum {
        Read = <any> 'read'
    }
    export enum OrganizationProjectsEnum {
        Read = <any> 'read',
        Write = <any> 'write',
        Admin = <any> 'admin'
    }
    export enum OrganizationPackagesEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum OrganizationSecretsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum OrganizationSelfHostedRunnersEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum OrganizationUserBlockingEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
    export enum TeamDiscussionsEnum {
        Read = <any> 'read',
        Write = <any> 'write'
    }
}
