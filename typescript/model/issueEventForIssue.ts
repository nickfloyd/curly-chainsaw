/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AddedToProjectIssueEvent } from './addedToProjectIssueEvent';
import { AddedToProjectIssueEventProjectCard } from './addedToProjectIssueEventProjectCard';
import { AssignedIssueEvent } from './assignedIssueEvent';
import { ConvertedNoteToIssueIssueEvent } from './convertedNoteToIssueIssueEvent';
import { DemilestonedIssueEvent } from './demilestonedIssueEvent';
import { GitHubApp } from './gitHubApp';
import { LabeledIssueEvent } from './labeledIssueEvent';
import { LabeledIssueEventLabel } from './labeledIssueEventLabel';
import { LockedIssueEvent } from './lockedIssueEvent';
import { MilestonedIssueEvent } from './milestonedIssueEvent';
import { MilestonedIssueEventMilestone } from './milestonedIssueEventMilestone';
import { MovedColumnInProjectIssueEvent } from './movedColumnInProjectIssueEvent';
import { RemovedFromProjectIssueEvent } from './removedFromProjectIssueEvent';
import { RenamedIssueEvent } from './renamedIssueEvent';
import { RenamedIssueEventRename } from './renamedIssueEventRename';
import { ReviewDismissedIssueEvent } from './reviewDismissedIssueEvent';
import { ReviewDismissedIssueEventDismissedReview } from './reviewDismissedIssueEventDismissedReview';
import { ReviewRequestRemovedIssueEvent } from './reviewRequestRemovedIssueEvent';
import { ReviewRequestedIssueEvent } from './reviewRequestedIssueEvent';
import { SimpleUser1 } from './simpleUser1';
import { Team } from './team';
import { UnassignedIssueEvent } from './unassignedIssueEvent';
import { UnlabeledIssueEvent } from './unlabeledIssueEvent';

/**
* Issue Event for Issue
*/
export class IssueEventForIssue {
    'id': number;
    'nodeId': string;
    'url': string;
    'actor': SimpleUser1;
    'event': string;
    'commitId': string | null;
    'commitUrl': string | null;
    'createdAt': string;
    'performedViaGithubApp': GitHubApp;
    'label': LabeledIssueEventLabel;
    'assignee': SimpleUser1;
    'assigner': SimpleUser1;
    'milestone': MilestonedIssueEventMilestone;
    'rename': RenamedIssueEventRename;
    'reviewRequester': SimpleUser1;
    'requestedTeam'?: Team;
    'requestedReviewer'?: SimpleUser1;
    'dismissedReview': ReviewDismissedIssueEventDismissedReview;
    'lockReason': string | null;
    'projectCard'?: AddedToProjectIssueEventProjectCard;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "nodeId",
            "baseName": "node_id",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "actor",
            "baseName": "actor",
            "type": "SimpleUser1"
        },
        {
            "name": "event",
            "baseName": "event",
            "type": "string"
        },
        {
            "name": "commitId",
            "baseName": "commit_id",
            "type": "string"
        },
        {
            "name": "commitUrl",
            "baseName": "commit_url",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "string"
        },
        {
            "name": "performedViaGithubApp",
            "baseName": "performed_via_github_app",
            "type": "GitHubApp"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "LabeledIssueEventLabel"
        },
        {
            "name": "assignee",
            "baseName": "assignee",
            "type": "SimpleUser1"
        },
        {
            "name": "assigner",
            "baseName": "assigner",
            "type": "SimpleUser1"
        },
        {
            "name": "milestone",
            "baseName": "milestone",
            "type": "MilestonedIssueEventMilestone"
        },
        {
            "name": "rename",
            "baseName": "rename",
            "type": "RenamedIssueEventRename"
        },
        {
            "name": "reviewRequester",
            "baseName": "review_requester",
            "type": "SimpleUser1"
        },
        {
            "name": "requestedTeam",
            "baseName": "requested_team",
            "type": "Team"
        },
        {
            "name": "requestedReviewer",
            "baseName": "requested_reviewer",
            "type": "SimpleUser1"
        },
        {
            "name": "dismissedReview",
            "baseName": "dismissed_review",
            "type": "ReviewDismissedIssueEventDismissedReview"
        },
        {
            "name": "lockReason",
            "baseName": "lock_reason",
            "type": "string"
        },
        {
            "name": "projectCard",
            "baseName": "project_card",
            "type": "AddedToProjectIssueEventProjectCard"
        }    ];

    static getAttributeTypeMap() {
        return IssueEventForIssue.attributeTypeMap;
    }
}

