/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { GitHubApp1 } from './gitHubApp1';
import { MinimalRepository } from './minimalRepository';
import { PullRequestMinimal } from './pullRequestMinimal';
import { SimpleCommit1 } from './simpleCommit1';

/**
* A suite of checks performed on the code of a given code change
*/
export class CheckSuite {
    'id': number;
    'nodeId': string;
    'headBranch': string | null;
    /**
    * The SHA of the head commit that is being checked.
    */
    'headSha': string;
    'status': CheckSuite.StatusEnum;
    'conclusion': CheckSuite.ConclusionEnum;
    'url': string | null;
    'before': string | null;
    'after': string | null;
    'pullRequests': Array<PullRequestMinimal> | null;
    'app': GitHubApp1 | null;
    'repository': MinimalRepository;
    'createdAt': Date | null;
    'updatedAt': Date | null;
    'headCommit': SimpleCommit1;
    'latestCheckRunsCount': number;
    'checkRunsUrl': string;
    'rerequestable'?: boolean;
    'runsRerequestable'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "nodeId",
            "baseName": "node_id",
            "type": "string"
        },
        {
            "name": "headBranch",
            "baseName": "head_branch",
            "type": "string"
        },
        {
            "name": "headSha",
            "baseName": "head_sha",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "CheckSuite.StatusEnum"
        },
        {
            "name": "conclusion",
            "baseName": "conclusion",
            "type": "CheckSuite.ConclusionEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "before",
            "baseName": "before",
            "type": "string"
        },
        {
            "name": "after",
            "baseName": "after",
            "type": "string"
        },
        {
            "name": "pullRequests",
            "baseName": "pull_requests",
            "type": "Array<PullRequestMinimal>"
        },
        {
            "name": "app",
            "baseName": "app",
            "type": "GitHubApp1"
        },
        {
            "name": "repository",
            "baseName": "repository",
            "type": "MinimalRepository"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "headCommit",
            "baseName": "head_commit",
            "type": "SimpleCommit1"
        },
        {
            "name": "latestCheckRunsCount",
            "baseName": "latest_check_runs_count",
            "type": "number"
        },
        {
            "name": "checkRunsUrl",
            "baseName": "check_runs_url",
            "type": "string"
        },
        {
            "name": "rerequestable",
            "baseName": "rerequestable",
            "type": "boolean"
        },
        {
            "name": "runsRerequestable",
            "baseName": "runs_rerequestable",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return CheckSuite.attributeTypeMap;
    }
}

export namespace CheckSuite {
    export enum StatusEnum {
        Queued = <any> 'queued',
        InProgress = <any> 'in_progress',
        Completed = <any> 'completed'
    }
    export enum ConclusionEnum {
        Success = <any> 'success',
        Failure = <any> 'failure',
        Neutral = <any> 'neutral',
        Cancelled = <any> 'cancelled',
        Skipped = <any> 'skipped',
        TimedOut = <any> 'timed_out',
        ActionRequired = <any> 'action_required'
    }
}
