/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { GitHubApp1 } from './gitHubApp1';
import { IssuePullRequest } from './issuePullRequest';
import { IssueSearchResultItemLabelsInner } from './issueSearchResultItemLabelsInner';
import { Milestone } from './milestone';
import { ReactionRollup } from './reactionRollup';
import { Repository } from './repository';
import { SearchResultTextMatchesInner } from './searchResultTextMatchesInner';
import { SimpleUser } from './simpleUser';
import { SimpleUser1 } from './simpleUser1';

/**
* Issue Search Result Item
*/
export class IssueSearchResultItem {
    'url': string;
    'repositoryUrl': string;
    'labelsUrl': string;
    'commentsUrl': string;
    'eventsUrl': string;
    'htmlUrl': string;
    'id': number;
    'nodeId': string;
    'number': number;
    'title': string;
    'locked': boolean;
    'activeLockReason'?: string | null;
    'assignees'?: Array<SimpleUser1> | null;
    'user': SimpleUser | null;
    'labels': Array<IssueSearchResultItemLabelsInner>;
    'state': string;
    'stateReason'?: string | null;
    'assignee': SimpleUser | null;
    'milestone': Milestone | null;
    'comments': number;
    'createdAt': Date;
    'updatedAt': Date;
    'closedAt': Date | null;
    'textMatches'?: Array<SearchResultTextMatchesInner>;
    'pullRequest'?: IssuePullRequest;
    'body'?: string;
    'score': number;
    /**
    * How the author is associated with the repository.
    */
    'authorAssociation': IssueSearchResultItem.AuthorAssociationEnum;
    'draft'?: boolean;
    'repository'?: Repository;
    'bodyHtml'?: string;
    'bodyText'?: string;
    'timelineUrl'?: string;
    'performedViaGithubApp'?: GitHubApp1 | null;
    'reactions'?: ReactionRollup;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "repositoryUrl",
            "baseName": "repository_url",
            "type": "string"
        },
        {
            "name": "labelsUrl",
            "baseName": "labels_url",
            "type": "string"
        },
        {
            "name": "commentsUrl",
            "baseName": "comments_url",
            "type": "string"
        },
        {
            "name": "eventsUrl",
            "baseName": "events_url",
            "type": "string"
        },
        {
            "name": "htmlUrl",
            "baseName": "html_url",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "nodeId",
            "baseName": "node_id",
            "type": "string"
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "number"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean"
        },
        {
            "name": "activeLockReason",
            "baseName": "active_lock_reason",
            "type": "string"
        },
        {
            "name": "assignees",
            "baseName": "assignees",
            "type": "Array<SimpleUser1>"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "SimpleUser"
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "Array<IssueSearchResultItemLabelsInner>"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "stateReason",
            "baseName": "state_reason",
            "type": "string"
        },
        {
            "name": "assignee",
            "baseName": "assignee",
            "type": "SimpleUser"
        },
        {
            "name": "milestone",
            "baseName": "milestone",
            "type": "Milestone"
        },
        {
            "name": "comments",
            "baseName": "comments",
            "type": "number"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "closedAt",
            "baseName": "closed_at",
            "type": "Date"
        },
        {
            "name": "textMatches",
            "baseName": "text_matches",
            "type": "Array<SearchResultTextMatchesInner>"
        },
        {
            "name": "pullRequest",
            "baseName": "pull_request",
            "type": "IssuePullRequest"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "number"
        },
        {
            "name": "authorAssociation",
            "baseName": "author_association",
            "type": "IssueSearchResultItem.AuthorAssociationEnum"
        },
        {
            "name": "draft",
            "baseName": "draft",
            "type": "boolean"
        },
        {
            "name": "repository",
            "baseName": "repository",
            "type": "Repository"
        },
        {
            "name": "bodyHtml",
            "baseName": "body_html",
            "type": "string"
        },
        {
            "name": "bodyText",
            "baseName": "body_text",
            "type": "string"
        },
        {
            "name": "timelineUrl",
            "baseName": "timeline_url",
            "type": "string"
        },
        {
            "name": "performedViaGithubApp",
            "baseName": "performed_via_github_app",
            "type": "GitHubApp1"
        },
        {
            "name": "reactions",
            "baseName": "reactions",
            "type": "ReactionRollup"
        }    ];

    static getAttributeTypeMap() {
        return IssueSearchResultItem.attributeTypeMap;
    }
}

export namespace IssueSearchResultItem {
    export enum AuthorAssociationEnum {
        Collaborator = <any> 'COLLABORATOR',
        Contributor = <any> 'CONTRIBUTOR',
        FirstTimer = <any> 'FIRST_TIMER',
        FirstTimeContributor = <any> 'FIRST_TIME_CONTRIBUTOR',
        Mannequin = <any> 'MANNEQUIN',
        Member = <any> 'MEMBER',
        None = <any> 'NONE',
        Owner = <any> 'OWNER'
    }
}
