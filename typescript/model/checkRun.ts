/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CheckRunCheckSuite } from './checkRunCheckSuite';
import { CheckRunOutput } from './checkRunOutput';
import { Deployment1 } from './deployment1';
import { GitHubApp1 } from './gitHubApp1';
import { PullRequestMinimal } from './pullRequestMinimal';

/**
* A check performed on the code of a given code change
*/
export class CheckRun {
    /**
    * The id of the check.
    */
    'id': number;
    /**
    * The SHA of the commit that is being checked.
    */
    'headSha': string;
    'nodeId': string;
    'externalId': string | null;
    'url': string;
    'htmlUrl': string | null;
    'detailsUrl': string | null;
    /**
    * The phase of the lifecycle that the check is currently in.
    */
    'status': CheckRun.StatusEnum;
    'conclusion': CheckRun.ConclusionEnum;
    'startedAt': Date | null;
    'completedAt': Date | null;
    'output': CheckRunOutput;
    /**
    * The name of the check.
    */
    'name': string;
    'checkSuite': CheckRunCheckSuite | null;
    'app': GitHubApp1 | null;
    'pullRequests': Array<PullRequestMinimal>;
    'deployment'?: Deployment1;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "headSha",
            "baseName": "head_sha",
            "type": "string"
        },
        {
            "name": "nodeId",
            "baseName": "node_id",
            "type": "string"
        },
        {
            "name": "externalId",
            "baseName": "external_id",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "htmlUrl",
            "baseName": "html_url",
            "type": "string"
        },
        {
            "name": "detailsUrl",
            "baseName": "details_url",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "CheckRun.StatusEnum"
        },
        {
            "name": "conclusion",
            "baseName": "conclusion",
            "type": "CheckRun.ConclusionEnum"
        },
        {
            "name": "startedAt",
            "baseName": "started_at",
            "type": "Date"
        },
        {
            "name": "completedAt",
            "baseName": "completed_at",
            "type": "Date"
        },
        {
            "name": "output",
            "baseName": "output",
            "type": "CheckRunOutput"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "checkSuite",
            "baseName": "check_suite",
            "type": "CheckRunCheckSuite"
        },
        {
            "name": "app",
            "baseName": "app",
            "type": "GitHubApp1"
        },
        {
            "name": "pullRequests",
            "baseName": "pull_requests",
            "type": "Array<PullRequestMinimal>"
        },
        {
            "name": "deployment",
            "baseName": "deployment",
            "type": "Deployment1"
        }    ];

    static getAttributeTypeMap() {
        return CheckRun.attributeTypeMap;
    }
}

export namespace CheckRun {
    export enum StatusEnum {
        Queued = <any> 'queued',
        InProgress = <any> 'in_progress',
        Completed = <any> 'completed'
    }
    export enum ConclusionEnum {
        Success = <any> 'success',
        Failure = <any> 'failure',
        Neutral = <any> 'neutral',
        Cancelled = <any> 'cancelled',
        Skipped = <any> 'skipped',
        TimedOut = <any> 'timed_out',
        ActionRequired = <any> 'action_required'
    }
}
