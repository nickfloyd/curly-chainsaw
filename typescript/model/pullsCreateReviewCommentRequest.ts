/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class PullsCreateReviewCommentRequest {
    /**
    * The text of the review comment.
    */
    'body': string;
    /**
    * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
    */
    'commitId': string;
    /**
    * The relative path to the file that necessitates a comment.
    */
    'path': string;
    /**
    * **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
    */
    'position'?: number;
    /**
    * In a split diff view, the side of the diff that the pull request\'s changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.
    */
    'side'?: PullsCreateReviewCommentRequest.SideEnum;
    /**
    * The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
    */
    'line': number;
    /**
    * **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.
    */
    'startLine'?: number;
    /**
    * **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.
    */
    'startSide'?: PullsCreateReviewCommentRequest.StartSideEnum;
    /**
    * The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
    */
    'inReplyTo'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "commitId",
            "baseName": "commit_id",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "side",
            "baseName": "side",
            "type": "PullsCreateReviewCommentRequest.SideEnum"
        },
        {
            "name": "line",
            "baseName": "line",
            "type": "number"
        },
        {
            "name": "startLine",
            "baseName": "start_line",
            "type": "number"
        },
        {
            "name": "startSide",
            "baseName": "start_side",
            "type": "PullsCreateReviewCommentRequest.StartSideEnum"
        },
        {
            "name": "inReplyTo",
            "baseName": "in_reply_to",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return PullsCreateReviewCommentRequest.attributeTypeMap;
    }
}

export namespace PullsCreateReviewCommentRequest {
    export enum SideEnum {
        Left = <any> 'LEFT',
        Right = <any> 'RIGHT'
    }
    export enum StartSideEnum {
        Left = <any> 'LEFT',
        Right = <any> 'RIGHT',
        Side = <any> 'side'
    }
}
