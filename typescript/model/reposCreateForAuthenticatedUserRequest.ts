/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class ReposCreateForAuthenticatedUserRequest {
    /**
    * The name of the repository.
    */
    'name': string;
    /**
    * A short description of the repository.
    */
    'description'?: string;
    /**
    * A URL with more information about the repository.
    */
    'homepage'?: string;
    /**
    * Whether the repository is private.
    */
    '_private'?: boolean = false;
    /**
    * Whether issues are enabled.
    */
    'hasIssues'?: boolean = true;
    /**
    * Whether projects are enabled.
    */
    'hasProjects'?: boolean = true;
    /**
    * Whether the wiki is enabled.
    */
    'hasWiki'?: boolean = true;
    /**
    * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
    */
    'teamId'?: number;
    /**
    * Whether the repository is initialized with a minimal README.
    */
    'autoInit'?: boolean = false;
    /**
    * The desired language or platform to apply to the .gitignore.
    */
    'gitignoreTemplate'?: string;
    /**
    * The license keyword of the open source license for this repository.
    */
    'licenseTemplate'?: string;
    /**
    * Whether to allow squash merges for pull requests.
    */
    'allowSquashMerge'?: boolean = true;
    /**
    * Whether to allow merge commits for pull requests.
    */
    'allowMergeCommit'?: boolean = true;
    /**
    * Whether to allow rebase merges for pull requests.
    */
    'allowRebaseMerge'?: boolean = true;
    /**
    * Whether to allow Auto-merge to be used on pull requests.
    */
    'allowAutoMerge'?: boolean = false;
    /**
    * Whether to delete head branches when pull requests are merged
    */
    'deleteBranchOnMerge'?: boolean = false;
    /**
    * Whether downloads are enabled.
    */
    'hasDownloads'?: boolean = true;
    /**
    * Whether this repository acts as a template that can be used to generate new repositories.
    */
    'isTemplate'?: boolean = false;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "homepage",
            "baseName": "homepage",
            "type": "string"
        },
        {
            "name": "_private",
            "baseName": "private",
            "type": "boolean"
        },
        {
            "name": "hasIssues",
            "baseName": "has_issues",
            "type": "boolean"
        },
        {
            "name": "hasProjects",
            "baseName": "has_projects",
            "type": "boolean"
        },
        {
            "name": "hasWiki",
            "baseName": "has_wiki",
            "type": "boolean"
        },
        {
            "name": "teamId",
            "baseName": "team_id",
            "type": "number"
        },
        {
            "name": "autoInit",
            "baseName": "auto_init",
            "type": "boolean"
        },
        {
            "name": "gitignoreTemplate",
            "baseName": "gitignore_template",
            "type": "string"
        },
        {
            "name": "licenseTemplate",
            "baseName": "license_template",
            "type": "string"
        },
        {
            "name": "allowSquashMerge",
            "baseName": "allow_squash_merge",
            "type": "boolean"
        },
        {
            "name": "allowMergeCommit",
            "baseName": "allow_merge_commit",
            "type": "boolean"
        },
        {
            "name": "allowRebaseMerge",
            "baseName": "allow_rebase_merge",
            "type": "boolean"
        },
        {
            "name": "allowAutoMerge",
            "baseName": "allow_auto_merge",
            "type": "boolean"
        },
        {
            "name": "deleteBranchOnMerge",
            "baseName": "delete_branch_on_merge",
            "type": "boolean"
        },
        {
            "name": "hasDownloads",
            "baseName": "has_downloads",
            "type": "boolean"
        },
        {
            "name": "isTemplate",
            "baseName": "is_template",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return ReposCreateForAuthenticatedUserRequest.attributeTypeMap;
    }
}

