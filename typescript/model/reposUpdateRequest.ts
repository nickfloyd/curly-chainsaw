/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ReposUpdateRequestSecurityAndAnalysis } from './reposUpdateRequestSecurityAndAnalysis';

export class ReposUpdateRequest {
    /**
    * The name of the repository.
    */
    'name'?: string;
    /**
    * A short description of the repository.
    */
    'description'?: string;
    /**
    * A URL with more information about the repository.
    */
    'homepage'?: string;
    /**
    * Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
    */
    '_private'?: boolean = false;
    /**
    * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\"
    */
    'visibility'?: ReposUpdateRequest.VisibilityEnum;
    'securityAndAnalysis'?: ReposUpdateRequestSecurityAndAnalysis | null;
    /**
    * Either `true` to enable issues for this repository or `false` to disable them.
    */
    'hasIssues'?: boolean = true;
    /**
    * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you\'re creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
    */
    'hasProjects'?: boolean = true;
    /**
    * Either `true` to enable the wiki for this repository or `false` to disable it.
    */
    'hasWiki'?: boolean = true;
    /**
    * Either `true` to make this repo available as a template repository or `false` to prevent it.
    */
    'isTemplate'?: boolean = false;
    /**
    * Updates the default branch for this repository.
    */
    'defaultBranch'?: string;
    /**
    * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
    */
    'allowSquashMerge'?: boolean = true;
    /**
    * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
    */
    'allowMergeCommit'?: boolean = true;
    /**
    * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
    */
    'allowRebaseMerge'?: boolean = true;
    /**
    * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
    */
    'allowAutoMerge'?: boolean = false;
    /**
    * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
    */
    'deleteBranchOnMerge'?: boolean = false;
    /**
    * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
    */
    'allowUpdateBranch'?: boolean = false;
    /**
    * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message.
    */
    'useSquashPrTitleAsDefault'?: boolean = false;
    /**
    * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
    */
    'archived'?: boolean = false;
    /**
    * Either `true` to allow private forks, or `false` to prevent private forks.
    */
    'allowForking'?: boolean = false;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "homepage",
            "baseName": "homepage",
            "type": "string"
        },
        {
            "name": "_private",
            "baseName": "private",
            "type": "boolean"
        },
        {
            "name": "visibility",
            "baseName": "visibility",
            "type": "ReposUpdateRequest.VisibilityEnum"
        },
        {
            "name": "securityAndAnalysis",
            "baseName": "security_and_analysis",
            "type": "ReposUpdateRequestSecurityAndAnalysis"
        },
        {
            "name": "hasIssues",
            "baseName": "has_issues",
            "type": "boolean"
        },
        {
            "name": "hasProjects",
            "baseName": "has_projects",
            "type": "boolean"
        },
        {
            "name": "hasWiki",
            "baseName": "has_wiki",
            "type": "boolean"
        },
        {
            "name": "isTemplate",
            "baseName": "is_template",
            "type": "boolean"
        },
        {
            "name": "defaultBranch",
            "baseName": "default_branch",
            "type": "string"
        },
        {
            "name": "allowSquashMerge",
            "baseName": "allow_squash_merge",
            "type": "boolean"
        },
        {
            "name": "allowMergeCommit",
            "baseName": "allow_merge_commit",
            "type": "boolean"
        },
        {
            "name": "allowRebaseMerge",
            "baseName": "allow_rebase_merge",
            "type": "boolean"
        },
        {
            "name": "allowAutoMerge",
            "baseName": "allow_auto_merge",
            "type": "boolean"
        },
        {
            "name": "deleteBranchOnMerge",
            "baseName": "delete_branch_on_merge",
            "type": "boolean"
        },
        {
            "name": "allowUpdateBranch",
            "baseName": "allow_update_branch",
            "type": "boolean"
        },
        {
            "name": "useSquashPrTitleAsDefault",
            "baseName": "use_squash_pr_title_as_default",
            "type": "boolean"
        },
        {
            "name": "archived",
            "baseName": "archived",
            "type": "boolean"
        },
        {
            "name": "allowForking",
            "baseName": "allow_forking",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return ReposUpdateRequest.attributeTypeMap;
    }
}

export namespace ReposUpdateRequest {
    export enum VisibilityEnum {
        Public = <any> 'public',
        Private = <any> 'private',
        Internal = <any> 'internal'
    }
}
