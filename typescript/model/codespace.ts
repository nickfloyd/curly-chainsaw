/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CodespaceGitStatus } from './codespaceGitStatus';
import { CodespaceMachine } from './codespaceMachine';
import { CodespaceRuntimeConstraints } from './codespaceRuntimeConstraints';
import { MinimalRepository } from './minimalRepository';
import { SimpleUser1 } from './simpleUser1';

/**
* A codespace.
*/
export class Codespace {
    'id': number;
    /**
    * Automatically generated name of this codespace.
    */
    'name': string;
    /**
    * Display name for this codespace.
    */
    'displayName'?: string | null;
    /**
    * UUID identifying this codespace\'s environment.
    */
    'environmentId': string | null;
    'owner': SimpleUser1;
    'billableOwner': SimpleUser1;
    'repository': MinimalRepository;
    'machine': CodespaceMachine | null;
    /**
    * Path to devcontainer.json from repo root used to create Codespace.
    */
    'devcontainerPath'?: string | null;
    /**
    * Whether the codespace was created from a prebuild.
    */
    'prebuild': boolean | null;
    'createdAt': Date;
    'updatedAt': Date;
    /**
    * Last known time this codespace was started.
    */
    'lastUsedAt': Date;
    /**
    * State of this codespace.
    */
    'state': Codespace.StateEnum;
    /**
    * API URL for this codespace.
    */
    'url': string;
    'gitStatus': CodespaceGitStatus;
    /**
    * The Azure region where this codespace is located.
    */
    'location': Codespace.LocationEnum;
    /**
    * The number of minutes of inactivity after which this codespace will be automatically stopped.
    */
    'idleTimeoutMinutes': number | null;
    /**
    * URL to access this codespace on the web.
    */
    'webUrl': string;
    /**
    * API URL to access available alternate machine types for this codespace.
    */
    'machinesUrl': string;
    /**
    * API URL to start this codespace.
    */
    'startUrl': string;
    /**
    * API URL to stop this codespace.
    */
    'stopUrl': string;
    /**
    * API URL for the Pull Request associated with this codespace, if any.
    */
    'pullsUrl': string | null;
    'recentFolders': Array<string>;
    'runtimeConstraints'?: CodespaceRuntimeConstraints;
    /**
    * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
    */
    'pendingOperation'?: boolean | null;
    /**
    * Text to show user when codespace is disabled by a pending operation
    */
    'pendingOperationDisabledReason'?: string | null;
    /**
    * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
    */
    'idleTimeoutNotice'?: string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "environmentId",
            "baseName": "environment_id",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "SimpleUser1"
        },
        {
            "name": "billableOwner",
            "baseName": "billable_owner",
            "type": "SimpleUser1"
        },
        {
            "name": "repository",
            "baseName": "repository",
            "type": "MinimalRepository"
        },
        {
            "name": "machine",
            "baseName": "machine",
            "type": "CodespaceMachine"
        },
        {
            "name": "devcontainerPath",
            "baseName": "devcontainer_path",
            "type": "string"
        },
        {
            "name": "prebuild",
            "baseName": "prebuild",
            "type": "boolean"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "lastUsedAt",
            "baseName": "last_used_at",
            "type": "Date"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "Codespace.StateEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "gitStatus",
            "baseName": "git_status",
            "type": "CodespaceGitStatus"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "Codespace.LocationEnum"
        },
        {
            "name": "idleTimeoutMinutes",
            "baseName": "idle_timeout_minutes",
            "type": "number"
        },
        {
            "name": "webUrl",
            "baseName": "web_url",
            "type": "string"
        },
        {
            "name": "machinesUrl",
            "baseName": "machines_url",
            "type": "string"
        },
        {
            "name": "startUrl",
            "baseName": "start_url",
            "type": "string"
        },
        {
            "name": "stopUrl",
            "baseName": "stop_url",
            "type": "string"
        },
        {
            "name": "pullsUrl",
            "baseName": "pulls_url",
            "type": "string"
        },
        {
            "name": "recentFolders",
            "baseName": "recent_folders",
            "type": "Array<string>"
        },
        {
            "name": "runtimeConstraints",
            "baseName": "runtime_constraints",
            "type": "CodespaceRuntimeConstraints"
        },
        {
            "name": "pendingOperation",
            "baseName": "pending_operation",
            "type": "boolean"
        },
        {
            "name": "pendingOperationDisabledReason",
            "baseName": "pending_operation_disabled_reason",
            "type": "string"
        },
        {
            "name": "idleTimeoutNotice",
            "baseName": "idle_timeout_notice",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Codespace.attributeTypeMap;
    }
}

export namespace Codespace {
    export enum StateEnum {
        Unknown = <any> 'Unknown',
        Created = <any> 'Created',
        Queued = <any> 'Queued',
        Provisioning = <any> 'Provisioning',
        Available = <any> 'Available',
        Awaiting = <any> 'Awaiting',
        Unavailable = <any> 'Unavailable',
        Deleted = <any> 'Deleted',
        Moved = <any> 'Moved',
        Shutdown = <any> 'Shutdown',
        Archived = <any> 'Archived',
        Starting = <any> 'Starting',
        ShuttingDown = <any> 'ShuttingDown',
        Failed = <any> 'Failed',
        Exporting = <any> 'Exporting',
        Updating = <any> 'Updating',
        Rebuilding = <any> 'Rebuilding'
    }
    export enum LocationEnum {
        EastUs = <any> 'EastUs',
        SouthEastAsia = <any> 'SouthEastAsia',
        WestEurope = <any> 'WestEurope',
        WestUs2 = <any> 'WestUs2'
    }
}
