/**
 * GitHub v3 REST API
 * GitHub\'s v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AuthenticationToken } from '../model/authenticationToken';
import { BasicError } from '../model/basicError';
import { EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest } from '../model/enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest';
import { EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest } from '../model/enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest';
import { EnterpriseAdminGetAllowedActionsEnterprise200Response } from '../model/enterpriseAdminGetAllowedActionsEnterprise200Response';
import { EnterpriseAdminGetAuditLog200ResponseInner } from '../model/enterpriseAdminGetAuditLog200ResponseInner';
import { EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response } from '../model/enterpriseAdminGetGithubActionsPermissionsEnterprise200Response';
import { EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response } from '../model/enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response';
import { EnterpriseAdminListProvisionedGroupsEnterprise200Response } from '../model/enterpriseAdminListProvisionedGroupsEnterprise200Response';
import { EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner } from '../model/enterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner';
import { EnterpriseAdminListProvisionedIdentitiesEnterprise200Response } from '../model/enterpriseAdminListProvisionedIdentitiesEnterprise200Response';
import { EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response } from '../model/enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response';
import { EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response } from '../model/enterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response';
import { EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner } from '../model/enterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner';
import { EnterpriseAdminListSelfHostedRunnersForEnterprise200Response } from '../model/enterpriseAdminListSelfHostedRunnersForEnterprise200Response';
import { EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response } from '../model/enterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response';
import { EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest } from '../model/enterpriseAdminProvisionAndInviteEnterpriseGroupRequest';
import { EnterpriseAdminProvisionAndInviteEnterpriseUser201Response } from '../model/enterpriseAdminProvisionAndInviteEnterpriseUser201Response';
import { EnterpriseAdminProvisionAndInviteEnterpriseUserRequest } from '../model/enterpriseAdminProvisionAndInviteEnterpriseUserRequest';
import { EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest } from '../model/enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest';
import { EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest } from '../model/enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest';
import { EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest } from '../model/enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest';
import { EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest } from '../model/enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest';
import { EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest } from '../model/enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest';
import { EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest } from '../model/enterpriseAdminUpdateAttributeForEnterpriseGroupRequest';
import { EnterpriseAdminUpdateAttributeForEnterpriseUserRequest } from '../model/enterpriseAdminUpdateAttributeForEnterpriseUserRequest';
import { EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest } from '../model/enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest';
import { RunnerApplication } from '../model/runnerApplication';
import { SelfHostedRunners } from '../model/selfHostedRunners';
import { ServerStatisticsProxyEndpointInner } from '../model/serverStatisticsProxyEndpointInner';
import { ValidationErrorSimple } from '../model/validationErrorSimple';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.github.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum EnterpriseAdminApiApiKeys {
}

export class EnterpriseAdminApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: EnterpriseAdminApiApiKeys, value: string) {
        (this.authentications as any)[EnterpriseAdminApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Add custom labels to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Add custom labels to a self-hosted runner for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerId Unique identifier of the self-hosted runner.
     * @param enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest 
     */
    public async enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise (enterprise: string, runnerId: number, enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest: EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest' is not null or undefined
        if (enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest === null || enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest was null or undefined when calling enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, "EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Add organization access to a self-hosted runner group in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param orgId The unique identifier of the organization.
     */
    public async enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise (enterprise: string, runnerGroupId: number, orgId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)))
            .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        // verify required parameter 'orgId' is not null or undefined
        if (orgId === null || orgId === undefined) {
            throw new Error('Required parameter orgId was null or undefined when calling enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Add a self-hosted runner to a group for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param runnerId Unique identifier of the self-hosted runner.
     */
    public async enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise (enterprise: string, runnerGroupId: number, runnerId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN ```
     * @summary Create a registration token for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    public async enterpriseAdminCreateRegistrationTokenForEnterprise (enterprise: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthenticationToken;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/registration-token'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminCreateRegistrationTokenForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthenticationToken;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthenticationToken");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
     * @summary Create a remove token for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    public async enterpriseAdminCreateRemoveTokenForEnterprise (enterprise: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthenticationToken;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/remove-token'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminCreateRemoveTokenForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthenticationToken;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthenticationToken");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Create a self-hosted runner group for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest 
     */
    public async enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise (enterprise: string, enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise.');
        }

        // verify required parameter 'enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest' is not null or undefined
        if (enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest === null || enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest was null or undefined when calling enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, "EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     * @summary Delete a SCIM group from an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
     */
    public async enterpriseAdminDeleteScimGroupFromEnterprise (enterprise: string, scimGroupId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_group_id' + '}', encodeURIComponent(String(scimGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminDeleteScimGroupFromEnterprise.');
        }

        // verify required parameter 'scimGroupId' is not null or undefined
        if (scimGroupId === null || scimGroupId === undefined) {
            throw new Error('Required parameter scimGroupId was null or undefined when calling enterpriseAdminDeleteScimGroupFromEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Delete a self-hosted runner from an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerId Unique identifier of the self-hosted runner.
     */
    public async enterpriseAdminDeleteSelfHostedRunnerFromEnterprise (enterprise: string, runnerId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/{runner_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminDeleteSelfHostedRunnerFromEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminDeleteSelfHostedRunnerFromEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Delete a self-hosted runner group from an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     */
    public async enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise (enterprise: string, runnerGroupId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     * @summary Delete a SCIM user from an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimUserId The unique identifier of the SCIM user.
     */
    public async enterpriseAdminDeleteUserFromEnterprise (enterprise: string, scimUserId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_user_id' + '}', encodeURIComponent(String(scimUserId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminDeleteUserFromEnterprise.');
        }

        // verify required parameter 'scimUserId' is not null or undefined
        if (scimUserId === null || scimUserId === undefined) {
            throw new Error('Required parameter scimUserId was null or undefined when calling enterpriseAdminDeleteUserFromEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary Disable a selected organization for GitHub Actions in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param orgId The unique identifier of the organization.
     */
    public async enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise (enterprise: string, orgId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise.');
        }

        // verify required parameter 'orgId' is not null or undefined
        if (orgId === null || orgId === undefined) {
            throw new Error('Required parameter orgId was null or undefined when calling enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary Enable a selected organization for GitHub Actions in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param orgId The unique identifier of the organization.
     */
    public async enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise (enterprise: string, orgId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise.');
        }

        // verify required parameter 'orgId' is not null or undefined
        if (orgId === null || orgId === undefined) {
            throw new Error('Required parameter orgId was null or undefined when calling enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary Get allowed actions and reusable workflows for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    public async enterpriseAdminGetAllowedActionsEnterprise (enterprise: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminGetAllowedActionsEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions/selected-actions'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminGetAllowedActionsEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminGetAllowedActionsEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminGetAllowedActionsEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
     * @summary Get the audit log for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
     * @param include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;.
     * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
     * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
     * @param order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;.
     * @param page Page number of the results to fetch.
     * @param perPage The number of results per page (max 100).
     */
    public async enterpriseAdminGetAuditLog (enterprise: string, phrase?: string, include?: 'web' | 'git' | 'all', after?: string, before?: string, order?: 'desc' | 'asc', page?: number, perPage?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<EnterpriseAdminGetAuditLog200ResponseInner>;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/audit-log'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminGetAuditLog.');
        }

        if (phrase !== undefined) {
            localVarQueryParameters['phrase'] = ObjectSerializer.serialize(phrase, "string");
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "'web' | 'git' | 'all'");
        }

        if (after !== undefined) {
            localVarQueryParameters['after'] = ObjectSerializer.serialize(after, "string");
        }

        if (before !== undefined) {
            localVarQueryParameters['before'] = ObjectSerializer.serialize(before, "string");
        }

        if (order !== undefined) {
            localVarQueryParameters['order'] = ObjectSerializer.serialize(order, "'desc' | 'asc'");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (perPage !== undefined) {
            localVarQueryParameters['per_page'] = ObjectSerializer.serialize(perPage, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<EnterpriseAdminGetAuditLog200ResponseInner>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<EnterpriseAdminGetAuditLog200ResponseInner>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary Get GitHub Actions permissions for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    public async enterpriseAdminGetGithubActionsPermissionsEnterprise (enterprise: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminGetGithubActionsPermissionsEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminGetGithubActionsPermissionsEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     * @summary Get SCIM provisioning information for an enterprise group
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
     * @param excludedAttributes Attributes to exclude.
     */
    public async enterpriseAdminGetProvisioningInformationForEnterpriseGroup (enterprise: string, scimGroupId: string, excludedAttributes?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_group_id' + '}', encodeURIComponent(String(scimGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminGetProvisioningInformationForEnterpriseGroup.');
        }

        // verify required parameter 'scimGroupId' is not null or undefined
        if (scimGroupId === null || scimGroupId === undefined) {
            throw new Error('Required parameter scimGroupId was null or undefined when calling enterpriseAdminGetProvisioningInformationForEnterpriseGroup.');
        }

        if (excludedAttributes !== undefined) {
            localVarQueryParameters['excludedAttributes'] = ObjectSerializer.serialize(excludedAttributes, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     * @summary Get SCIM provisioning information for an enterprise user
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimUserId The unique identifier of the SCIM user.
     */
    public async enterpriseAdminGetProvisioningInformationForEnterpriseUser (enterprise: string, scimUserId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_user_id' + '}', encodeURIComponent(String(scimUserId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminGetProvisioningInformationForEnterpriseUser.');
        }

        // verify required parameter 'scimUserId' is not null or undefined
        if (scimUserId === null || scimUserId === undefined) {
            throw new Error('Required parameter scimUserId was null or undefined when calling enterpriseAdminGetProvisioningInformationForEnterpriseUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminProvisionAndInviteEnterpriseUser201Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Get a self-hosted runner for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerId Unique identifier of the self-hosted runner.
     */
    public async enterpriseAdminGetSelfHostedRunnerForEnterprise (enterprise: string, runnerId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SelfHostedRunners;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/{runner_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminGetSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminGetSelfHostedRunnerForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SelfHostedRunners;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SelfHostedRunners");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Get a self-hosted runner group for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     */
    public async enterpriseAdminGetSelfHostedRunnerGroupForEnterprise (enterprise: string, runnerGroupId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminGetSelfHostedRunnerGroupForEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminGetSelfHostedRunnerGroupForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.  To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \"[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\" in the GitHub Enterprise Server documentation.  You\'ll need to use a personal access token:   - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you\'ll need a personal access token with the `read:enterprise` permission.   - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you\'ll need a personal access token with the `read:org` permission.  For more information on creating a personal access token, see \"[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\"
     * @summary Get GitHub Enterprise Server statistics
     * @param enterpriseOrOrg The slug version of the enterprise name or the login of an organization.
     * @param dateStart A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
     * @param dateEnd A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
     */
    public async enterpriseAdminGetServerStatistics (enterpriseOrOrg: string, dateStart?: string, dateEnd?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<ServerStatisticsProxyEndpointInner>;  }> {
        const localVarPath = this.basePath + '/enterprise-installation/{enterprise_or_org}/server-statistics'
            .replace('{' + 'enterprise_or_org' + '}', encodeURIComponent(String(enterpriseOrOrg)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterpriseOrOrg' is not null or undefined
        if (enterpriseOrOrg === null || enterpriseOrOrg === undefined) {
            throw new Error('Required parameter enterpriseOrOrg was null or undefined when calling enterpriseAdminGetServerStatistics.');
        }

        if (dateStart !== undefined) {
            localVarQueryParameters['date_start'] = ObjectSerializer.serialize(dateStart, "string");
        }

        if (dateEnd !== undefined) {
            localVarQueryParameters['date_end'] = ObjectSerializer.serialize(dateEnd, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<ServerStatisticsProxyEndpointInner>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<ServerStatisticsProxyEndpointInner>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists all labels for a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary List labels for a self-hosted runner for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerId Unique identifier of the self-hosted runner.
     */
    public async enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise (enterprise: string, runnerId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary List organization access to a self-hosted runner group in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param perPage The number of results per page (max 100).
     * @param page Page number of the results to fetch.
     */
    public async enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise (enterprise: string, runnerGroupId: number, perPage?: number, page?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        if (perPage !== undefined) {
            localVarQueryParameters['per_page'] = ObjectSerializer.serialize(perPage, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     * @summary List provisioned SCIM groups for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param startIndex Used for pagination: the index of the first result to return.
     * @param count Used for pagination: the number of results to return.
     * @param filter filter results
     * @param excludedAttributes attributes to exclude
     */
    public async enterpriseAdminListProvisionedGroupsEnterprise (enterprise: string, startIndex?: number, count?: number, filter?: string, excludedAttributes?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Groups'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListProvisionedGroupsEnterprise.');
        }

        if (startIndex !== undefined) {
            localVarQueryParameters['startIndex'] = ObjectSerializer.serialize(startIndex, "number");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (excludedAttributes !== undefined) {
            localVarQueryParameters['excludedAttributes'] = ObjectSerializer.serialize(excludedAttributes, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListProvisionedGroupsEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Retrieves a paginated list of all provisioned enterprise members, including pending invitations.  When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account\'s metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account\'s metadata is preserved to allow the user to re-join the organization in the future.   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).   - When a user is invited over SCIM, an external identity is created that matches with the invitee\'s email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.  The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:  1. The user is granted access by the IdP and is not a member of the GitHub enterprise.  1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.  1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:    - If the user signs in, their GitHub account is linked to this entry.    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
     * @summary List SCIM provisioned identities for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param startIndex Used for pagination: the index of the first result to return.
     * @param count Used for pagination: the number of results to return.
     * @param filter filter results
     */
    public async enterpriseAdminListProvisionedIdentitiesEnterprise (enterprise: string, startIndex?: number, count?: number, filter?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedIdentitiesEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Users'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListProvisionedIdentitiesEnterprise.');
        }

        if (startIndex !== undefined) {
            localVarQueryParameters['startIndex'] = ObjectSerializer.serialize(startIndex, "number");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedIdentitiesEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListProvisionedIdentitiesEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary List runner applications for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    public async enterpriseAdminListRunnerApplicationsForEnterprise (enterprise: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<RunnerApplication>;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/downloads'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListRunnerApplicationsForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<RunnerApplication>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<RunnerApplication>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary List selected organizations enabled for GitHub Actions in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param perPage The number of results per page (max 100).
     * @param page Page number of the results to fetch.
     */
    public async enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise (enterprise: string, perPage?: number, page?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions/organizations'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise.');
        }

        if (perPage !== undefined) {
            localVarQueryParameters['per_page'] = ObjectSerializer.serialize(perPage, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary List self-hosted runner groups for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param perPage The number of results per page (max 100).
     * @param page Page number of the results to fetch.
     * @param visibleToOrganization Only return runner groups that are allowed to be used by this organization.
     */
    public async enterpriseAdminListSelfHostedRunnerGroupsForEnterprise (enterprise: string, perPage?: number, page?: number, visibleToOrganization?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListSelfHostedRunnerGroupsForEnterprise.');
        }

        if (perPage !== undefined) {
            localVarQueryParameters['per_page'] = ObjectSerializer.serialize(perPage, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (visibleToOrganization !== undefined) {
            localVarQueryParameters['visible_to_organization'] = ObjectSerializer.serialize(visibleToOrganization, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary List self-hosted runners for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param perPage The number of results per page (max 100).
     * @param page Page number of the results to fetch.
     */
    public async enterpriseAdminListSelfHostedRunnersForEnterprise (enterprise: string, perPage?: number, page?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnersForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListSelfHostedRunnersForEnterprise.');
        }

        if (perPage !== undefined) {
            localVarQueryParameters['per_page'] = ObjectSerializer.serialize(perPage, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnersForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelfHostedRunnersForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary List self-hosted runners in a group for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param perPage The number of results per page (max 100).
     * @param page Page number of the results to fetch.
     */
    public async enterpriseAdminListSelfHostedRunnersInGroupForEnterprise (enterprise: string, runnerGroupId: number, perPage?: number, page?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminListSelfHostedRunnersInGroupForEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminListSelfHostedRunnersInGroupForEnterprise.');
        }

        if (perPage !== undefined) {
            localVarQueryParameters['per_page'] = ObjectSerializer.serialize(perPage, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
     * @summary Provision a SCIM enterprise group and invite users
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param enterpriseAdminProvisionAndInviteEnterpriseGroupRequest 
     */
    public async enterpriseAdminProvisionAndInviteEnterpriseGroup (enterprise: string, enterpriseAdminProvisionAndInviteEnterpriseGroupRequest: EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Groups'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminProvisionAndInviteEnterpriseGroup.');
        }

        // verify required parameter 'enterpriseAdminProvisionAndInviteEnterpriseGroupRequest' is not null or undefined
        if (enterpriseAdminProvisionAndInviteEnterpriseGroupRequest === null || enterpriseAdminProvisionAndInviteEnterpriseGroupRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminProvisionAndInviteEnterpriseGroupRequest was null or undefined when calling enterpriseAdminProvisionAndInviteEnterpriseGroup.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminProvisionAndInviteEnterpriseGroupRequest, "EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision enterprise membership for a user, and send organization invitation emails to the email address.  You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
     * @summary Provision and invite a SCIM enterprise user
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param enterpriseAdminProvisionAndInviteEnterpriseUserRequest 
     */
    public async enterpriseAdminProvisionAndInviteEnterpriseUser (enterprise: string, enterpriseAdminProvisionAndInviteEnterpriseUserRequest: EnterpriseAdminProvisionAndInviteEnterpriseUserRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Users'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminProvisionAndInviteEnterpriseUser.');
        }

        // verify required parameter 'enterpriseAdminProvisionAndInviteEnterpriseUserRequest' is not null or undefined
        if (enterpriseAdminProvisionAndInviteEnterpriseUserRequest === null || enterpriseAdminProvisionAndInviteEnterpriseUserRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminProvisionAndInviteEnterpriseUserRequest was null or undefined when calling enterpriseAdminProvisionAndInviteEnterpriseUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminProvisionAndInviteEnterpriseUserRequest, "EnterpriseAdminProvisionAndInviteEnterpriseUserRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminProvisionAndInviteEnterpriseUser201Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Remove all custom labels from a self-hosted runner configured in an enterprise. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Remove all custom labels from a self-hosted runner for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerId Unique identifier of the self-hosted runner.
     */
    public async enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise (enterprise: string, runnerId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Remove a custom label from a self-hosted runner configured in an enterprise. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Remove a custom label from a self-hosted runner for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerId Unique identifier of the self-hosted runner.
     * @param name The name of a self-hosted runner\&#39;s custom label.
     */
    public async enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise (enterprise: string, runnerId: number, name: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)))
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Remove organization access to a self-hosted runner group in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param orgId The unique identifier of the organization.
     */
    public async enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise (enterprise: string, runnerGroupId: number, orgId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)))
            .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        // verify required parameter 'orgId' is not null or undefined
        if (orgId === null || orgId === undefined) {
            throw new Error('Required parameter orgId was null or undefined when calling enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Remove a self-hosted runner from a group for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param runnerId Unique identifier of the self-hosted runner.
     */
    public async enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise (enterprise: string, runnerGroupId: number, runnerId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary Set allowed actions and reusable workflows for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param enterpriseAdminGetAllowedActionsEnterprise200Response 
     */
    public async enterpriseAdminSetAllowedActionsEnterprise (enterprise: string, enterpriseAdminGetAllowedActionsEnterprise200Response: EnterpriseAdminGetAllowedActionsEnterprise200Response, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions/selected-actions'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetAllowedActionsEnterprise.');
        }

        // verify required parameter 'enterpriseAdminGetAllowedActionsEnterprise200Response' is not null or undefined
        if (enterpriseAdminGetAllowedActionsEnterprise200Response === null || enterpriseAdminGetAllowedActionsEnterprise200Response === undefined) {
            throw new Error('Required parameter enterpriseAdminGetAllowedActionsEnterprise200Response was null or undefined when calling enterpriseAdminSetAllowedActionsEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminGetAllowedActionsEnterprise200Response, "EnterpriseAdminGetAllowedActionsEnterprise200Response")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Set custom labels for a self-hosted runner for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerId Unique identifier of the self-hosted runner.
     * @param enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest 
     */
    public async enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise (enterprise: string, runnerId: number, enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest: EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runners/{runner_id}/labels'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_id' + '}', encodeURIComponent(String(runnerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'runnerId' is not null or undefined
        if (runnerId === null || runnerId === undefined) {
            throw new Error('Required parameter runnerId was null or undefined when calling enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise.');
        }

        // verify required parameter 'enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest' is not null or undefined
        if (enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest === null || enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest was null or undefined when calling enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, "EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary Set GitHub Actions permissions for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest 
     */
    public async enterpriseAdminSetGithubActionsPermissionsEnterprise (enterprise: string, enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest: EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetGithubActionsPermissionsEnterprise.');
        }

        // verify required parameter 'enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest' is not null or undefined
        if (enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest === null || enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest was null or undefined when calling enterpriseAdminSetGithubActionsPermissionsEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, "EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don\'t provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
     * @summary Set SCIM information for a provisioned enterprise group
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
     * @param enterpriseAdminProvisionAndInviteEnterpriseGroupRequest 
     */
    public async enterpriseAdminSetInformationForProvisionedEnterpriseGroup (enterprise: string, scimGroupId: string, enterpriseAdminProvisionAndInviteEnterpriseGroupRequest: EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_group_id' + '}', encodeURIComponent(String(scimGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetInformationForProvisionedEnterpriseGroup.');
        }

        // verify required parameter 'scimGroupId' is not null or undefined
        if (scimGroupId === null || scimGroupId === undefined) {
            throw new Error('Required parameter scimGroupId was null or undefined when calling enterpriseAdminSetInformationForProvisionedEnterpriseGroup.');
        }

        // verify required parameter 'enterpriseAdminProvisionAndInviteEnterpriseGroupRequest' is not null or undefined
        if (enterpriseAdminProvisionAndInviteEnterpriseGroupRequest === null || enterpriseAdminProvisionAndInviteEnterpriseGroupRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminProvisionAndInviteEnterpriseGroupRequest was null or undefined when calling enterpriseAdminSetInformationForProvisionedEnterpriseGroup.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminProvisionAndInviteEnterpriseGroupRequest, "EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned user\'s information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don\'t provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.  You must at least provide the required values for the user: `userName`, `name`, and `emails`.  **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
     * @summary Set SCIM information for a provisioned enterprise user
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimUserId The unique identifier of the SCIM user.
     * @param enterpriseAdminProvisionAndInviteEnterpriseUserRequest 
     */
    public async enterpriseAdminSetInformationForProvisionedEnterpriseUser (enterprise: string, scimUserId: string, enterpriseAdminProvisionAndInviteEnterpriseUserRequest: EnterpriseAdminProvisionAndInviteEnterpriseUserRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_user_id' + '}', encodeURIComponent(String(scimUserId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetInformationForProvisionedEnterpriseUser.');
        }

        // verify required parameter 'scimUserId' is not null or undefined
        if (scimUserId === null || scimUserId === undefined) {
            throw new Error('Required parameter scimUserId was null or undefined when calling enterpriseAdminSetInformationForProvisionedEnterpriseUser.');
        }

        // verify required parameter 'enterpriseAdminProvisionAndInviteEnterpriseUserRequest' is not null or undefined
        if (enterpriseAdminProvisionAndInviteEnterpriseUserRequest === null || enterpriseAdminProvisionAndInviteEnterpriseUserRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminProvisionAndInviteEnterpriseUserRequest was null or undefined when calling enterpriseAdminSetInformationForProvisionedEnterpriseUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminProvisionAndInviteEnterpriseUserRequest, "EnterpriseAdminProvisionAndInviteEnterpriseUserRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminProvisionAndInviteEnterpriseUser201Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Set organization access for a self-hosted runner group in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest 
     */
    public async enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise (enterprise: string, runnerGroupId: number, enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        // verify required parameter 'enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest' is not null or undefined
        if (enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest === null || enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest was null or undefined when calling enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, "EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * @summary Set selected organizations enabled for GitHub Actions in an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest 
     */
    public async enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise (enterprise: string, enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/permissions/organizations'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise.');
        }

        // verify required parameter 'enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest' is not null or undefined
        if (enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest === null || enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest was null or undefined when calling enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, "EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Set self-hosted runners in a group for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest 
     */
    public async enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise (enterprise: string, runnerGroupId: number, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise.');
        }

        // verify required parameter 'enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest' is not null or undefined
        if (enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest === null || enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest was null or undefined when calling enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, "EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     * @summary Update an attribute for a SCIM enterprise group
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
     * @param enterpriseAdminUpdateAttributeForEnterpriseGroupRequest 
     */
    public async enterpriseAdminUpdateAttributeForEnterpriseGroup (enterprise: string, scimGroupId: string, enterpriseAdminUpdateAttributeForEnterpriseGroupRequest: EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_group_id' + '}', encodeURIComponent(String(scimGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminUpdateAttributeForEnterpriseGroup.');
        }

        // verify required parameter 'scimGroupId' is not null or undefined
        if (scimGroupId === null || scimGroupId === undefined) {
            throw new Error('Required parameter scimGroupId was null or undefined when calling enterpriseAdminUpdateAttributeForEnterpriseGroup.');
        }

        // verify required parameter 'enterpriseAdminUpdateAttributeForEnterpriseGroupRequest' is not null or undefined
        if (enterpriseAdminUpdateAttributeForEnterpriseGroupRequest === null || enterpriseAdminUpdateAttributeForEnterpriseGroupRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminUpdateAttributeForEnterpriseGroupRequest was null or undefined when calling enterpriseAdminUpdateAttributeForEnterpriseGroup.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminUpdateAttributeForEnterpriseGroupRequest, "EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListProvisionedGroupsEnterprise200ResponseResourcesInner");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned user\'s individual attributes. To change a user\'s values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).  **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.  **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.  ``` {   \"Operations\":[{     \"op\":\"replace\",     \"value\":{       \"active\":false     }   }] } ```
     * @summary Update an attribute for a SCIM enterprise user
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param scimUserId The unique identifier of the SCIM user.
     * @param enterpriseAdminUpdateAttributeForEnterpriseUserRequest 
     */
    public async enterpriseAdminUpdateAttributeForEnterpriseUser (enterprise: string, scimUserId: string, enterpriseAdminUpdateAttributeForEnterpriseUserRequest: EnterpriseAdminUpdateAttributeForEnterpriseUserRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }> {
        const localVarPath = this.basePath + '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'scim_user_id' + '}', encodeURIComponent(String(scimUserId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminUpdateAttributeForEnterpriseUser.');
        }

        // verify required parameter 'scimUserId' is not null or undefined
        if (scimUserId === null || scimUserId === undefined) {
            throw new Error('Required parameter scimUserId was null or undefined when calling enterpriseAdminUpdateAttributeForEnterpriseUser.');
        }

        // verify required parameter 'enterpriseAdminUpdateAttributeForEnterpriseUserRequest' is not null or undefined
        if (enterpriseAdminUpdateAttributeForEnterpriseUserRequest === null || enterpriseAdminUpdateAttributeForEnterpriseUserRequest === undefined) {
            throw new Error('Required parameter enterpriseAdminUpdateAttributeForEnterpriseUserRequest was null or undefined when calling enterpriseAdminUpdateAttributeForEnterpriseUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminUpdateAttributeForEnterpriseUserRequest, "EnterpriseAdminUpdateAttributeForEnterpriseUserRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminProvisionAndInviteEnterpriseUser201Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminProvisionAndInviteEnterpriseUser201Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @summary Update a self-hosted runner group for an enterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param runnerGroupId Unique identifier of the self-hosted runner group.
     * @param enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest 
     */
    public async enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise (enterprise: string, runnerGroupId: number, enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest?: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner;  }> {
        const localVarPath = this.basePath + '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'
            .replace('{' + 'enterprise' + '}', encodeURIComponent(String(enterprise)))
            .replace('{' + 'runner_group_id' + '}', encodeURIComponent(String(runnerGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'enterprise' is not null or undefined
        if (enterprise === null || enterprise === undefined) {
            throw new Error('Required parameter enterprise was null or undefined when calling enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise.');
        }

        // verify required parameter 'runnerGroupId' is not null or undefined
        if (runnerGroupId === null || runnerGroupId === undefined) {
            throw new Error('Required parameter runnerGroupId was null or undefined when calling enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, "EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ResponseRunnerGroupsInner");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
